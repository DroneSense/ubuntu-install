{"version":3,"sources":["components/flightControlViewer/mapDrone.ts"],"names":[],"mappings":"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","file":"components/flightControlViewer/mapDrone.js","sourcesContent":["import { IEventEmitter } from '@dronesense/core/lib/common/IEventEmitter';\nimport { IHomePosition } from '@dronesense/core/lib/common/entities/IHomePosition';\nimport IDrone from '@dronesense/core/lib/common/IDrone';\nimport BackboneEvents from 'backbone-events-standalone';\nimport IPosition from '@dronesense/core/lib/common/entities/IPosition';\nimport { FlightControlViewerEventing } from './FlightControlViewer';\n\n// export interface IMapDroneEvents extends IEventEmitter {\n//     on(eventName: string, callback?: Function, context?: any): any;\n//     on(eventName: 'locating-drone', callback?: (username: string) => void, context?: any): any;\n//     on(eventName: 'drone-located', callback?: (username: string) => void, context?: any): any;\n// }\n\nexport class MapDrone {\n\n    // Backbone events    \n    // on: (eventName: string, callback?: Function, context?: any) => any;\n    // once: (events: string, callback: Function, context?: any) => any;\n    // off: (eventName?: string, callback?: Function, context?: any) => any;\n    // protected trigger: (eventName: string, ...args: any[]) => any;\n\n    // Default distance for flyto\n    defaultZoomDistance: number = 10;\n\n    // Current map\n    map: Cesium.Viewer;\n\n    // Session drone\n    drone: IDrone;\n\n    // Drone entity on map\n    droneEntity: Cesium.Entity;\n\n    // Hold updated position from telemetry stream\n    dronePosition: Cesium.Cartesian3;\n\n    // Property update\n    extrapolatedDronePosition: Cesium.SampledPositionProperty;\n\n    eventing: FlightControlViewerEventing;\n\n    // The current longitude reported from the drone\n    currentLng: number;\n\n    // The current lat reported from the drone\n    currentLat: number;\n\n    // The current msl alititude repported from the drone\n    currentAlt: number;\n\n    // Current AGL altitude\n    currentAGLAlt: number;\n\n    // Current heading value\n    currentHeading: number;\n\n    // Current pitch\n    currentPitch: number;\n\n    // Current roll\n    currentRoll: number;\n\n    // Home location height above terrain\n    homeHAE: number = 0;\n\n    // Color for session id\n    pathColor: string;\n\n    // Variable for interval timer\n    intervalTimer: any;\n\n    // Reference to parent sessions entity collection\n    mapEntityCollection: Cesium.CustomDataSource;\n\n    // Height correction factor applied to the model so that it appears to be on the ground.\n    modelHeightCorrection: number = .4;\n\n    // flag to indicate if this sessino is an owner session so we can handle lookup\n    isOwnerSession: boolean;\n\n    constructor(mapEntityCollection: Cesium.CustomDataSource) {\n        this.mapEntityCollection = mapEntityCollection;\n    }\n\n    initializeDrone(eventing: FlightControlViewerEventing, drone: IDrone, map: Cesium.Viewer, color: string, isOwnerSession: boolean): Promise<MapDrone> {\n\n        return new Promise<MapDrone>((resolve) => {\n\n            this.map = map;\n            this.drone = drone;\n            this.eventing = eventing;\n            this.pathColor = color;\n            this.isOwnerSession = isOwnerSession;\n\n            this.eventing.trigger('locating-drone');\n\n            this.getDroneLocation().then(() => {\n\n                this.startDronePositionUpdatesStream();\n\n                this.createDrone();\n\n                this.startInterval();\n\n                this.drone.on('disconnected', () => {\n                    console.log('drone disconnected');\n                });\n\n                this.drone.on('connected', () => {\n                    console.log('drone connected');\n                });\n\n                this.drone.on('unreachable', () => {\n                    console.log('drone unreachable');\n                });\n\n                this.eventing.trigger('drone-located');\n\n                resolve(this);\n            });\n\n        });\n\n    }\n\n    // Get the drone location and set its current values\n    getDroneLocation(): Promise<void> {\n        \n        return new Promise<void>((resolve) => {\n\n            this.drone.FlightController.Telemetry.once('Position', (value: IPosition) => {\n\n                console.log('getting drone position promise');\n                \n                this.currentLng = value.longitude;\n                this.currentLat = value.lattitude;\n                this.currentAlt = value.altitudeMSL + this.modelHeightCorrection;\n                this.currentAGLAlt = value.altitudeAGL;\n                this.currentHeading = Cesium.Math.toRadians(value.heading);\n\n                if (this.drone.FlightController.Telemetry.Attitude) {\n                    this.currentPitch = this.drone.FlightController.Telemetry.Attitude.pitch;\n                    this.currentRoll = this.drone.FlightController.Telemetry.Attitude.roll;\n                }\n                \n                this.dronePosition = Cesium.Cartesian3.fromDegrees(this.currentLng, this.currentLat, this.currentAlt);\n\n                // Check if owner session and get hae and set, if not just resolve\n                if (this.isOwnerSession) {\n\n                    this.getDroneHAE(this.currentLat, this.currentLng).then((height: number) => {\n                        \n                        if (height) {\n                            this.homeHAE = height;\n                        }\n\n                        this.drone.FlightController.enableAltitudeMSLOffset(true, height).then(() => {\n\n                        resolve();\n\n                        }).catch((error) => {\n                            console.log(error);\n                        });\n                    });\n                } else {\n                    this.homeHAE = value.altitudeMSL - value.altitudeAGL;\n                    resolve();\n                }\n\n            });\n        });\n\n    }\n\n    startDronePositionUpdatesStream(): void {\n\n        this.drone.FlightController.Telemetry.on('Position', (value: IPosition) => {\n                \n            this.currentLng = value.longitude;\n            this.currentLat = value.lattitude;\n            this.currentAlt = value.altitudeMSL + this.modelHeightCorrection;\n            this.currentAGLAlt = value.altitudeAGL;\n            this.currentHeading = Cesium.Math.toRadians(value.heading);\n            this.currentPitch = this.drone.FlightController.Telemetry.Attitude.pitch;\n            this.currentRoll = this.drone.FlightController.Telemetry.Attitude.roll;\n\n            this.dronePosition = Cesium.Cartesian3.fromDegrees(this.currentLng, this.currentLat, this.currentAlt);\n\n        });\n    }\n\n    terrainProvider: any = new Cesium.CesiumTerrainProvider({\n        url : 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0'\n        //url: '//assets.agi.com/stk-terrain/world'\n    });\n\n    getDroneHAE(latitude?: number, longitude?: number): Promise<number> {\n                \n        return new Promise<number>((resolve) => {\n\n\n\n            let positions: Array<Cesium.Cartographic>;\n\n            if (latitude && longitude) {\n                 positions = [\n                    Cesium.Cartographic.fromDegrees(longitude, latitude)\n                ];\n            } else {\n                positions = [\n                    Cesium.Cartographic.fromDegrees(this.currentLng, this.currentLat)\n                ];\n            }\n\n            try {\n\n                // Get terrain height at click location before adding takeoff point\n                Cesium.sampleTerrain(this.terrainProvider, 15, positions).then((updatedPositions: any): void => {\n                    \n                    resolve(updatedPositions[0].height);\n\n                });\n            } catch (error) {\n                console.log(error);\n            }\n\n        });\n    }\n\n    createDrone(): void {\n        \n        // First initialize the position property\n        this.extrapolatedDronePosition = new Cesium.SampledPositionProperty();\n        this.extrapolatedDronePosition.forwardExtrapolationDuration = 0;\n        this.extrapolatedDronePosition.forwardExtrapolationType = Cesium.ExtrapolationType.EXTRAPOLATE;\n        // this.extrapolatedDronePosition.setInterpolationOptions({\n        //     interpolationDegree : 0,\n        //     interpolationAlgorithm : Cesium.HermitePolynomialApproximation\n        // });\n\n        // Get the quaternion from local heading-pitch-roll at cartographic (0.0, 0.0) to Earth's fixed frame.\n        // let center: Cesium.Cartesian3 = Cesium.Cartesian3.fromDegrees(0, 0, 0);\n        // let heading: number = 0; // this.drone.FlightController.Telemetry.Position.heading;\n        // let pitch: number = 0; // this.drone.FlightController.Telemetry.Attitude.pitch;\n        // let roll: number = 0; //this.drone.FlightController.Telemetry.Attitude.roll;\n        // let quaternion: Cesium.Quaternion = Cesium.Transforms.headingPitchRollQuaternion(center, this.currentHeading, pitch, roll);\n        \n        // Add to map entities\n        this.droneEntity = this.mapEntityCollection.entities.add({\n\n            //Use our computed positions\n            position : this.extrapolatedDronePosition,\n\n            // This callback gets the drones position\n            // position: new Cesium.CallbackProperty(() => {\n            //     return this.dronePosition;\n            // }, true),\n\n            //Automatically compute orientation based on position movement.\n            //orientation : quaternion, // new Cesium.VelocityOrientationProperty(this.extrapolatedDronePosition),\n\n            orientation: new Cesium.CallbackProperty(() => {\n                return Cesium.Transforms.headingPitchRollQuaternion(this.dronePosition, this.currentHeading, this.currentRoll, this.currentPitch);\n            }, true),\n\n            //Load the Cesium plane model to represent the entity\n            model : {\n                //uri : './node_modules/phantom4_notexture.glb',\n                uri : './node_modules/DJI_Phantom_4_G6.glb',\n                scale: 2,\n                minimumPixelSize : 64,\n                // minimumPixelSize : 128,\n                maximumScale : 100,\n                shadows: Cesium.ShadowMode.CAST_ONLY\n            }\n        });\n\n    }\n\n    startInterval(): void {\n\n        this.intervalTimer = setInterval(() => {\n\n            var time: Cesium.JulianDate = Cesium.JulianDate.now();\n\n            try {\n\n                this.extrapolatedDronePosition.addSample(time, this.dronePosition);\n\n                // Drop track crumbs\n                this.mapEntityCollection.entities.add({\n                    position : this.dronePosition,\n                    point : {\n                        pixelSize : 5,\n                        color : Cesium.Color.fromCssColorString(this.pathColor)\n                    }\n                });\n\n            } catch (error) {\n                console.log(error);\n            }\n\n        }, 1000);\n    }\n\n    flyToDroneOn3DMap(): void {\n\n        try {\n\n            // Fly to drone location and rotate down\n            this.map.camera.flyTo({\n                destination: Cesium.Cartesian3.fromDegrees(this.currentLng, this.currentLat, this.currentAGLAlt + this.homeHAE + this.defaultZoomDistance),\n                duration: 10,\n                complete: (): void => {\n                    \n                    this.map.camera.rotateDown(Cesium.Math.toRadians(-80));\n                }\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    remove(): void {\n        // Turn off telemetry\n        this.drone.FlightController.Telemetry.off('Position');\n\n        // clear intervalTimer\n        clearInterval(this.intervalTimer);\n        \n        // Remove drone from map\n        this.mapEntityCollection.entities.remove(this.droneEntity);\n\n        // TODO: Still need to remove the breadcrumbs once we have the new implementation\n    }\n}\n\nBackboneEvents.mixin(MapDrone.prototype);\n"],"sourceRoot":"/source/"}
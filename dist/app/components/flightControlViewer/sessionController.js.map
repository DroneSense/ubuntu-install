{"version":3,"sources":["components/flightControlViewer/sessionController.ts"],"names":[],"mappings":"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","file":"components/flightControlViewer/sessionController.js","sourcesContent":["import ISession from '@dronesense/core/lib/common/ISession';\nimport ServerConnection from './serverConnection';\nimport { IEventEmitter } from '@dronesense/core/lib/common/IEventEmitter';\nimport BackboneEvents from 'backbone-events-standalone';\nimport { MapMode } from './mapMode';\nimport { OwnerMapSession, MapSession } from './mapSession';\nimport { FlightControlViewerEventing } from './FlightControlViewer';\n\nexport interface ISessionControllerEvents extends IEventEmitter {\n    on(eventName: string, callback?: Function, context?: any): any;\n    on(eventName: 'locating-drone', callback?: (username: string) => void, context?: any): any;\n    on(eventName: 'drone-located', callback?: (username: string) => void, context?: any): any;\n}\n\nexport class SessionController implements ISessionControllerEvents {\n\n    // Backbone events    \n    on: (eventName: string, callback?: Function, context?: any) => any;\n    once: (events: string, callback: Function, context?: any) => any;\n    off: (eventName?: string, callback?: Function, context?: any) => any;\n    protected trigger: (eventName: string, ...args: any[]) => any;\n\n    // Map reference passed to us from the map component\n    map: Cesium.Viewer;\n\n    // The owner session bound to the UI\n    ownerSession: OwnerMapSession;\n\n    // Guest sessions Array\n    guestSession: Array<MapSession> = [];\n\n    eventing: FlightControlViewerEventing;\n\n    // Currently active session for all UI to wire up\n    activeSession: MapSession;\n\n    constructor(eventing: FlightControlViewerEventing) {\n        this.eventing = eventing;\n    }\n   \n    addOwnerSession(session: ISession, serverConnection: ServerConnection, mapMode: MapMode, allowAllGuestsWithoutPrompt: boolean, startRecording: boolean): void {\n\n        this.initializeMap(mapMode);\n\n        this.ownerSession = new OwnerMapSession();\n\n        this.map.dataSources.add(this.ownerSession.mapEntityCollection);\n\n        // TODO: make static call\n        this.ownerSession.initializeOwnerSession(this.eventing, session, serverConnection, this.map, mapMode, allowAllGuestsWithoutPrompt, startRecording).then((ownerSession: OwnerMapSession) => {\n            \n            // Set returned owner session\n            this.ownerSession = ownerSession;\n\n            // Set as tracked entity\n            this.map.trackedEntity = ownerSession.mapDrone.droneEntity;\n\n            // Fly to\n            ownerSession.mapDrone.flyToDroneOn3DMap();\n\n            this.activeSession = ownerSession;\n\n            // Start video stream if drone is connected and this is an owner session\n\n            this.eventing.trigger('session-added', this.ownerSession);\n        });\n\n    }\n\n    addGuestSession(session: ISession, serverConnection: ServerConnection, mapMode: MapMode): void {\n\n        // check if map is loaded\n         this.initializeMap(mapMode);\n\n         let mapSessionInstance: MapSession = new MapSession();\n\n         this.map.dataSources.add(mapSessionInstance.mapEntityCollection);\n\n         // TODO: Make static call on mapsession\n         mapSessionInstance.initializeSession(this.eventing, session, serverConnection, this.map, mapMode).then((mapSession: MapSession) => {\n             this.guestSession.push(mapSession);\n\n             // If we don't have an owner session then fly to the drone\n             if (!this.ownerSession) {\n\n                    // Set as the tracked entity\n                    this.map.trackedEntity = mapSession.mapDrone.droneEntity;\n\n                    // Only do fly to animation if it's the first guest session\n                    if (this.guestSession.length === 0) {\n                        mapSession.mapDrone.flyToDroneOn3DMap();\n                    }\n\n                    this.activeSession = mapSession;\n\n                    this.eventing.trigger('session-added', mapSession);\n             }\n\n            // Start video stream if drone is connected and this is an owner session\n         });\n\n    }\n\n    changeActiveSession(session: MapSession): void {\n        if (this.activeSession === session) {\n            return;\n        }\n        \n        this.activeSession = session;\n\n        this.map.trackedEntity = session.mapDrone.droneEntity;\n\n        // Start video stream if drone is connected and this is an owner session\n\n        this.eventing.trigger('session-changed', session);\n    }\n\n    removeGuestSession(session: MapSession): void {\n        \n        // first change to another session\n    //    if (this.guestSession.length > 1) {\n            \n    //     }\n\n        // There are two paths for removing guests\n        if (this.ownerSession) {\n\n        } else {\n            this.activeSession = null;\n\n            this.map.trackedEntity = null;\n\n            this.eventing.trigger('session-removed', session);\n        }\n\n        // suspend this collections events\n        session.mapEntityCollection.entities.suspendEvents();\n\n        // remove and destroy\n        this.map.dataSources.remove(session.mapEntityCollection, true);\n\n        // resumt map events\n        session.mapEntityCollection.entities.resumeEvents();\n\n        session.session.leaveSession();\n\n        this.guestSession.splice(this.guestSession.indexOf(session), 1);\n    };\n\n    // Creates map object with selected mode\n    initializeMap(mapMode: MapMode): void {\n        //'//assets.agi.com/stk-terrain/world'\n        // https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html\n\n        // Only initialize map if it doesn't exist.\n        if (this.map) {\n            return;\n        }\n\n        // By default Cesium uses the location of the Cesium.js file as the location where the rest of the files are stored. You can either set a global CESIUM_BASE_URL variable or just call Cesium.buildModuleUrl.setBaseUrl to point it at a different location.\n        Cesium.BingMapsApi.defaultKey = 'AiGfGytmoPZ6lnYVDiRzKe08ZI_kzjHTjhVrcuj3pPrpC9BmxvFP_vfGT8fB9z-T';\n\n        let sceneMode: any = mapMode === MapMode.ThreeDimensional ? Cesium.SceneMode.SCENE3D : Cesium.SceneMode.SCENE2D;\n\n        this.map = new Cesium.Viewer(document.getElementById('cesiumContainer'), {\n            terrainProvider : new Cesium.CesiumTerrainProvider({\n                url : 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0',\n                requestWaterMask : false,\n                requestVertexNormals : false\n            }),\n            // imageryProvider : new Cesium.ArcGisMapServerImageryProvider({\n            //     url : \"//services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\"\n            // }),\n            // terrainProvider : new Cesium.CesiumTerrainProvider({\n            //     url : '//assets.agi.com/stk-terrain/world',\n            //     requestWaterMask : true,\n            //     requestVertexNormals : true\n            // }),\n            // imageryProvider: new Cesium.MapboxImageryProvider({\n            //     mapId: 'digitalglobe.nmnghj3m',\n            //     // sat with streets: digitalglobe.nmnghj3m\n            //     // sat only: digitalglobe.nmmnloo2\n            //     //Get your DigitalGlobe Maps API Access Token here: http://developer.digitalglobe.com/maps-api\n            //     accessToken: 'pk.eyJ1IjoiZGlnaXRhbGdsb2JlIiwiYSI6ImNpZnB2bWUzNDZoczlzaWtxMmd2bDc3ZHQifQ.AHiF6mR5aXL0rdI4eLz2dA',\n            //     credit: 'DigitalGlobe Maps API'\n            // }),\n            // imageryProvider: new Cesium.MapboxImageryProvider({\n            //     mapId: 'chriseyhorn.3sjrlik9',\n            //     // sat with streets: digitalglobe.nmnghj3m\n            //     // sat only: digitalglobe.nmmnloo2\n            //     //Get your DigitalGlobe Maps API Access Token here: http://developer.digitalglobe.com/maps-api\n            //     accessToken: 'pk.eyJ1IjoiY2hyaXNleWhvcm4iLCJhIjoiaDFPdEM2ZyJ9.m41bT4PKxsjLH3MgC-pGCw'\n            // }),\n            baseLayerPicker: false,\n            fullscreenButton: false,\n            homeButton: false,\n            sceneModePicker: false,\n            selectionIndicator: false,\n            timeline: false,\n            animation: false,\n            geocoder: false,\n            navigationHelpButton: false,\n            infobox: false,\n            scene3DOnly: false,\n            sceneMode: sceneMode//,\n            //dataSources: this.mapDataSourceCollection\n            // shadows : true,\n            // terrainShadows : Cesium.ShadowMode.ENABLED\n        });\n\n        var options: any = {};\n\n        options.enableCompass = false;\n        options.enableZoomControls = true;\n        options.enableDistanceLegend = false;\n        this.map.extend(Cesium.viewerCesiumNavigationMixin, options);\n\n        // this.map.scene.primitives.add(new Cesium.Cesium3DTileset({\n        //     url: 'https://www.cesiumcontent.com/api/assets/3/data?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkZjgxNGRiYS0wMjc0LTQ2ZWMtYTJhNC1kMzRhYzkyNDE0YjgiLCJpZCI6NSwiYXNzZXRzIjpbM10sImlhdCI6MTQ1NzQ1ODEwOX0.-kwaVNM63oY4-rqLiZHqSedHRImPCZtkizCU50SuKwA'\n        // }));\n\n        // this.map.scene.primitives.add(new Cesium.Cesium3DTileset({\n        //     url : '../newyork/'\n        // }));\n\n        // Decreases map performance but make rendering look better at distances\n        //this.map.scene.fog.enabled = true;\n\n        // This sets night/day in the scene\n        //this.map.scene.globe.enableLighting = true;\n\n        // For debug development purposes\n        this.map.scene.debugShowFramesPerSecond = false;\n\n        // Necessary for 3D models to stay in place\n        this.map.scene.globe.depthTestAgainstTerrain = true;\n\n        // Change mapping to mouse buttons so that the right mouse button will tilt and rotate.\n        this.map.scene.screenSpaceCameraController.tiltEventTypes = [Cesium.CameraEventType.RIGHT_DRAG, Cesium.CameraEventType.PINCH, {\n            eventType : Cesium.CameraEventType.LEFT_DRAG,\n            modifier : Cesium.KeyboardEventModifier.CTRL\n        }, {\n            eventType : Cesium.CameraEventType.RIGHT_DRAG,\n            modifier : Cesium.KeyboardEventModifier.CTRL\n        }];\n\n        // Remove right mouse button from zooming on hold and move\n        this.map.scene.screenSpaceCameraController.zoomEventTypes = [Cesium.CameraEventType.WHEEL, Cesium.CameraEventType.PINCH];\n\n        // this.map.imageryLayers.addImageryProvider(new Cesium.WebMapServiceImageryProvider({\n        //        url : '//mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi?',\n        //        layers : 'nexrad-n0r',\n        //        parameters : {\n        //            transparent : 'true',\n        //            format : 'image/png'\n        //        }\n        // }));\n\n        this.eventing.trigger('map-loaded');\n    }\n\n    endSession(): void {\n        this.ownerSession.session.endSession();\n\n        \n    }\n\n}\n\nBackboneEvents.mixin(SessionController.prototype);\n"],"sourceRoot":"/source/"}
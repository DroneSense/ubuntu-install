{"version":3,"sources":["components/flightControlViewer/mapSession.ts"],"names":[],"mappings":"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","file":"components/flightControlViewer/mapSession.js","sourcesContent":["import ISession from '@dronesense/core/lib/common/ISession';\nimport IDrone from '@dronesense/core/lib/common/IDrone';\nimport ServerConnection from './serverConnection';\nimport { MapDrone } from './mapDrone';\nimport { FlightControlViewerEventing } from './flightControlViewer';\nimport { MapMode } from './mapMode';\nimport { MapWaypoints } from './mapWaypoints';\n\nexport class MapSession {\n\n    // Map reference\n    map: Cesium.Viewer;\n\n    // Server session object\n    session: ISession;\n\n    // The current drone on the map\n    mapDrone: MapDrone;\n\n    // Server connection\n    serverConnection: ServerConnection;\n\n    // The selected mode of the map\n    mapMode: MapMode = MapMode.ThreeDimensional;\n\n    // Name of current session\n    name: string;\n\n    mapWaypoints: MapWaypoints;\n\n    // Color to render map UI\n    color: string;\n\n    eventing: FlightControlViewerEventing;\n\n    id: string;\n\n    // Container for all map UI related to this session\n    mapEntityCollection: Cesium.CustomDataSource;\n\n    constructor(public $log: angular.ILogService) {\n        this.mapEntityCollection = new Cesium.CustomDataSource;\n    }\n\n    initializeSession(eventing: FlightControlViewerEventing, session: ISession, serverConnection: ServerConnection, map: Cesium.Viewer, mapMode: MapMode): Promise<MapSession> {\n\n        return new Promise<MapSession>((resolve) => {\n\n            this.map = map;\n            this.session = session;\n            this.serverConnection = serverConnection;\n            this.mapMode =  mapMode;\n            this.name = this.session.Name;\n            this.eventing = eventing;\n            this.color = this.session.Color;\n            this.id = this.session.Id;\n            \n            // WARNING BAD CODE (Robert made me do this!) - drone index 0 is hardcoded here\n            this.session.getDrones().then((drones: Array<IDrone>) => {\n            \n                this.mapDrone = new MapDrone(this.mapEntityCollection, this.$log);\n\n                // Suspend entity events while adding all waypoints to map\n                this.mapEntityCollection.entities.suspendEvents();\n\n                this.mapDrone.initializeDrone(this.eventing, drones[0], this.map, this.color, false).then((mapDrone: MapDrone) => {\n                    this.mapDrone = mapDrone;\n\n                    // Initialize waypoints for guided mode\n                    this.mapWaypoints = new MapWaypoints(this.mapDrone, this.map, this.color, this.id, this.mapEntityCollection, this.eventing, this.$log);\n\n                    // Resume entity events after added\n                    this.mapEntityCollection.entities.resumeEvents();\n\n                    resolve(this);\n                }).catch((error) => {\n                    this.$log.error({ message: 'Error initializing drone.', error: error});\n                });                \n            }).catch((error) => {\n                this.$log.error({ message: 'Error in getting drones.', error: error});\n            });\n\n        });\n\n    }\n\n    remove(): void {\n        // This will remove everyting in the collection associated with this session\n        this.mapEntityCollection.entities.removeAll();\n    }\n\n    drawFlightPath(): void {\n        try {\n            this.mapEntityCollection.entities.add({\n                name: 'Flight Path',\n                polyline: {\n                    // TODO - move to static property and manually trigger the redraw for trigger changes.\n                    positions: new Cesium.CallbackProperty( (): any => {\n\n                        //console.log('command viewer property callback');\n\n                        var degreesArray: Array<Cesium.Cartesian3> = [];\n\n                        // this.commands.forEach((command: Command): void => {\n                        //     degreesArray.push(Cesium.Cartesian3.fromDegrees((<WaypointCommand>command).Position.lng, (<WaypointCommand>command).Position.lat, (<WaypointCommand>command).AltitudeHAE));\n                        // });\n\n                        return degreesArray;\n\n                    }, false),\n                    width: 2,\n                    material: Cesium.Color.fromCssColorString(this.color)\n                }//,\n                // wall: {\n                //     positions: new Cesium.CallbackProperty( (): any => {\n\n                //         var degreesArray: Array<Cesium.Cartesian3> = [];\n\n                //         this.commands.forEach((command: Command): void => {\n                //             degreesArray.push(Cesium.Cartesian3.fromDegrees((<WaypointCommand>command).Position.lng, (<WaypointCommand>command).Position.lat, (<WaypointCommand>command).AltitudeHAE));\n                //         });\n\n                //         return degreesArray;\n\n                //     }, false) ,\n                //     material: Cesium.Color.fromBytes(10, 146, 234, 100)\n                // }\n            });\n\n        } catch (error) {\n            this.$log.error({ message: 'Error drawing flight path.', error: error});\n        }\n    }\n}\n"],"sourceRoot":"/source/"}
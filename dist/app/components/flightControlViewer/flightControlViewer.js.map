{"version":3,"sources":["components/flightControlViewer/flightControlViewer.ts"],"names":[],"mappings":"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","file":"components/flightControlViewer/flightControlViewer.js","sourcesContent":["\nimport ControlToolbar from '../controlToolbar/controlToolbar';\nimport ControlTelemetry from '../controlTelemetry/controlTelemetry';\nimport ISession from '@dronesense/core/lib/common/ISession';\nimport ControlConnect from '../controlConnect/controlConnect';\nimport StartSession from '../startSession/startSession';\nimport JoinSession from '../joinSession/joinSession';\nimport ServerConnection from './serverConnection';\nimport { SessionController } from './sessionController';\nimport { OwnerMapSession, MapSession } from './mapSession';\nimport FlightControlMode from '../flightControlMode/flightControlMode';\nimport { MapMode } from './mapMode';\nimport BackboneEvents from 'backbone-events-standalone';\nimport SessionManagementViewer from '../sessionManagementViewer/sessionManagementViewer';\nimport WaypointListViewer from '../waypointListViewer/waypointListViewer';\nimport MayLayers from '../mapLayers/mapLayers';\nimport { CesiumMapUtils } from '../../common/mapUtils';\n\nimport { IEventEmitter } from '@dronesense/core/lib/common/IEventEmitter';\n\nexport interface IFlightControlViewerEvents extends IEventEmitter {\n    on(eventName: string, callback?: Function, context?: any): any;\n    on(eventName: 'locating-drone', callback?: (username: string) => void, context?: any): any;\n    on(eventName: 'drone-located', callback?: (username: string) => void, context?: any): any;\n    on(eventName: 'guest-connect-request', callback?: (username: string, cb: (accepted: boolean) => {} ) => void, context?: any): any;\n    on(eventName: 'session-added', callback?: (session: OwnerMapSession) => void, context?: any): any;\n    on(eventName: 'session-removed', callback?: (session: MapSession) => void, context?: any): any;\n    on(eventName: 'map-loaded', callback?: () => void, context?: any): any;\n    on(eventName: 'session-changed', callback?: (session: MapSession) => void, context?: any): any;\n}\n\nexport class FlightControlViewerEventing implements IFlightControlViewerEvents {\n    \n    on: (eventName: string, callback?: Function, context?: any) => any;\n    once: (events: string, callback: Function, context?: any) => any;\n    off: (eventName?: string, callback?: Function, context?: any) => any;\n    trigger: (eventName: string, ...args: any[]) => any;\n\n    constructor() {\n\n    }\n}\n\nBackboneEvents.mixin(FlightControlViewerEventing.prototype);\n\nexport interface IFlightControlViewer extends ng.IScope {\n    map: Cesium.Viewer;\n}\n\nclass FlightControlViewer {\n    \n    // List of server that are currently connected\n    connectedServers: Array<ServerConnection> = [];\n\n    // Current server connection to use for dialogs\n    currentServerConnection: ServerConnection;\n\n    // Flag to pass to controller connect component\n    newFlightSession: boolean;\n\n    // Flag to indicate if a guest user request has been made and \n    // show the dialog\n    guestUserRequest: boolean = false;\n\n    // Username of the guest join request\n    guestUserRequestName: string;\n\n    // Session controller manages all sessions\n    sessionController: SessionController;\n\n    // eventing object for UI messages from objects\n    eventing: FlightControlViewerEventing;\n\n    // Save callback from guest request\n    guestRequestCallback: any;\n\n    // Dialog to show while drone is being locating\n    locatingDroneDialog: boolean = false;\n\n    // Flag to hide connect buttons\n    hideButtons: boolean = false;\n\n    hasLoadedMap: boolean = false;\n\n    hideBackground: boolean = false;\n\n    lockCamera: boolean = true;\n\n    firstSessionLoaded: boolean = false;\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        '$state',\n        '$mdDialog'\n    ];\n\n    constructor(\n        public bindings: IFlightControlViewer,\n        public stateService: angular.ui.IStateService,\n        public mdDialog: angular.material.MDDialogService) {\n\n    }\n\n    $onInit(): void {\n\n        this.eventing = new FlightControlViewerEventing();\n\n        this.sessionController = new SessionController(this.eventing);\n        \n        this.eventing.on('locating-drone', () => {\n            this.locatingDroneDialog = true;\n            this.bindings.$applyAsync();\n        });\n\n        this.eventing.on('drone-located', () => {\n            this.locatingDroneDialog = false;\n\n            this.firstSessionLoaded = true;\n\n            this.bindings.$applyAsync();\n        });\n\n        this.eventing.on('guest-connect-request', (username: string, cb: any) => {\n            \n            // Set call so we can call from dialog return\n            this.guestRequestCallback = cb; \n            \n            // Set username\n            this.guestUserRequestName = username;\n\n            // Show dialog\n            this.guestUserRequest = true;\n\n            // Update user interface\n            this.bindings.$applyAsync();\n        });\n\n    }\n\n    // Start new flight button clicked on main screen\n    startNewFlight(): void {\n        // Get local server connection settings\n        this.getServerSettings(true);\n    }\n\n    // Join existing flight button clicked on main screen\n    joinExistingFlight(serverConnection: ServerConnection): void {\n        // Get local server connection settings\n        this.getServerSettings(false);\n    }\n\n    // Launch the control connect dialog to get the connection\n    getServerSettings(newFlight: boolean): void {\n        \n        // set flag if this is a new session request or a join\n        this.newFlightSession = newFlight;\n\n        // Launch dialog\n        this.mdDialog.show({\n            template: '<ds-control-connect new-flight-session=\"$ctrl.newFlightSession\" connected-servers=\"$ctrl.connectedServers\" on-connect=\"$ctrl.controllerConnected(serverConnection, useExisting);\" on-cancel=\"$ctrl.cancelDialog()\"></ds-control-connect>',\n            scope: this.bindings,\n            preserveScope: true,\n            parent: angular.element(document.body),\n            clickOutsideToClose: false,\n            escapeToClose: true\n        });\n    }\n\n    // Connection has been made and passed back\n    controllerConnected(serverConnection: ServerConnection, useExisting: boolean): void {\n           \n        // Close connection dialog\n        this.mdDialog.hide();\n        \n        // Check if user is using an existing connection or a new one\n        // if (!useExisting) {\n        //     this.connectedServers.push(serverConnection);\n        // }\n\n        // Add to active connections if does not already exist.\n        if (this.connectedServers.filter((connection: ServerConnection) => {\n            if (connection.ip === serverConnection.ip && connection.port === serverConnection.port) {\n                return true;\n            } else {\n                return false;\n            }\n        }).length === 0) {\n            this.connectedServers.push(serverConnection);\n        };\n        \n        // check if this is a new flight or join exisitng session\n        if (this.newFlightSession) {\n            this.getNewSession(serverConnection);\n        } else {\n            this.joinExistingSession(serverConnection);\n        }\n        \n    }\n\n    // Launch start new flight dialog and get the session object back\n    getNewSession(serverConnection: ServerConnection): void {\n\n        // Necessary for component consumption\n        this.currentServerConnection = serverConnection;\n\n        this.mdDialog.show({\n            template: '<ds-start-session server-connection=\"$ctrl.currentServerConnection\" on-start=\"$ctrl.ownerSessionCreated(session, allowAllGuests);\" on-cancel=\"$ctrl.cancelDialog()\"></ds-control-connect>',\n            scope: this.bindings,\n            preserveScope: true,\n            parent: angular.element(document.body),\n            clickOutsideToClose: false,\n            escapeToClose: true\n        });\n    }\n\n    // Launch start new flight dialog and get the session object back\n    joinExistingSession(serverConnection: ServerConnection): void {\n\n        // Necessary for component consumption\n        this.currentServerConnection = serverConnection;\n\n        this.mdDialog.show({\n            template: '<ds-join-session server-connection=\"$ctrl.currentServerConnection\" session-controller=\"$ctrl.sessionController\" on-join=\"$ctrl.guestSessionJoined(session);\" on-cancel=\"$ctrl.cancelDialog()\"></ds-control-connect>',\n            scope: this.bindings,\n            preserveScope: true,\n            parent: angular.element(document.body),\n            clickOutsideToClose: false,\n            escapeToClose: true\n        });\n    }\n\n    // Add to list of guest sessions\n    guestSessionJoined(session: ISession): void {\n        \n        // Close dialog\n        this.mdDialog.hide();\n\n        // Hide bg image\n        this.hideBackground = true;\n\n        // Remove buttons after session returns\n        this.hideButtons = true;\n\n        // Pass to session controller as guest\n        this.sessionController.addGuestSession(session, this.currentServerConnection, MapMode.ThreeDimensional);\n\n    }\n\n    // Call back from start new flight dialog that returns a session\n    ownerSessionCreated(session: ISession, allowAllGuests: boolean): void {\n\n        // Close dialog\n        this.mdDialog.hide();\n\n        // Hide background image\n        this.hideBackground = true;\n\n        // Remove buttons after session returns\n        this.hideButtons = true;\n\n        this.sessionController.addOwnerSession(session, this.currentServerConnection, MapMode.ThreeDimensional, allowAllGuests);\n    }\n\n    // Return true if user accepts\n    acceptGuestRequest(): void {\n        this.guestRequestCallback(true);\n        \n        // Hide dialog\n        this.guestUserRequest = false;\n    }\n\n    // Return false if user rejects\n    denyGuestRequest(): void {\n        this.guestRequestCallback(false);\n\n        // Hide dialog\n        this.guestUserRequest = false;\n    }\n    \n    // Close dialog\n    cancelDialog(): void {\n        this.mdDialog.hide();\n    }\n\n    toggleLockCamera(): void {\n        if (this.lockCamera) {\n            this.sessionController.map.trackedEntity = this.sessionController.activeSession.mapDrone.droneEntity;\n        } else {\n            this.sessionController.map.trackedEntity = null;\n        }\n    }\n\n    zoomIn(): void {\n        this.sessionController.map.cesiumNavigation.navigationViewModel.controls[0].activate();\n    }\n\n    zoomOut(): void {\n        this.sessionController.map.cesiumNavigation.navigationViewModel.controls[2].activate();\n    }\n\n    lookDownBoundingBox(): void {\n        this.sessionController.map.flyTo(this.sessionController.activeSession.mapEntityCollection);\n        this.lockCamera = false;\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.FlightControlViewer', [\n    ControlToolbar.name,\n    ControlConnect.name,\n    JoinSession.name,\n    StartSession.name,\n    ControlTelemetry.name,\n    FlightControlMode.name,\n    SessionManagementViewer.name,\n    WaypointListViewer.name,\n    MayLayers.name\n]).component('dsFlightControlViewer', {\n    bindings: {\n\n    },\n    controller: FlightControlViewer,\n    templateUrl: './app/components/flightControlViewer/flightControlViewer.html'\n});\n"],"sourceRoot":"/source/"}
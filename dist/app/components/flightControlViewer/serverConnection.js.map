{"version":3,"sources":["components/flightControlViewer/serverConnection.ts"],"names":[],"mappings":";;;;;;;YAGA;gBAwBI,0BAAmB,EAAU,EAAS,IAAY,EAAS,YAA2B;oBAxB1F,iBAuDC;oBA/BsB,OAAE,GAAF,EAAE,CAAQ;oBAAS,SAAI,GAAJ,IAAI,CAAQ;oBAAS,iBAAY,GAAZ,YAAY,CAAe;oBAElF,gCAAgC;oBAChC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,WAAW,EAAE;wBAC9B,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBAC5B,CAAC,CAAC,CAAC;oBAEH,6BAA6B;oBAC7B,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,cAAc,EAAE;wBACjC,KAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC;4BACnB,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;4BACzB,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,qBAAqB,EAAE,KAAI,CAAC,CAAC;wBACvD,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,eAAe,EAAE,UAAC,KAAU;wBAC7C,KAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;oBACrC,CAAC,CAAC,CAAC;gBACP,CAAC;gBArCD,sBAAI,kCAAI;oBAHR,4BAA4B;oBAC5B,eAAe;yBAEf;wBACI,gEAAgE;wBAEhE,gCAAgC;wBAChC,qCAAqC;wBACrC,WAAW;wBACP,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;wBACjD,GAAG;oBACP,CAAC;;;mBAAA;gBA+BD,kBAAkB;gBAClB,qCAAU,GAAV;oBAAA,iBAQC;oBANO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC;wBACvC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;wBACnC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;wBACtC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAE/C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAEL,uBAAC;YAAD,CAvDA,AAuDC,IAAA;YAvDD,sCAuDC,CAAA","file":"components/flightControlViewer/serverConnection.js","sourcesContent":["import IDroneService from '@dronesense/core/lib/common/IDroneSenseService';\nimport { FlightControlViewerEventing } from './FlightControlViewer';\n\nexport default class ServerConnection {\n\n    // Server name if it has one\n    //name: string;\n\n    get name(): string {\n        // TODO: uncomment once name has been added to the drone service\n        \n        // if (this.droneService.Name) {\n        //     return this.droneService.Name;\n        // } else {\n            return 'http://' + this.ip + ':' + this.port;\n        //}\n    }\n\n    // flag to indicate if the server is connected\n    isConnected: boolean;\n\n    // Last connection error string\n    lastConnectionError: string;\n\n    // Eventing access from flightControlViewer\n    eventing: FlightControlViewerEventing;\n\n    constructor(public ip: string, public port: number, public droneService: IDroneService) {\n\n        // wire up the connection events\n        this.droneService.on('connected', () => {\n            this.isConnected = true;\n        });\n\n        // wire up disconnected event\n        this.droneService.on('disconnected', () => {\n            this.disconnect().then(() => {\n                this.isConnected = false;\n                this.eventing.trigger('server-disconnected', this);\n            });\n        });\n\n        this.droneService.on('connect-error', (error: any) => {\n            this.lastConnectionError = error;\n        });\n    }\n\n    // disconnect call\n    disconnect(): Promise<void> {\n        \n            return this.droneService.disconnect().then(() => {\n                this.droneService.off('connected');\n                this.droneService.off('disconnected');\n                this.droneService.off('connect-error');\n\n        });\n    }\n\n}\n"],"sourceRoot":"/source/"}
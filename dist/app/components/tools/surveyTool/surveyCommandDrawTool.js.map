{"version":3,"sources":["components/tools/surveyTool/surveyCommandDrawTool.ts"],"names":[],"mappings":"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","file":"components/tools/surveyTool/surveyCommandDrawTool.js","sourcesContent":["import { IDrawTool } from '../IDrawTool';\nimport { Conversions } from '@dronesense/model/lib/common/Utility';\n\nexport class SurveyCommandDrawTool implements IDrawTool {\n\n    map: Cesium.Viewer;\n\n    IconPath: string = './app/components/tools/surveyTool/images/survey.svg';\n    ToolTip: string = 'Add Survey';\n    Selected: boolean;\n\n    // Editing handler reference\n    editingHandler: Cesium.ScreenSpaceEventHandler;\n\n    constructor(viwer: Cesium.Viewer, public callback: Function) {\n        this.map = viwer;\n\n    }\n\n\n    imageAreaPolygon: Array<Cesium.Cartesian3>;\n\n    start2DEditMode(): void {\n\n        this.Selected = true;\n\n        this.editingHandler = new Cesium.ScreenSpaceEventHandler(this.map.canvas);\n\n        // Turn on editing and wire up event listening\n        var dragging: any;\n\n        // Initialize point array\n        this.imageAreaPolygon = [];\n\n        //var sensor = this.map.scene.primitives.add(new Cesium.RectangularSensor({\n        //    modelMatrix : Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.25795736, 32.45836936)),\n        //    radius : 1000000.0,\n        //    xHalfAngle : Cesium.Math.toRadians(25.0),\n        //    yHalfAngle : Cesium.Math.toRadians(40.0)\n        //}));\n        //\n        //this.map.scene.primitives.add(new Cesium.RectangularSensor({\n        //    modelMatrix : Cesium.Transforms.northEastDownToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.25795736, 32.45836936, 900000.0)),\n        //    radius : 1000000.0,\n        //    xHalfAngle : Cesium.Math.toRadians(25.0),\n        //    yHalfAngle : Cesium.Math.toRadians(40.0),\n        //    lateralSurfaceMaterial : Cesium.Material.fromType(Cesium.Material.StripeType),\n        //    intersectionColor :  Cesium.Color.YELLOW\n        //}));\n\n        //var rectangularPyramidSensor = new CesiumSensors.RectangularPyramidSensorVolume();\n        //\n        ////rectangularPyramidSensor.modelMatrix = Cesium.Transforms.northEastDownToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.2573716, 32.45647648, 802.82));\n        //\n        //rectangularPyramidSensor.modelMatrix = Cesium.Transforms.headingPitchRollToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.2573716, 32.45647648, 802.82), 0.785398, -3.14159, 0);\n        //\n        //rectangularPyramidSensor.radius = 200.0;\n        //rectangularPyramidSensor.xHalfAngle = Cesium.Math.toRadians(25.0);\n        //rectangularPyramidSensor.yHalfAngle = Cesium.Math.toRadians(40.0);\n        //\n        //rectangularPyramidSensor.lateralSurfaceMaterial = Cesium.Material.fromType('Color');\n        //rectangularPyramidSensor.lateralSurfaceMaterial.uniforms.color = new Cesium.Color(0.0, 1.0, 1.0, 0.5);\n        //this.map.scene.primitives.add(rectangularPyramidSensor);\n\n        //this.map.camera.lookAtTransform(Cesium.Transforms.headingPitchRollToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.2573716, 32.45647648, 802.82), 0.785398, -3.14159, 0));\n\n        // Change map to 2D\n\n\n        this.map.entities.add({\n            name: 'ROI',\n            polyline: {\n                // TODO - move to static property and manually trigger the redraw for trigger changes.\n                positions: new Cesium.CallbackProperty( (): any => {\n\n                    return this.imageAreaPolygon;\n\n                }, false),\n                width: 3,\n                material: Cesium.Color.fromCssColorString( '#0a92ea' )\n            },\n            //polygon : {\n            //    hierarchy : new Cesium.CallbackProperty( (): any => {\n            //\n            //        return this.imageAreaPolygon;\n            //\n            //    }, false) ,\n            //    material : Cesium.Color.fromBytes(10, 146, 234, 100),\n            //    perPositionHeight: true\n            //}\n        });\n\n\n        // Wire up handler to listen for left mouse down event\n        this.editingHandler.setInputAction((click: any): void => {\n\n            // Get mouse click position from ray\n            var ray: any = this.map.camera.getPickRay(click.position);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n\n            // Make sure the position is defined\n            if (Cesium.defined(position)) {\n\n                // Make the height of the position = 0 so it works with groundPrimitive\n                var positionCartographic: Cesium.Cartographic = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n                positionCartographic.height = 0;\n                //position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n                //this.imageAreaPolygon.push(position);\n\n                // Setup terrain provider\n                var terrainProvider: any = new Cesium.CesiumTerrainProvider({\n                    url: 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0'\n                });\n\n                // Create positions object for terrain query\n                var positions: Array<Cesium.Cartographic> = [\n                    positionCartographic\n                ];\n\n                var longitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.longitude), 8);\n                var latitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.latitude), 8);\n\n                // Call async sampleTerrain TODO - This will fail if we don't have the terrain tile either from the server or in cache\n                // TODO - Move this to common function\n                Cesium.sampleTerrain(terrainProvider, 15, positions).then((updatedPositions: any): void => {\n\n                    position.z = updatedPositions[0].height + 20;\n\n                    //this.imageAreaPolygon.push(this.map.scene.globe.ellipsoid.cartographicToCartesian(position));\n\n                    this.create3DModel('/components/cesiumMap/models/wt6.glb', longitude, latitude, updatedPositions[0].height); //727.64);\n\n                    this.StopEdit();\n                });\n\n            }\n\n\n        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n\n        // Wire up handler for each mouse move while entity is being dragged\n        this.editingHandler.setInputAction((movement: any): void => {\n\n            // Return immediately if we are not dragging anything\n            if (!dragging) {\n                return;\n            }\n\n            // Use ray pick to get position and convert\n            var ray: any = this.map.camera.getPickRay(movement.endPosition);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n\n\n\n            // Check to see if the position is defined\n            if (!Cesium.defined(position) || !dragging) {\n                return;\n            }\n\n            var positionCartographic: any = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n            positionCartographic.height = 0;\n            position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n\n\n            var cartographic: Cesium.Cartographic = Cesium.Cartographic.fromCartesian(position);\n            var longitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(cartographic.longitude), 8);\n            var latitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(cartographic.latitude), 8);\n\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n    }\n\n    create3DModel(url: string, lng: number, lat: number, height: number): void {\n                //this.cesiumViewer.entities.removeAll();\n\n        var position: Cesium.Cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat, height);\n        var heading: number = Cesium.Math.toRadians(180);\n        var pitch: number = 0;\n        var roll: number = 0;\n        var orientation: Cesium.Quaternion = Cesium.Transforms.headingPitchRollQuaternion(position, heading, pitch, roll);\n\n        var entity: Cesium.Entity = this.map.entities.add({\n                    name: 'Wind Turbine',\n                    position: position,\n                    orientation: orientation,\n                    model: {\n                        uri: url,\n                        minimumPixelSize: 128,\n                        maximumScale: 1\n                    }\n        });\n                //this.cesiumViewer.trackedEntity = entity;\n    }\n\n    drawROI(): void {\n\n        this.Selected = true;\n\n        this.editingHandler = new Cesium.ScreenSpaceEventHandler(this.map.canvas);\n\n        // Initialize point array\n        this.imageAreaPolygon = [];\n\n        // Turn on editing and wire up event listening\n        var dragging: any;\n\n        var polygon: Cesium.PolygonGeometry = new Cesium.PolygonGeometry({\n            polygonHierarchy : {\n                positions: new Cesium.CallbackProperty( (): any => {\n\n                    return this.imageAreaPolygon;\n\n                }, false) ,\n            }\n        });\n\n        //var posit = [new Cesium.Cartesian3(-959393.0775141245, -5301033.054066102, 3403115.286963818),\n        //        new Cesium.Cartesian3(-959343.4262988903, -5301104.839393535, 3403115.286963818)];\n\n        this.imageAreaPolygon.push(new Cesium.Cartesian3(-959393.0775141245, -5301033.054066102, 3403115.286963818));\n        this.imageAreaPolygon.push(new Cesium.Cartesian3(-959343.4262988903, -5301104.839393535, 3403115.286963818));\n\n        //console.log(posit);\n\n        var corridor: Cesium.CorridorGeometry = new Cesium.CorridorGeometry({\n            positions : this.imageAreaPolygon,\n            width : 5,\n            id: 'foo'\n        });\n\n        var prim = new Cesium.GroundPrimitive({\n            geometryInstances : new Cesium.GeometryInstance({\n                geometry : corridor,\n                attributes: {\n                    color: Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.fromBytes(10, 146, 234, 100))\n                },\n                id : 'ROI',\n                releaseGeometryInstances: false,\n                readonlyvertexCacheOptimize: false\n            })\n        });\n\n        this.map.scene.groundPrimitives.add(prim);\n\n        // Wire up handler to listen for left mouse down event\n        this.editingHandler.setInputAction((click: any): void => {\n\n            // Get mouse click position from ray\n            var ray: any = this.map.camera.getPickRay(click.position);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n\n            console.log('Initial position: ' + position);\n\n            // Make sure the position is defined\n            if (Cesium.defined(position)) {\n\n                // Make the height of the position = 0 so it works with groundPrimitive\n                var positionCartographic: Cesium.Cartographic = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n                positionCartographic.height = 0;\n                position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n                console.log('Second position: ' + position);\n\n                this.imageAreaPolygon.push(position);\n\n                //console.log(prim.getGeometryInstanceAttributes('ROI'));\n\n                // Create a circle.\n                var circle: Cesium.CircleGeometry = new Cesium.CircleGeometry({\n                    center : position,\n                    radius : 1\n                });\n                var cgeometry: Cesium.Geometry = Cesium.CircleGeometry.createGeometry(circle);\n\n                //// 1. create a polygon from points\n                //var polygon: Cesium.PolygonGeometry = new Cesium.PolygonGeometry({\n                //    polygonHierarchy : {\n                //        positions : Cesium.Cartesian3.fromDegreesArray([\n                //            -72.0, 40.0,\n                //            -70.0, 35.0,\n                //            -75.0, 30.0,\n                //            -70.0, 30.0,\n                //            -68.0, 40.0\n                //        ])\n                //    }\n                //});\n                //var geometry: Cesium.Geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n                //\n                //var polygonInstance = new Cesium.GeometryInstance({\n                //    geometry : new Cesium.RectangleGeometry({\n                //        rectangle : Cesium.Rectangle.fromDegrees(-140.0, 30.0, -100.0, 40.0)\n                //    }),\n                //    id : 'rectangle',\n                //    attributes : {\n                //        color : new Cesium.ColorGeometryInstanceAttribute(0.0, 1.0, 1.0, 0.5)\n                //    }\n                //});\n                //\n                //\n                //\n\n                //var circleInstance: Cesium.GeometryInstance = new Cesium.GeometryInstance({\n                //    geometry: cgeometry,\n                //    id: 'circle',\n                //        attributes : {\n                //            color : new Cesium.ColorGeometryInstanceAttribute(0.0, 1.0, 1.0, 0.5)\n                //        }\n                //});\n                //\n                //this.map.scene.groundPrimitives.add(new Cesium.GroundPrimitive({\n                //    geometryInstances : circleInstance\n                //}));\n\n\n                this.map.scene.groundPrimitives.add(new Cesium.GroundPrimitive({\n                    geometryInstances : new Cesium.GeometryInstance({\n                        geometry : circle,\n                        attributes: {\n                            color: Cesium.ColorGeometryInstanceAttribute.fromColor(Cesium.Color.RED)\n                        },\n                        id : 'polygon 2'\n                    })\n                }));\n            }\n\n\n        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n\n        // Wire up handler for each mouse move while entity is being dragged\n        this.editingHandler.setInputAction((movement: any): void => {\n\n            // Return immediately if we are not dragging anything\n            //if (!dragging) {\n            //    return;\n            //}\n\n            // Use ray pick to get position and convert\n            var ray: any = this.map.camera.getPickRay(movement.endPosition);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n\n\n\n            // Check to see if the position is defined\n            if (!Cesium.defined(position) || !dragging) {\n                return;\n            }\n\n            var positionCartographic: any = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n            positionCartographic.height = 0;\n            position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n\n\n            var cartographic: Cesium.Cartographic = Cesium.Cartographic.fromCartesian(position);\n            var longitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(cartographic.longitude), 8);\n            var latitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(cartographic.latitude), 8);\n\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n\n    }\n\n    StartEdit(): void {\n\n        // Check if tool is already turned on if so turn off\n        if (this.Selected) {\n            this.StopEdit();\n            return;\n        }\n\n        this.start2DEditMode();\n\n        //this.Selected = true;\n        //\n        //// wire up left mouse click event\n        //this._mouseHandler = new Cesium.ScreenSpaceEventHandler(this.map.canvas, false);\n        //\n        //this._mouseHandler.setInputAction((click: any) => {\n        //        var ray: any = this.map.camera.getPickRay(click.position);\n        //        var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n        //\n        //        if (Cesium.defined(position)) {\n        //            // Make the height of the position = 0 so it works with groundPrimitive\n        //            var positionCartographic: Cesium.Cartographic = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n        //            positionCartographic.height = 0;\n        //            position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n        //\n        //            var cartographic: Cesium.Cartographic = Cesium.Cartographic.fromCartesian(position);\n        //            var longitudeString: number = DS.Utility.formatCoordinate(Cesium.Math.toDegrees(cartographic.longitude), 8);\n        //            var latitudeString: number = DS.Utility.formatCoordinate(Cesium.Math.toDegrees(cartographic.latitude), 8);\n        //\n        //            var terrainProvider: any = new Cesium.CesiumTerrainProvider({\n        //                url: 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0'\n        //            });\n        //            var positions: Array<Cesium.Cartographic> = [\n        //                Cesium.Cartographic.fromDegrees(longitudeString, latitudeString)\n        //            ];\n        //\n        //            // Get terrain height at click location before adding takeoff point\n        //            Cesium.sampleTerrain(terrainProvider, 15, positions).then((updatedPositions: any): void => {\n        //\n        //                var waypointCommand: Object = {\n        //                    Position: new DroneSense.Web.GeoPoint(latitudeString, longitudeString),\n        //                    Altitude: 50,\n        //                    GroundElevationMSL: updatedPositions[0].height,\n        //                    GroundElevationHAE: updatedPositions[0].height,\n        //                    AltitudeMSL: updatedPositions[0].height + 50,\n        //                    AltitudeHAE: updatedPositions[0].height + 50,\n        //                    FlightSpeed: 5,\n        //                    Name: 'Survey',\n        //                    Type: 'Survey',\n        //                    Expanded: true\n        //                };\n        //\n        //                this.callback(waypointCommand);\n        //            });\n        //\n        //            this.StopEdit();\n        //        }\n        //    },\n        //    Cesium.ScreenSpaceEventType.LEFT_CLICK\n        //);\n    }\n\n    StopEdit(): void {\n\n        this.editingHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        this.editingHandler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n\n        this.Selected = false;\n    }\n}\n"],"sourceRoot":"/source/"}
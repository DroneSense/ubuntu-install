{"version":3,"sources":["components/tools/sensorCaptureTool/sensorCaptureDrawTool.ts"],"names":[],"mappings":"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","file":"components/tools/sensorCaptureTool/sensorCaptureDrawTool.js","sourcesContent":["import { IDrawTool } from '../IDrawTool';\n\nimport { Camera, GeoPoint, FlightPlan } from '@dronesense/model';\nimport { Conversions } from '@dronesense/model/lib/common/Utility';\n\nexport class SensorCaptureTool implements IDrawTool {\n\n    IconPath: string = './app/components/tools/sensorCaptureTool/images/sensorCapture.svg';\n    ToolTip: string = 'Add Sensor Capture Location';\n    Selected: boolean;\n\n    // Editing handler reference\n    _mouseHandler: Cesium.ScreenSpaceEventHandler;\n\n    constructor(public map: Cesium.Viewer, public callback: Function, public flightPlan: FlightPlan) {\n\n    }\n\n    sensor: Cesium.RectangularSensor;\n\n    UpdateSensor(lng: number, lat: number, alt: number): void {\n\n        if (!this.flightPlan.Camera) {\n            return;\n        }\n\n        // check to see if exists on map\n        if (this.map.scene.primitives.contains(this.sensor)) {\n            this.map.scene.primitives.remove(this.sensor);\n        }\n\n        this.sensor = new Cesium.RectangularSensor();\n\n        this.sensor.modelMatrix = Cesium.Transforms.headingPitchRollToFixedFrame(Cesium.Cartesian3.fromDegrees(lng, lat, alt), 0, -3.14159, 0);\n\n        // Figure out this calculation\n        this.sensor.radius = 10000;\n        this.sensor.xHalfAngle = this.flightPlan.Camera.getHalfAngleX();\n        this.sensor.yHalfAngle = this.flightPlan.Camera.getHalfAngleY();\n        this.sensor.showIntersection = true;\n\n\n        // var material = new Cesium.GridMaterialProperty({\n        //     color : Cesium.Color.WHITE,\n        //     cellAlpha : 0.1,\n        //     lineCount : new Cesium.Cartesian2(8, 8),\n        //     lineThickness: new Cesium.Cartesian2(1.0, 1.0),\n        //     lineOffset: new Cesium.Cartesian2(0.0, 0.0)\n        // });\n\n        //var material: Cesium.GridMaterialProperty = new Cesium.GridMaterialProperty();\n\n        //this.sensor.lateralSurfaceMaterial = material;\n\n        this.sensor.lateralSurfaceMaterial = Cesium.Material.fromType('Grid');\n        this.sensor.lateralSurfaceMaterial.color = new Cesium.Color(0.0, 1.0, 1.0, 0.7);\n        //this.sensor.lateralSurfaceMaterial.uniforms.color = new Cesium.Color(0.0, 1.0, 1.0, 0.5);\n        this.map.scene.primitives.add(this.sensor);\n    }\n\n    dragging: boolean = false;\n\n    StartEdit(): void {\n        if (this.Selected) {\n            this.StopEdit();\n            return;\n        }\n\n        this.Selected = true;\n\n        this.dragging = true;\n\n        // wire up left mouse click event\n        this._mouseHandler = new Cesium.ScreenSpaceEventHandler(this.map.canvas, false);\n\n        this._mouseHandler.setInputAction((click: any) => {\n                var ray: any = this.map.camera.getPickRay(click.position);\n                var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n                console.log(position);\n                if (Cesium.defined(position)) {\n                    // Make the height of the position = 0 so it works with groundPrimitive\n                    var positionCartographic: Cesium.Cartographic = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n                    positionCartographic.height = 0;\n                    //position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n                    //var cartographic: Cesium.Cartographic = Cesium.Cartographic.fromCartesian(position);\n                    var longitudeString: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.longitude), 8);\n                    var latitudeString: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.latitude), 8);\n\n                    var terrainProvider: any = new Cesium.CesiumTerrainProvider({\n                        url: 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0'\n                    });\n                    var positions: Array<Cesium.Cartographic> = [\n                        Cesium.Cartographic.fromDegrees(longitudeString, latitudeString)\n                    ];\n\n                    // Get terrain height at click location before adding takeoff point\n                    Cesium.sampleTerrain(terrainProvider, 15, positions).then((updatedPositions: any): void => {\n\n                        var surveyCaptureCommand: Object = {\n                            Position: new GeoPoint(latitudeString, longitudeString),\n                            Altitude: 50,\n                            GroundElevationMSL: updatedPositions[0].height,\n                            GroundElevationHAE: updatedPositions[0].height,\n                            AltitudeMSL: updatedPositions[0].height + 50,\n                            AltitudeHAE: updatedPositions[0].height + 50,\n                            FlightSpeed: 5,\n                            Name: 'Sensor Capture Point',\n                            Type: 'sensor',\n                            Expanded: true,\n                            Heading: 0,\n                            Pitch: -180,\n                            Roll: 0\n                        };\n\n                        this.callback(surveyCaptureCommand);\n                    });\n\n                    // check to see if exists on map\n                    if (this.map.scene.primitives.contains(this.sensor)) {\n                        this.map.scene.primitives.remove(this.sensor);\n                    }\n\n                    this.StopEdit();\n                }\n            }, Cesium.ScreenSpaceEventType.LEFT_CLICK\n        );\n\n        // Wire up handler for each mouse move while entity is being dragged\n        this._mouseHandler.setInputAction( (movement: any): void => {\n\n            console.log(this.dragging);\n\n            // Return immediately if we are not dragging anything\n            if (!this.dragging) {\n                return;\n            }\n\n            // Use ray pick to get position and convert\n            var ray: any = this.map.camera.getPickRay(movement.endPosition);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n\n            // Check to see if the position is defined\n            if (!Cesium.defined(position) || !this.dragging) {\n                return;\n            }\n\n            var positionCartographic: any = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n            positionCartographic.height = 0;\n            //position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n            //var cartographic: Cesium.Cartographic = Cesium.Cartographic.fromCartesian(position);\n            var longitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.longitude), 8);\n            var latitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.latitude), 8);\n\n            this.UpdateSensor(longitude, latitude, 200);\n\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n    }\n\n    StopEdit(): void {\n        this._mouseHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        this._mouseHandler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n        this.Selected = false;\n    }\n}\n"],"sourceRoot":"/source/"}
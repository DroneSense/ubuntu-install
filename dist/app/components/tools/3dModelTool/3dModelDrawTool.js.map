{"version":3,"sources":["components/tools/3dModelTool/3dModelDrawTool.ts"],"names":[],"mappings":"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","file":"components/tools/3dModelTool/3dModelDrawTool.js","sourcesContent":["import { IDrawTool } from '../IDrawTool';\nimport { Conversions } from '@dronesense/model/lib/common/Utility';\n\nexport class Model3DDrawTool implements IDrawTool {\n\n    IconPath: string = './app/components/tools/3dModelTool/images/3dObject.svg';\n    ToolTip: string = 'Add 3D Model';\n    Selected: boolean;\n\n    // Editing handler reference\n    editingHandler: Cesium.ScreenSpaceEventHandler;\n\n    constructor(public map: Cesium.Viewer, public callback: Function) {\n\n    }\n\n    StartEdit(): void {\n\n        if (this.Selected) {\n            this.StopEdit();\n            return;\n        }\n\n        this.start2DEditMode();\n    }\n\n    start2DEditMode(): void {\n\n        this.Selected = true;\n\n        this.editingHandler = new Cesium.ScreenSpaceEventHandler(this.map.canvas);\n\n        // Turn on editing and wire up event listening\n        var dragging: any;\n\n        // Initialize point array\n        //this.imageAreaPolygon = [];\n\n        //var sensor = this.map.scene.primitives.add(new Cesium.RectangularSensor({\n        //    modelMatrix : Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.25795736, 32.45836936)),\n        //    radius : 1000000.0,\n        //    xHalfAngle : Cesium.Math.toRadians(25.0),\n        //    yHalfAngle : Cesium.Math.toRadians(40.0)\n        //}));\n        //\n        //this.map.scene.primitives.add(new Cesium.RectangularSensor({\n        //    modelMatrix : Cesium.Transforms.northEastDownToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.25795736, 32.45836936, 900000.0)),\n        //    radius : 1000000.0,\n        //    xHalfAngle : Cesium.Math.toRadians(25.0),\n        //    yHalfAngle : Cesium.Math.toRadians(40.0),\n        //    lateralSurfaceMaterial : Cesium.Material.fromType(Cesium.Material.StripeType),\n        //    intersectionColor :  Cesium.Color.YELLOW\n        //}));\n\n        //var rectangularPyramidSensor = new CesiumSensors.RectangularPyramidSensorVolume();\n        //\n        ////rectangularPyramidSensor.modelMatrix = Cesium.Transforms.northEastDownToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.2573716, 32.45647648, 802.82));\n        //\n        //rectangularPyramidSensor.modelMatrix = Cesium.Transforms.headingPitchRollToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.2573716, 32.45647648, 802.82), 0.785398, -3.14159, 0);\n        //\n        //rectangularPyramidSensor.radius = 200.0;\n        //rectangularPyramidSensor.xHalfAngle = Cesium.Math.toRadians(25.0);\n        //rectangularPyramidSensor.yHalfAngle = Cesium.Math.toRadians(40.0);\n        //\n        //rectangularPyramidSensor.lateralSurfaceMaterial = Cesium.Material.fromType('Color');\n        //rectangularPyramidSensor.lateralSurfaceMaterial.uniforms.color = new Cesium.Color(0.0, 1.0, 1.0, 0.5);\n        //this.map.scene.primitives.add(rectangularPyramidSensor);\n\n        //this.map.camera.lookAtTransform(Cesium.Transforms.headingPitchRollToFixedFrame(Cesium.Cartesian3.fromDegrees(-100.2573716, 32.45647648, 802.82), 0.785398, -3.14159, 0));\n\n        // Change map to 2D\n\n\n        this.map.entities.add({\n            // name: 'ROI',\n            // polyline: {\n            //     // TODO - move to static property and manually trigger the redraw for trigger changes.\n            //     positions: new Cesium.CallbackProperty( (): any => {\n\n            //         return this.imageAreaPolygon;\n\n            //     }, false),\n            //     width: 3,\n            //     material: Cesium.Color.fromCssColorString( '#0a92ea' )\n            // },\n            //polygon : {\n            //    hierarchy : new Cesium.CallbackProperty( (): any => {\n            //\n            //        return this.imageAreaPolygon;\n            //\n            //    }, false) ,\n            //    material : Cesium.Color.fromBytes(10, 146, 234, 100),\n            //    perPositionHeight: true\n            //}\n        });\n\n\n        // Wire up handler to listen for left mouse down event\n        this.editingHandler.setInputAction((click: any): void => {\n\n            // Get mouse click position from ray\n            var ray: any = this.map.camera.getPickRay(click.position);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n\n            // Make sure the position is defined\n            if (Cesium.defined(position)) {\n\n                // Make the height of the position = 0 so it works with groundPrimitive\n                var positionCartographic: Cesium.Cartographic = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n                positionCartographic.height = 0;\n                //position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n                //this.imageAreaPolygon.push(position);\n\n                // Setup terrain provider\n                var terrainProvider: any = new Cesium.CesiumTerrainProvider({\n                    url: 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0'\n                });\n\n                // Create positions object for terrain query\n                var positions: Array<Cesium.Cartographic> = [\n                    positionCartographic\n                ];\n\n                var longitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.longitude), 8);\n                var latitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(positionCartographic.latitude), 8);\n\n                // Call async sampleTerrain TODO - This will fail if we don't have the terrain tile either from the server or in cache\n                // TODO - Move this to common function\n                Cesium.sampleTerrain(terrainProvider, 15, positions).then((updatedPositions: any): void => {\n\n                    position.z = updatedPositions[0].height + 20;\n\n                    //this.imageAreaPolygon.push(this.map.scene.globe.ellipsoid.cartographicToCartesian(position));\n\n                    this.create3DModel('../../../models/cell.glb', longitude, latitude, updatedPositions[0].height); //727.64);\n\n                });\n\n                //this.StopEdit();\n\n            }\n\n\n        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n\n        // Wire up handler for each mouse move while entity is being dragged\n        this.editingHandler.setInputAction((movement: any): void => {\n\n            // Return immediately if we are not dragging anything\n            //if (!dragging) {\n            //    return;\n            //}\n\n            // Use ray pick to get position and convert\n            var ray: any = this.map.camera.getPickRay(movement.endPosition);\n            var position: any = this.map.scene.globe.pick(ray, this.map.scene);\n            var object: any = this.map.scene.pick(movement.endPosition);\n\n            if (object && object.node) {\n                console.log(object);\n            }\n\n\n            // Check to see if the position is defined\n            if (!Cesium.defined(position) || !dragging) {\n                return;\n            }\n\n            var positionCartographic: any = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n            positionCartographic.height = 0;\n            position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n\n\n            //var cartographic: Cesium.Cartographic = Cesium.Cartographic.fromCartesian(position);\n            //var longitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(cartographic.longitude), 8);\n            //var latitude: number = Conversions.formatCoordinate(Cesium.Math.toDegrees(cartographic.latitude), 8);\n\n        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n    }\n\n    StopEdit(): void {\n        this.editingHandler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);\n        this.editingHandler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n\n        this.Selected = false;\n    }\n\n    create3DModel(url: string, lng: number, lat: number, height: number): void {\n                //this.cesiumViewer.entities.removeAll();\n\n        // var position: Cesium.Cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat, height);\n        // var heading: number = Cesium.Math.toRadians(180);\n        // var pitch: number = 0;\n        // var roll: number = 0;\n        // var orientation: number = Cesium.Transforms.headingPitchRollQuaternion(position, heading, pitch, roll);\n\n        // var entity: any = this.map.entities.add({\n        //             name: 'Wind Turbine',\n        //             position: position,\n        //             orientation: orientation,\n        //             model: {\n        //                 uri: url,\n        //                 minimumPixelSize: 128,\n        //                 maximumScale: 1,\n        //                 debugWireframe: true\n        //             }\n\n        // });\n\n        var origin: Cesium.Cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat, height);\n        var modelMatrix: any = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n\n        var model: Cesium.Model = this.map.scene.primitives.add(Cesium.Model.fromGltf({\n            url : url,\n            show : true,                     // default\n            modelMatrix : modelMatrix,\n            scale : 50.0,                     // double size\n            minimumPixelSize : 128,          // never smaller than 128 pixels\n            maximumScale: 2000,             // never larger than 20000 * model size (overrides minimumPixelSize)\n            allowPicking : true,            // not pickable\n            debugShowBoundingVolume : false, // default\n            debugWireframe : false\n        }));\n                //this.cesiumViewer.trackedEntity = entity;\n    }\n}\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["components/joinSession/joinSession.ts"],"names":[],"mappings":"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","file":"components/joinSession/joinSession.js","sourcesContent":["\nimport ISession from '@dronesense/core/lib/common/ISession';\nimport { ISessionMetadata } from '@dronesense/core/lib/common/metadata/ISessionMetadata';\nimport ServerConnection from '../../components/flightControlViewer/serverConnection';\nimport { SessionController } from '../flightControlViewer/sessionController';\n\nexport interface IJoinSession extends ng.IScope {\n\n}\n\nclass JoinSession {\n\n    // Flag to indicate if service is tryin to connect\n    joining: boolean = false;\n\n    // Server connection to use for session creation\n    serverConnection: ServerConnection;\n\n    // Flag to show on error\n    sessionFindError: boolean = false;\n\n    // Text to show on connect button while connecting\n    joinButtonText: string = 'Join';\n\n    // Session to return\n    session: ISession;\n\n    // Sessions available to join\n    sessions: Array<ISessionMetadata> = [];\n\n    // Current ISessionMetadata selected\n    selectedSession: ISessionMetadata;\n\n    // Flag to hide sessions while initiating session join operation\n    hideSessions: boolean = false;\n\n    // Flag to hide message about initiating session join operation\n    showWaitingForConnectMessage: boolean = false;\n\n    // Flag to hide message about session join time out.\n    sessionJoinTimedOutMessage: boolean = false;\n\n    // Flag to hide/show message that request has been denied\n    sessionJoinDeniedMessage: boolean = false;\n\n    // Reference to the session controller to check for existing connections\n    sessionController: SessionController;\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        '$log'\n    ];\n    constructor(public bindings: IJoinSession, public $log: angular.ILogService) {\n\n    }\n\n    // Load available drones on init.\n    $onInit(): void {\n        \n        // exit if connection is already in progress\n        if (this.joining) {\n            return;\n        }\n\n        // Change button text to show user that we are connecting\n        this.joinButtonText = 'Loading sessions...';\n\n        // turn error off if shown\n        this.sessionFindError = false;\n\n        // Turn on progress bar\n        this.joining = true;\n        \n        // Get sessions available for connection\n        this.serverConnection.droneService.SessionManager.getSessions().then((sessionMetaData: Array<ISessionMetadata>) => {\n                            \n            // Check if we have drones returne if not show error.\n            if (sessionMetaData.length > 0) {\n                // bind to userinterface for selection;\n\n                this.sessions = sessionMetaData.filter((value: ISessionMetadata, index: number): boolean => {\n                    \n                    for (let i: number = 0; i < this.sessionController.guestSession.length; i++) {\n                        if (this.sessionController.guestSession[i].id === value.id) {\n                            return false;\n                        }                            \n                    }\n                    return true;\n                }).filter((value: ISessionMetadata, index: number): boolean => {\n                    if (this.sessionController.ownerSession) {\n                        if (value.id === this.sessionController.ownerSession.id) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                });\n\n                // Check if there are any session left to display\n                if (this.sessions.length === 0) {\n                    // show error message\n                    this.sessionFindError = true;\n\n                    // Change button text back to normal\n                    this.joinButtonText = 'Retry';\n                } else {\n                    // Change button text back to normal\n                    this.joinButtonText = 'Join';\n                }\n\n                // Turn off the progress indicator\n                this.joining = false;\n\n                // force UI update\n                this.bindings.$applyAsync();\n\n            } else {\n                // Turn off the progress indicator\n                this.joining = false;\n\n                // show error message\n                this.sessionFindError = true;\n\n                // Change button text back to normal\n                this.joinButtonText = 'Retry';\n\n                // force UI update\n                this.bindings.$applyAsync();\n\n                this.$log.log({ message: 'No sessions available to join.' });\n            }\n        }).catch((error: any) => {\n            // connect error\n\n            // Turn off the progress indicator\n            this.joining = false;\n\n            // show error message\n            this.sessionFindError = true;\n\n            // Change button text back to normal\n            this.joinButtonText = 'Join';\n\n            // force UI update\n            this.bindings.$applyAsync();\n\n            this.$log.log({ message: 'Error getting sessions available for connection.', error: error });\n        });\n    }\n\n    // helper to clear session selection and set new one\n    clearSessionSelection(selected: any): void {\n        \n        this.sessions.forEach((session: any) => {\n            session.isSelected = false;\n        });\n\n        this.selectedSession = selected;\n\n    }\n    \n    onJoin(session: any): void {}\n\n    joinSession(): void {\n\n        // check that drone has been selected and we have a valid name\n        if (!this.selectedSession) {\n            // need to select a session message\n            return;\n        }\n\n        // exit if connection is already in progress\n        if (this.joining) {\n            return;\n        }\n\n        // Check if the user is attempting a retry and reset state\n        if (this.joinButtonText === 'Retry') {\n            this.joinButtonText = '';\n            this.$onInit();\n            return;\n        }\n\n        // Change button text to show user that we are connecting\n        this.joinButtonText = 'Joining session...';\n\n        // turn error off if shown\n        this.sessionFindError = false;\n\n        // turn off previous join timeout if on\n        this.sessionJoinTimedOutMessage = false;\n\n        // Turn on progress bar\n        this.joining = true;\n\n        // Hide sessions\n        this.hideSessions = true;\n\n        // Show message that we are joing\n        this.showWaitingForConnectMessage = true;\n\n        this.$log.log({ message: 'Joining session.', session: this.selectedSession });\n\n        // Try to create session\n        this.serverConnection.droneService.SessionManager.joinSession(this.selectedSession, 10000).then((session: ISession) => {\n\n            // Return joined session\n            this.onJoin({ session: session });\n\n        }).catch((error: any) => {\n\n            this.joining = false;\n\n            this.showWaitingForConnectMessage = false;\n\n            if (error.parentError.code === 500) {\n                this.sessionJoinTimedOutMessage = true;\n            } else {\n                this.sessionJoinDeniedMessage = true;\n            }\n\n            this.hideSessions = false;\n\n            this.joinButtonText = 'Join';\n\n            this.bindings.$applyAsync();\n\n            // error creating session\n            this.$log.log({ message: 'Error joining session.', error: error });\n        });\n\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.JoinSession', [\n]).component('dsJoinSession', {\n    bindings: {\n        onJoin: '&',\n        onCancel: '&',\n        serverConnection: '<',\n        sessionController: '<'\n    },\n    controller: JoinSession,\n    templateUrl: './app/components/joinSession/joinSession.html'\n});\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["components/controlConnect/controlConnect.ts"],"names":[],"mappings":";;;;;;;;;;;;;;YAUA;gBAkCI,wBAAmB,QAAyB,EACzB,QAA0C;oBAD1C,aAAQ,GAAR,QAAQ,CAAiB;oBACzB,aAAQ,GAAR,QAAQ,CAAkC;oBAjC7D,+CAA+C;oBAC/C,OAAE,GAAW,YAAY,CAAC;oBAE1B,iDAAiD;oBACjD,SAAI,GAAW,IAAI,CAAC;oBAEpB,uBAAuB;oBACvB,QAAG,GAAW,4BAA4B,CAAC;oBAE3C,kDAAkD;oBAClD,eAAU,GAAY,KAAK,CAAC;oBAK5B,gCAAgC;oBAChC,wBAAmB,GAAY,KAAK,CAAC;oBAErC,iDAAiD;oBACjD,kCAA6B,GAAY,KAAK,CAAC;oBAE/C,kDAAkD;oBAClD,sBAAiB,GAAW,SAAS,CAAC;gBAatC,CAAC;gBAED,gCAAO,GAAP;oBAEI,iCAAiC;oBACjC,gEAAgE;oBAChE,+BAA+B;oBAE/B,QAAQ;oBACR,MAAM;gBACV,CAAC;gBAED,kCAAS,GAAT,UAAU,QAAa,IAAS,CAAC;gBAEjC,gCAAO,GAAP;oBAAA,iBAuEC;oBArEG,4CAA4C;oBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBAClB,MAAM,CAAC;oBACX,CAAC;oBAED,qFAAqF;oBACrF,IAAI,SAAS,GAAY,KAAK,CAAC;oBAE/B,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,gBAAkC;wBAC7D,EAAE,CAAC,CAAC,KAAI,CAAC,EAAE,KAAK,gBAAgB,CAAC,EAAE,IAAI,KAAI,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;4BACzE,SAAS,GAAG,IAAI,CAAC;wBACrB,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,gCAAgC;oBAChC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACZ,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC;wBAC1C,MAAM,CAAC;oBACX,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,6BAA6B,GAAG,KAAK,CAAC;oBAC/C,CAAC;oBAED,yDAAyD;oBACzD,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC;oBAEzC,0BAA0B;oBAC1B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;oBAEjC,uBAAuB;oBACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBAEvB,iDAAiD;oBACjD,IAAI,YAAY,GAAkB,eAAM,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;oBAE7F,wCAAwC;oBACxC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC;wBAErC,UAAU;wBACV,yEAAyE;wBACzE,8CAA8C;wBAEtC,IAAI,mBAAmB,GAAqB,IAAI,0BAAgB,CAAC,KAAI,CAAC,EAAE,EAAE,KAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;wBAEnG,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,KAAI,CAAC,gBAAgB,CAAC,CAAC;wBAC9D,kEAAkE;wBAClE,KAAI,CAAC,SAAS,CAAC,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,WAAW,EAAE,KAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;wBAEtG,2BAA2B;wBACvB,gCAAgC;wBACpC,KAAK;oBAET,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAU;wBAChB,gBAAgB;wBAEhB,kCAAkC;wBAClC,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;wBAExB,qBAAqB;wBACrB,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;wBAEhC,oCAAoC;wBACpC,KAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;wBAEnC,kBAAkB;wBAClB,KAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;wBAE5B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACvB,CAAC,CAAC,CAAC;gBAEP,CAAC;gBAED,0CAAiB,GAAjB,UAAkB,MAAwB;oBACtC,IAAI,CAAC,SAAS,CAAC,EAAE,gBAAgB,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;gBACpE,CAAC;gBAjGD,cAAc;gBACP,sBAAO,GAAkB;oBAC5B,QAAQ;oBACR,WAAW;iBACd,CAAC;gBA+FN,qBAAC;YAAD,CAhIA,AAgIC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,+BAA+B,EAAE,EAC9D,CAAC,CAAC,SAAS,CAAC,kBAAkB,EAAE;gBAC7B,QAAQ,EAAE;oBACN,SAAS,EAAE,GAAG;oBACd,QAAQ,EAAE,GAAG;oBACb,gBAAgB,EAAE,GAAG;oBACrB,gBAAgB,EAAE,GAAG;iBACxB;gBACD,UAAU,EAAE,cAAc;gBAC1B,WAAW,EAAE,qDAAqD;aACrE,CAAC,EAAC","file":"components/controlConnect/controlConnect.js","sourcesContent":["\nimport Client from '@dronesense/client/lib/index';\nimport IDroneService from '@dronesense/core/lib/common/IDroneSenseService';\n\nimport ServerConnection from '../../components/flightControlViewer/serverConnection';\n\nexport interface IControlConnect extends ng.IScope {\n\n}\n\nclass ControlConnect {\n\n    // Ip address of server passed in from bindings\n    ip: string = '10.0.1.106';\n\n    // port address of server passed in from bindings\n    port: number = 3005;\n\n    // url of remote server\n    url: string = 'https://afd.dronesense.com';\n\n    // Flag to indicate if service is tryin to connect\n    connecting: boolean = false;\n\n    // Flag to indicate if this is a new flight session connection\n    newFlightSession: boolean;\n\n    // Flag to show connection error\n    showConnectionError: boolean = false;\n\n    // Flag to show same server connection error text\n    showSameServerConnectionError: boolean = false;\n\n    // Text to show on connect button while connecting\n    connectButtonText: string = 'Connect';\n\n    // List of servers already connected\n    connectedServers: Array<ServerConnection>;\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        '$mdDialog'\n    ];\n    constructor(public bindings: IControlConnect,\n                public mdDialog: angular.material.MDDialogService) {\n                    \n    }\n\n    $onInit(): void {\n\n        // // Remove disconnected servers\n        // this.connectedServers.forEach((server: ServerConnection) => {\n        //     if (server.disconnect) {\n\n        //     }\n        // });\n    }\n\n    onConnect(dservice: any): void {}\n\n    connect(): void {\n\n        // exit if connection is already in progress\n        if (this.connecting) {\n            return;\n        }\n\n        // check if the new connection already matches a connected server and return an error\n        let detection: boolean = false;\n\n        this.connectedServers.forEach((serverConnection: ServerConnection) => {\n            if (this.ip === serverConnection.ip && this.port === serverConnection.port) {\n                detection = true;\n            }\n        });\n\n        // Check if we found a duplicate\n        if (detection) {\n            this.showSameServerConnectionError = true;\n            return;\n        } else {\n            this.showSameServerConnectionError = false;\n        }\n\n        // Change button text to show user that we are connecting\n        this.connectButtonText = 'Connecting...';\n\n        // turn error off if shown\n        this.showConnectionError = false;\n\n        // Turn on progress bar\n        this.connecting = true;\n        \n        // Create the client with the ip and port address\n        let droneService: IDroneService = Client.createClient('http://' + this.ip + ':' + this.port);\n\n        // TODO - Pass in user from data service\n        droneService.connect('christopher').then(() => {\n            \n            // success\n            // 1) make call to check server health to ensure all services are running\n            // this.droneService.checkServerHealth(() => {\n\n                    let newServerConnection: ServerConnection = new ServerConnection(this.ip, this.port, droneService);\n\n                    console.log('Is new flight session:' + this.newFlightSession);\n                    // we have a sucessful connection so lets return the drone service\n                    this.onConnect({ serverConnection: newServerConnection, useExisting: this.newFlightSession });\n            \n            //}).catch((error: any)=> {\n                // prompt user to reboot The box\n            //});\n\n        }).catch((error: any) => {\n            // connect error\n\n            // Turn off the progress indicator\n            this.connecting = false;\n\n            // show error message\n            this.showConnectionError = true;\n\n            // Change button text back to normal\n            this.connectButtonText = 'Connect';\n\n            // force UI update\n            this.bindings.$applyAsync();\n\n            console.log(error);\n        });\n\n    }\n\n    setSelectedServer(server: ServerConnection): void {\n        this.onConnect({ serverConnection: server, useExisting: true });\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.ControlConnect', [\n]).component('dsControlConnect', {\n    bindings: {\n        onConnect: '&',\n        onCancel: '&',\n        connectedServers: '<',\n        newFlightSession: '<'\n    },\n    controller: ControlConnect,\n    templateUrl: './app/components/controlConnect/controlConnect.html'\n});\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["components/batteryStatusIndicator/batteryStatusIndicator.ts"],"names":[],"mappings":";;;;;;;YAKA;gBAgCI,gCAAmB,QAAiC;oBAAjC,aAAQ,GAAR,QAAQ,CAAyB;oBA9BpD,kBAAkB;oBAClB,mBAAmB;oBACnB,gBAAgB;oBAChB,oBAAoB;oBAEpB,8DAA8D;oBAC9D,sCAAsC;oBAEtC,sBAAiB,GAAW,CAAC,CAAC;oBAE9B,kBAAa,GAAW,CAAC,CAAC;gBAsB1B,CAAC;gBApBD,sBAAI,uDAAmB;yBAAvB;wBACI,IAAI,GAAG,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wBAE7C,IAAI,KAAK,GAAW,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC;wBACjD,IAAI,OAAO,GAAW,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;wBAC/D,IAAI,OAAO,GAAW,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC;wBAE/D,MAAM,CAAC,KAAK,KAAK,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,OAAO,GAAG,GAAG,GAAG,OAAO,GAAG,OAAO,GAAG,GAAG,GAAG,OAAO,CAAC;oBAC3F,CAAC;;;mBAAA;gBAED,+CAAc,GAAd,UAAe,CAAS;oBACpB,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACtD,CAAC;gBAED,cAAc;gBACP,8BAAO,GAAkB;oBAC5B,QAAQ;iBACX,CAAC;gBAKN,6BAAC;YAAD,CApCA,AAoCC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,uCAAuC,EAAE,EACtE,CAAC,CAAC,SAAS,CAAC,0BAA0B,EAAE;gBACrC,QAAQ,EAAE;oBACN,iBAAiB,EAAE,GAAG;oBACtB,aAAa,EAAE,GAAG;iBACrB;gBACD,UAAU,EAAE,sBAAsB;gBAClC,WAAW,EAAE,qEAAqE;aACrF,CAAC,EAAC","file":"components/batteryStatusIndicator/batteryStatusIndicator.js","sourcesContent":["\nexport interface IBatteryStatusIndicator extends ng.IScope {\n\n}\n\nclass BatteryStatusIndicator {\n\n    // Green - #00C121\n    // Yellow - #dcd300\n    // Red - #ea0707\n    // Default - #abafb9\n\n    // If the battery percentage is between 0-25 then we will show\n    // one bar and everything will be red.\n\n    batteryPercentage: number = 0;\n\n    timeRemaining: number = 0;\n\n    get timeRemainingString(): string {\n        let foo: Date = new Date(this.timeRemaining);        \n        \n        let hours: string = foo.getUTCHours().toString();\n        let minutes: string = this.formatToDigits(foo.getUTCMinutes());\n        let seconds: string = this.formatToDigits(foo.getUTCSeconds());\n\n        return hours !== '0' ? hours + ':' + minutes + ':' + seconds : minutes + ':' + seconds;\n    }\n\n    formatToDigits(n: number): string {\n        return n < 10 ? '0' + n.toString() : n.toString();\n    }\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope'\n    ];\n    constructor(public bindings: IBatteryStatusIndicator) {\n\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.BatteryStatusIndicator', [\n]).component('dsBatteryStatusIndicator', {\n    bindings: {\n        batteryPercentage: '<',\n        timeRemaining: '<'\n    },\n    controller: BatteryStatusIndicator,\n    templateUrl: './app/components/batteryStatusIndicator/batteryStatusIndicator.html'\n});\n"],"sourceRoot":"/source/"}
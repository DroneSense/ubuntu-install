{"version":3,"sources":["components/multiVideoPlayer/videoFeed.ts"],"names":[],"mappings":";;;;;;;YAIA;gBAkBI,mBAAmB,QAAoB;oBAApB,aAAQ,GAAR,QAAQ,CAAY;oBAhBvC,yBAAoB,GAAY,KAAK,CAAC;gBAkBtC,CAAC;gBAED,2BAAO,GAAP;oBACI,gBAAgB;oBAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACxB,eAAe;gBACnB,CAAC;gBAED,oCAAgB,GAAhB;oBAAA,iBAwCC;oBAvCG,IAAI,CAAC;wBAED,oDAAoD;wBACpD,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;wBAEhE,qDAAqD;wBACrD,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,cAAc,EAAE,CAAC;wBAClD,qCAAqC;wBACrC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBAEnD,aAAa;wBACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;4BACjB,QAAQ,EAAE,MAAM;4BAChB,IAAI,EAAE,IAAI,CAAC,EAAE;4BACb,IAAI,EAAE,IAAI;4BACV,GAAG,EAAE,MAAM;4BACX,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;4BACvC,QAAQ,EAAE,UAAU;4BACpB,UAAU,EAAE,KAAK;4BACjB,MAAM,EAAE,GAAG;4BACX,GAAG,EAAE,qCAAqC;4BAC1C,YAAY,EAAE,2BAA2B;4BACzC,KAAK,EAAE,MAAM;4BACb,MAAM,EAAE,MAAM;yBAEjB,CAAC;6BACD,IAAI,CAAC,UAAC,aAAkB;4BAErB,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;4BACnC,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;wBAC9B,CAAC,CAAC;6BACD,KAAK,CAAC,UAAC,KAAU;4BACd,uEAAuE;4BACvE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBACzB,CAAC,CAAC,CAAC;oBAEP,CAAE;oBAAA,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACvB,CAAC;gBACL,CAAC;gBAtDD,cAAc;gBACP,iBAAO,GAAkB;oBAC5B,QAAQ;iBACX,CAAC;gBAqDN,gBAAC;YAAD,CAtEA,AAsEC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,0BAA0B,EAAE,EAEzD,CAAC,CAAC,SAAS,CAAC,aAAa,EAAE;gBACxB,QAAQ,EAAE;oBACN,IAAI,EAAE,GAAG;oBACT,EAAE,EAAE,GAAG;iBACV;gBACD,UAAU,EAAE,SAAS;gBACrB,WAAW,EAAE,kDAAkD;aAClE,CAAC,EAAC","file":"components/multiVideoPlayer/videoFeed.js","sourcesContent":["export interface IVideoFeed extends ng.IScope {\n\n}\n\nclass VideoFeed {\n\n    videoFeedInitialized: boolean = false;\n\n    videoControls: any;\n\n    subscriber: any;\n\n    videoViewer: any;\n\n    name: string;\n\n    ip: string;\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope'\n    ];\n    constructor(public bindings: IVideoFeed) {\n\n    }\n\n    $onInit(): void {\n        /* !web-start */\n        this.initializePlayer();\n        /* !web-stop */\n    }\n\n    initializePlayer(): void {\n        try {\n\n            // Create a view instance based on video element id.\n            this.videoViewer = new red5prosdk.PlaybackView('red5pro-video');\n\n            // Create a new instance of the Flash/RTMP subcriber.\n            this.subscriber = new red5prosdk.RTMPSubscriber();\n            // Attach the subscriber to the view.\n            this.videoViewer.attachSubscriber(this.subscriber);\n\n            // Initialize\n            this.subscriber.init({\n                protocol: 'rtmp',\n                host: this.ip,\n                port: 1935,\n                app: 'live',\n                streamName: this.name.replace(' ', '-'),\n                mimeType: 'rtmp/flv',\n                useVideoJS: false,\n                buffer: 0.2,\n                swf: 'node_modules/red5pro-subscriber.swf',\n                swfobjectURL: 'node_modules/swfobject.js',\n                width: '100%',\n                height: '100%'\n\n            })\n            .then((videoControls: any) => {\n\n                this.videoControls = videoControls;\n                this.videoControls.play();\n            })\n            .catch((error: any) => {\n                // A fault occurred while trying to initialize and playback the stream.\n                console.error(error);\n            });\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.VideoFeed', [\n\n]).component('dsVideoFeed', {\n    bindings: {\n        name: '<',\n        ip: '<'\n    },\n    controller: VideoFeed,\n    templateUrl: './app/components/multiVideoPlayer/videoFeed.html'\n});\n"],"sourceRoot":"/source/"}
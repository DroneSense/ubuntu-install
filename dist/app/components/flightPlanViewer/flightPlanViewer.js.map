{"version":3,"sources":["components/flightPlanViewer/flightPlanViewer.ts"],"names":[],"mappings":"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","file":"components/flightPlanViewer/flightPlanViewer.js","sourcesContent":["import { FlightPlan, User, Drone, Camera } from '@dronesense/model';\n\nimport AppBar from '../appbar/appBar';\nimport ToolBar from '../toolbar/toolbar';\nimport CommandViewer from '../commandViewer/commandViewer';\nimport MapTools from '../mapTools/mapTools';\nimport MapControls from '../mapControls/mapControls';\nimport FlightInfoViewer from '../flightInfoViewer/flightInfoViewer';\n\nimport uiStateService from '../../services/uiStateService';\nimport userService from '../../services/userService';\n\nimport { IUserService } from '../../services/userService';\nimport { IUIStateService } from '../../services/uiStateService';\n\nimport { IDataService } from '../../services/dataService';\n\n\n// import ngDialog from 'ng-dialog';\n// System.import('jspm_packages/npm/ng-dialog@0.5.9/css/ngDialog.css!');\n// System.import('jspm_packages/npm/ng-dialog@0.5.9/css/ngDialog-theme-default.css!');\n\n// // System.config({\n// //     meta: {\n// //     // meaning [baseURL]/vendor/angular.js when no other rules are present\n// //     // path is normalized using map and paths configuration\n// //     '../../../lib/Cesium.js': {\n// //     format: 'global', // load this module as a global\n// //     exports: 'Cesium' // the global property to take as the module value\n// //     }\n// // }\n// // });\n\n// System.config({\n//     meta: {\n//     // meaning [baseURL]/vendor/angular.js when no other rules are present\n//     // path is normalized using map and paths configuration\n//     '../../../lib/cesium-navigation.js': {\n//     format: 'global', // load this module as a global\n//     exports: '' // the global property to take as the module value\n//     }\n// }\n// });\n// System.import('../../../lib/cesium-navigation.js');\n// System.import('../../../lib/cesium-navigation.css!');\n// System.import('jspm_packages/npm/cesium@1.19.0/Build/CesiumUnminified/Widgets/widgets.css!');\n\n\nexport interface IFlightPlanViewer extends ng.IScope {\n    map: Cesium.Viewer;\n}\n\nclass FlightPlanViewer {\n\n    // The flight plan model object\n    flightPlan: FlightPlan;\n\n    // Handle to current flight plan\n    flightPlanHandle: any;\n\n    flightPlanId: string;\n\n    // Map reference passed to us from the map component\n    map: Cesium.Viewer;\n\n    // Current User\n    user: User;\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        '$element',\n        '$state',\n        'db',\n        'uiStateService',\n        'ngDialog',\n        '$q',\n        'dataService'\n    ];\n\n    constructor(\n        public bindings: IFlightPlanViewer,\n        public $element: ng.IRootElementService,\n        public stateService: angular.ui.IStateService,\n        public db: any,\n        public uiStateService: IUIStateService,\n        public ngDialog: any,\n        public $q: ng.IQService,\n        public dataService: IDataService) {\n\n        // Get current user\n        this.loadCurrentUser();\n\n        this.initializeMap();\n\n        // Load flight plan\n        this.loadFlightPlan();\n    }\n\n    // Get current user from user service\n    loadCurrentUser(): void {\n        //this.user = this.userService.CurrentUser;\n\n        this.dataService.getUser().then((user: User) => {\n            this.user = user;\n        });\n    }\n\n    // Show/Hide user settings\n    showUserSettings(show: boolean): void {\n        console.log('show user settings' + show);\n        this.uiStateService.UserSettingsVisible = show;\n    }\n\n    // Show/Hide drone and camera settings\n    showDroneCamera(show: boolean): void {\n        this.uiStateService.DroneCameraVisible = show;\n    }\n\n    loadFlightPlan(): void {\n\n        // Get flight plan id from url\n        this.flightPlanId = this.stateService.params['id'];\n\n        // Check url to see if a flight plan id has been passed in for loading\n        if (this.flightPlanId === '' || angular.isUndefined(this.flightPlanId)) {\n\n            // Create a new flight plan id and load\n            this.db.flightplans.createFlightPlanForUser('foo').then((flightplan: any) => {\n\n                // TODO is there a better way to handle this?  Can we just set in url and recall self?\n                this.stateService.go('flightplan', { id: flightplan.id });\n            });\n\n        } else {\n\n            // Get flight plan handle\n            this.flightPlanHandle = this.db.flightplans.getFlightPlanWithId(this.flightPlanId);\n\n            // Create new flight plan with id and handle\n            this.flightPlan = new FlightPlan(this.flightPlanHandle);\n\n            // Initialize UI state service\n            this.uiStateService.InitializeUIState(this.flightPlanId);\n\n            // Listen for flight plan updates\n            // this.flightPlan.ModelUpdated.on((eventName: string) => {\n\n            //     console.log('flight plan updated');\n\n            //     this.bindings.$applyAsync();\n            // });\n        }\n    }\n\n    initializeMap(): void {\n        //'//assets.agi.com/stk-terrain/world'\n        // https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html\n\n        // By default Cesium uses the location of the Cesium.js file as the location where the rest of the files are stored. You can either set a global CESIUM_BASE_URL variable or just call Cesium.buildModuleUrl.setBaseUrl to point it at a different location.\n        Cesium.BingMapsApi.defaultKey = 'AiGfGytmoPZ6lnYVDiRzKe08ZI_kzjHTjhVrcuj3pPrpC9BmxvFP_vfGT8fB9z-T';\n\n        this.map = new Cesium.Viewer(document.getElementById('cesiumContainer'), {\n            terrainProvider : new Cesium.CesiumTerrainProvider({\n                url : 'https://www.cesiumcontent.com/api/terrain/world?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkMTM4ZDE2OS05NWYwLTQ0YmItOWY3YS0yNjEwOGE5Y2Y3NjYiLCJpZCI6NywiaWF0IjoxNDU1MjkyNzg5fQ.NDKlrwQZE_04ntDuL89hvatEmuycQo5llhtz3Mi6Wo0',\n                requestWaterMask : false,\n                requestVertexNormals : false\n            }),\n            // imageryProvider : new Cesium.ArcGisMapServerImageryProvider({\n            //     url : \"//services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\"\n            // }),\n            // terrainProvider : new Cesium.CesiumTerrainProvider({\n            //     url : '//assets.agi.com/stk-terrain/world',\n            //     requestWaterMask : true,\n            //     requestVertexNormals : true\n            // }),\n            // imageryProvider: new Cesium.MapboxImageryProvider({\n            //     mapId: 'digitalglobe.nmnghj3m',\n            //     // sat with streets: digitalglobe.nmnghj3m\n            //     // sat only: digitalglobe.nmmnloo2\n            //     //Get your DigitalGlobe Maps API Access Token here: http://developer.digitalglobe.com/maps-api\n            //     accessToken: 'pk.eyJ1IjoiZGlnaXRhbGdsb2JlIiwiYSI6ImNpZnB2bWUzNDZoczlzaWtxMmd2bDc3ZHQifQ.AHiF6mR5aXL0rdI4eLz2dA',\n            //     credit: 'DigitalGlobe Maps API'\n            // }),\n            // imageryProvider: new Cesium.MapboxImageryProvider({\n            //     mapId: 'chriseyhorn.3sjrlik9',\n            //     // sat with streets: digitalglobe.nmnghj3m\n            //     // sat only: digitalglobe.nmmnloo2\n            //     //Get your DigitalGlobe Maps API Access Token here: http://developer.digitalglobe.com/maps-api\n            //     accessToken: 'pk.eyJ1IjoiY2hyaXNleWhvcm4iLCJhIjoiaDFPdEM2ZyJ9.m41bT4PKxsjLH3MgC-pGCw'\n            // }),\n            baseLayerPicker: false,\n            fullscreenButton: false,\n            homeButton: false,\n            sceneModePicker: true,\n            selectionIndicator: false,\n            timeline: false,\n            animation: false,\n            geocoder: false,\n            navigationHelpButton: false,\n            infobox: false,\n            scene3DOnly: false\n        });\n\n        // this.map.scene.primitives.add(new Cesium.Cesium3DTileset({\n        //     url: 'https://www.cesiumcontent.com/api/assets/3/data?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkZjgxNGRiYS0wMjc0LTQ2ZWMtYTJhNC1kMzRhYzkyNDE0YjgiLCJpZCI6NSwiYXNzZXRzIjpbM10sImlhdCI6MTQ1NzQ1ODEwOX0.-kwaVNM63oY4-rqLiZHqSedHRImPCZtkizCU50SuKwA'\n        // }));\n\n        // this.map.scene.primitives.add(new Cesium.Cesium3DTileset({\n        //     url : '../newyork/'\n        // }));\n\n        // Decreases map performance but make rendering look better at distances\n        this.map.scene.fog.enabled = true;\n\n        // For debug development purposes\n        this.map.scene.debugShowFramesPerSecond = false;\n\n        // Necessary for 3D models to stay in place\n        this.map.scene.globe.depthTestAgainstTerrain = true;\n\n        // Change mapping to mouse buttons so that the right mouse button will tilt and rotate.\n        this.map.scene.screenSpaceCameraController.tiltEventTypes = [Cesium.CameraEventType.RIGHT_DRAG, Cesium.CameraEventType.PINCH, {\n            eventType : Cesium.CameraEventType.LEFT_DRAG,\n            modifier : Cesium.KeyboardEventModifier.CTRL\n        }, {\n            eventType : Cesium.CameraEventType.RIGHT_DRAG,\n            modifier : Cesium.KeyboardEventModifier.CTRL\n        }];\n\n        // Remove right mouse button from zooming on hold and move\n        this.map.scene.screenSpaceCameraController.zoomEventTypes = [Cesium.CameraEventType.WHEEL, Cesium.CameraEventType.PINCH];\n\n        //navigationInitialization('cesiumContainer', this.map);\n\n        //this.createDrawTools();\n\n        //this.layers = this.cesiumViewer.imageryLayers;\n\n        //Grand Island, Nebraska in radians\n        // var startingLocation: any = {\n        //     centerLong: (-98.343286 * Math.PI / 180),\n        //     centerLat: (40.923664 * Math.PI / 180)\n        // };\n\n        //var dataSource = Cesium.CzmlDataSource.load(this.czml);\n        //this.map.dataSources.add(dataSource);\n\n        //-97.73870945, 30.2721422\n        this.map.camera.flyTo({\n            //destination: Cesium.Cartesian3.fromDegrees(-100.25752233, 32.454968103, 1500),\n            destination: Cesium.Cartesian3.fromDegrees(-97.73870945, 30.2721422, 1500),\n            duration: 1\n            //complete: (): void => {\n            //    this.cesiumViewer.camera.flyTo({\n            //        destination: Cesium.Cartesian3.fromDegrees(-97.7427778, 30.2669444, 500),\n            //        duration: 5,\n            //        orientation : {\n            //            heading: Cesium.Math.toRadians(180.0),\n            //            pitch: Cesium.Math.toRadians(-25.0),\n            //            roll: 0.0\n            //        },\n            //        complete: (): void => {\n            //            console.log('complete');\n            //        }\n            //    });\n            //}\n        });\n\n        //var imageryLayers = this.map.imageryLayers;\n        //\n        //angular.forEach(imageryLayers, (value: any, key: any) => {\n        //    console.log(value);\n        //    console.log(key);\n        //});\n\n        //this.cesiumViewer.imageryLayers.addImageryProvider(new Cesium.WebMapServiceImageryProvider({\n        //    url : '//mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi?',\n        //    layers : 'nexrad-n0r',\n        //    parameters : {\n        //        transparent : 'true',\n        //        format : 'image/png'\n        //    }\n        //}));\n\n        //this.cesiumViewer.entities.add({\n        //    position: Cesium.Cartesian3.fromDegrees(startingLocation.centerLong * 180 / Math.PI, startingLocation.centerLat * 180 / Math.PI, 500),\n        //    point: {\n        //        pixelSize: 32\n        //    }\n        //});\n\n        // this makes sure our parent app gets its cesiumInstance back\n        //this.cesiumDirective.cesiumInstance = new cesiumService(this.cesiumViewer);\n        //-100.25752233, 32.454968103\n        //-100.257630019 32.455315432\n\n\n        //console.log($ctrl.cesiumViewer.imageryLayers);\n\n        //this.addSurfacePolygon('image area', Cesium.Cartesian3.fromDegreesArray([\n        //    -97.73870945, 30.2721422,\n        //    -97.73713231, 30.27620983,\n        //    -97.74134874, 30.27721976,\n        //    -97.74281859, 30.27326337\n        //]), new Cesium.Color(Cesium.Color.byteToFloat(10), Cesium.Color.byteToFloat(146), Cesium.Color.byteToFloat(234), .1));\n        //\n        //this.addSurfacePolyline('foo', Cesium.Cartesian3.fromDegreesArray([\n        //    -97.73870945, 30.2721422,\n        //    -97.73713231, 30.27620983,\n        //    -97.74134874, 30.27721976,\n        //    -97.74281859, 30.27326337,\n        //    -97.73870945, 30.2721422\n        //]), new Cesium.Color(Cesium.Color.byteToFloat(10), Cesium.Color.byteToFloat(146), Cesium.Color.byteToFloat(234), 1));\n\n        //this.getTerrainHeight(-100.257640661, 32.455307523);\n\n        //this.addRectangularSensor();\n\n        //this.addPoint(-97.73888916, 30.27218853, 167);\n\n        var handler = new Cesium.ScreenSpaceEventHandler(this.map.canvas, false);\n        handler.setInputAction((click: any) => {\n               var ray = this.map.camera.getPickRay(click.position);\n               var position = this.map.scene.globe.pick(ray, this.map.scene);\n               console.log(position);\n               if (Cesium.defined(position)) {\n                   // Make the height of the position = 0 so it works with groundPrimitive\n                   var positionCartographic = this.map.scene.globe.ellipsoid.cartesianToCartographic(position);\n                   positionCartographic.height = 0;\n                   position = this.map.scene.globe.ellipsoid.cartographicToCartesian(positionCartographic);\n\n                   var cartographic = Cesium.Cartographic.fromCartesian(position);\n                //    var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(9);\n                //    var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(9);\n\n                    this.map.camera.flyTo({\n                        //destination: Cesium.Cartesian3.fromDegrees(-100.25752233, 32.454968103, 1500),\n                        destination: Cesium.Cartesian3.fromDegrees(Cesium.Math.toDegrees(cartographic.longitude), Cesium.Math.toDegrees(cartographic.latitude)),\n                        duration: 1\n                        //complete: (): void => {\n                        //    this.cesiumViewer.camera.flyTo({\n                        //        destination: Cesium.Cartesian3.fromDegrees(-97.7427778, 30.2669444, 500),\n                        //        duration: 5,\n                        //        orientation : {\n                        //            heading: Cesium.Math.toRadians(180.0),\n                        //            pitch: Cesium.Math.toRadians(-25.0),\n                        //            roll: 0.0\n                        //        },\n                        //        complete: (): void => {\n                        //            console.log('complete');\n                        //        }\n                        //    });\n                        //}\n                    });\n\n                //    console.log(longitudeString + ' ' + latitudeString);\n\n                //    var terrainProvider = new Cesium.CesiumTerrainProvider({\n                //        url : '//assets.agi.com/stk-terrain/world'\n                //    });\n                //    var positions: Array<Cesium.Cartographic> = [\n                //        Cesium.Cartographic.fromDegrees(longitudeString, latitudeString)\n                //    ];\n\n                //    Cesium.sampleTerrain(terrainProvider, 11, positions).then((updatedPositions: any): void => {\n                //         this.map.camera.flyTo({\n                //             //destination: Cesium.Cartesian3.fromDegrees(-100.25752233, 32.454968103, 1500),\n                //             destination: Cesium.Cartesian3.fromDegrees(-97.73870945, 30.2721422, 1500),\n                //             duration: 1\n                //             //complete: (): void => {\n                //             //    this.cesiumViewer.camera.flyTo({\n                //             //        destination: Cesium.Cartesian3.fromDegrees(-97.7427778, 30.2669444, 500),\n                //             //        duration: 5,\n                //             //        orientation : {\n                //             //            heading: Cesium.Math.toRadians(180.0),\n                //             //            pitch: Cesium.Math.toRadians(-25.0),\n                //             //            roll: 0.0\n                //             //        },\n                //             //        complete: (): void => {\n                //             //            console.log('complete');\n                //             //        }\n                //             //    });\n                //             //}\n                //         });\n                //    });\n               }\n           },\n           Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK\n        );\n\n        //var entity = this.map.entities.add({\n        //    label : {\n        //        show : false\n        //    }\n        //});\n\n        //// Mouse over the globe to see the cartographic position\n        //var handler2 = new Cesium.ScreenSpaceEventHandler(this.cesiumViewer.scene.canvas);\n        //handler2.setInputAction((movement) => {\n        //    var cartesian = this.cesiumViewer.camera.pickEllipsoid(movement.endPosition, this.cesiumViewer.scene.globe.ellipsoid);\n        //    console.log(cartesian);\n        //    if (cartesian) {\n        //        var cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n        //        var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(9);\n        //        var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(9);\n        //\n        //        entity.position = cartesian;\n        //        entity.label.show = true;\n        //        entity.label.text = '(' + longitudeString + ', ' + latitudeString + ')';\n        //    } else {\n        //        entity.label.show = false;\n        //    }\n        //}, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n\n//         var handler2: Cesium.ScreenSpaceEventHandler = new Cesium.ScreenSpaceEventHandler(this.map.scene.canvas);\n//         handler2.setInputAction((movement) => {\n//             //Set bounds of our simulation time\n//             var start = Cesium.JulianDate.fromDate(new Date(2015, 2, 25, 16));\n//             var stop = Cesium.JulianDate.addSeconds(start, 855, new Cesium.JulianDate());\n\n// //Make sure viewer is at the desired time.\n//             this.map.clock.startTime = start.clone();\n//             this.map.clock.stopTime = stop.clone();\n//             this.map.clock.currentTime = start.clone();\n//             this.map.clock.clockRange = Cesium.ClockRange.LOOP_STOP; //Loop at the end\n//             this.map.clock.multiplier = 10;\n\n//             var property = new Cesium.SampledPositionProperty();\n//             var initialHeight = 730;\n//             for (var i = 0; i <= 855; i += 15) {\n//                 initialHeight += 2;\n//                 var radians = Cesium.Math.toRadians(i);\n//                 var time = Cesium.JulianDate.addSeconds(start, i, new Cesium.JulianDate());\n//                 var position = Cesium.Cartesian3.fromDegrees(-100.257642589 + (.0001 * Math.cos(radians)), 32.455307234 + (.0001 * Math.sin(radians)), initialHeight);\n//                 property.addSample(time, position);\n\n//                 //Also create a point for each sample we generate.\n//                 this.map.entities.add({\n//                     position : position,\n//                     point : {\n//                         pixelSize : 6,\n//                         color : Cesium.Color.TRANSPARENT,\n//                         outlineColor : Cesium.Color.fromBytes(242, 101, 34, 255),\n//                         outlineWidth : 3\n//                     }\n//                 });\n//             }\n\n//             this.map.entities.add({\n\n//                 //Set the entity availability to the same interval as the simulation time.\n//                 availability : new Cesium.TimeIntervalCollection([new Cesium.TimeInterval({\n//                     start : start,\n//                     stop : stop\n//                 })]),\n\n//                 //Use our computed positions\n//                 position : property,\n\n//                 //Automatically compute orientation based on position movement.\n//                 //orientation : new Cesium.VelocityOrientationProperty(position),\n\n//                 //Load the Cesium plane model to represent the entity\n//                 model : {\n//                     uri : '/components/cesiumMap/models/inspire.glb',\n//                     scale: .3\n//                     //minimumPixelSize : 64\n//                 },\n\n//                 //Show the path as a pink line sampled in 1 second increments.\n//                 path : {\n//                     resolution : 1,\n//                     material : new Cesium.PolylineGlowMaterialProperty({\n//                         glowPower : 0.1,\n//                         color : Cesium.Color.fromBytes(242, 101, 34, 255)\n//                     }),\n//                     width : 10\n//                 }\n//             });\n//         }, Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);\n\n        //var start = Cesium.JulianDate.fromDate(new Date(2015, 2, 25, 16));\n        //var stop = Cesium.JulianDate.addSeconds(start, 360, new Cesium.JulianDate());\n        //\n        ////Compute the entity position property.\n        //var position = computeCirclularFlight(-112.110693, 36.0994841, 0.03);\n    }\n\n    getTerrainHeight(longitude: number, latitude: number): ng.IPromise<number> {\n        var deferred: ng.IDeferred<any> = this.$q.defer();\n\n        // Query the terrain height of two Cartographic positions\n        var terrainProvider: any = new Cesium.CesiumTerrainProvider({\n            url : '//assets.agi.com/stk-terrain/world'\n        });\n        var positions: Array<Cesium.Cartographic> = [\n            Cesium.Cartographic.fromDegrees(longitude, latitude)\n        ];\n\n        Cesium.sampleTerrain(terrainProvider, 11, positions).then((updatedPositions: any): void => {\n\n            deferred.resolve(updatedPositions[0].height);\n        });\n\n        return deferred.promise;\n    }\n\n    // Save flight plan\n    saveFlightPlan(name: string): void {\n\n        // Check if flight plan has a name and save\n        if (name === '') {\n            this.flightPlan.SaveProperty('Untitled Flight Plan', 'Name');\n        } else {\n            this.flightPlan.SaveProperty(name, 'Name');\n        }\n\n        // Set flag in flight plan that it has been saved, this keeps unsaved flight plans from being shown on dashboard\n        this.flightPlan.SaveProperty(true, 'Saved');\n\n        // TODO - take snapshot for dashboard\n    }\n\n    // Check for saved flight plan and go to dashboar\n    exitFlightPlan(): void {\n\n        if (this.flightPlan.Saved) {\n\n            this.stateService.go('dashboard');\n\n        } else {\n            // open confirm model\n            // var model: any = this.ngDialog.open({\n            //     template: 'components/appbar/appbarExitModel.html',\n            //     className: 'ngdialog-theme-ds',\n            //     showClose: false\n            // });\n\n            // model.closePromise.then((data: any): void => {\n            //     // delete flight plan\n            //     if (data.value === 'save') {\n\n            //         this.saveFlightPlan('');\n\n            //     } else if (data.value === 'dsave') {\n\n            //         this.stateService.go('dashboard');\n            //     }\n            // });\n        }\n    }\n\n    // Handle command added from map tools component\n    addCommand(command: any): void {\n\n        // Need to apply high level duplication rules here\n        // For example, you can't have two takeoff commands\n        this.db.commands.createCommandForFlightPlanWithId(this.flightPlanId, command.Type.toUpperCase(), command).then((data: any) => {\n            console.log(data);\n        });\n    }\n\n    // Handle clear flight plan callback from toolbar\n    clearFlightPlan(): void {\n\n        // open confirm model\n        var model: any = this.ngDialog.open({\n            template: './app/components/flightPlanViewer/clearFPModal.html',\n            className: 'ngdialog-theme-ds',\n            showClose: false\n        });\n\n        model.closePromise.then((data: any): void => {\n\n            // delete flight plan\n            if (data.value === true) {\n                this.db.commands.deleteCommandsFromFlightPlanWithId(this.flightPlanId);\n            }\n        });\n    }\n\n    mapFlyTo(lat: number, lng: number): void {\n\n        this.getTerrainHeight(lng, lat).then((alt: number): void => {\n            this.map.camera.flyTo({\n                destination: Cesium.Cartesian3.fromDegrees(lng, lat, alt + 500.0)\n            });\n        });\n\n        //this.map.camera.setView({\n        //    destination : Cesium.Cartesian3.fromDegrees(lng, lat, 500.0)\n        //});\n    }\n\n    saveCamera(camera: Camera): void {\n\n        //this.flightPlan.SaveProperty(camera, 'Camera');\n\n        this.flightPlan.SaveProperty({\n            Type: camera.Type,\n            Name: camera.Name,\n            Id: camera.Id,\n            SensorWidth: camera.SensorWidth,\n            SensorHeight: camera.SensorHeight,\n            FocalLength: camera.FocalLength,\n            HorizontalResolution: camera.HorizontalResolution,\n            VerticalResolution: camera.VerticalResolution\n        }, 'Camera');\n\n    }\n\n    buildings: any;\n\n    showSettings(): void {\n\n        if (this.buildings && this.map.scene.primitives.contains(this.buildings)){\n            this.map.scene.primitives.remove(this.buildings);\n        } else {\n            this.buildings = this.map.scene.primitives.add(new Cesium.Cesium3DTileset({\n                url: 'https://www.cesiumcontent.com/api/assets/3/data/tileset.json?access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJkZjgxNGRiYS0wMjc0LTQ2ZWMtYTJhNC1kMzRhYzkyNDE0YjgiLCJpZCI6NSwiYXNzZXRzIjpbM10sImlhdCI6MTQ1NzQ1ODEwOX0.-kwaVNM63oY4-rqLiZHqSedHRImPCZtkizCU50SuKwA'\n            }));\n\n            var greenCylinder: any = this.map.entities.add({\n                name : 'KAUS Airspace',\n                position: Cesium.Cartesian3.fromDegrees(-97.6663058, 30.1974292, 150.0),\n                cylinder : {\n                    length : 1280.0,\n                    topRadius : 9260.0,\n                    bottomRadius : 9260.0,\n                    material : Cesium.Color.MAGENTA.withAlpha(0.3),\n                    outline : true,\n                    outlineColor: Cesium.Color.WHITE\n                }\n            });\n        }\n    }\n\n    saveDrone(drone: Drone): void {\n        console.log(drone.Name);\n\n        //this.flightPlan.SaveProperty(drone, 'Drone');\n\n        this.flightPlan.SaveProperty({\n            Type: drone.Type,\n            Name: drone.Name,\n            Id: drone.Id,\n            Endurance: drone.Endurance,\n            BatterySize: drone.BatterySize,\n            BatteryType: drone.BatteryType,\n            FrameType: drone.FrameType,\n            AutopilotType: drone.AutopilotType\n        }, 'Drone');\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.FlightPlanViewer', [\n    uiStateService.name,\n    userService.name,\n    AppBar.name,\n    ToolBar.name,\n    CommandViewer.name,\n    MapTools.name,\n    MapControls.name,\n    FlightInfoViewer.name,\n    'ngDialog'\n]).component('dsFlightPlanViewer', {\n    bindings: {\n\n    },\n    controller: FlightPlanViewer,\n    templateUrl: './app/components/flightPlanViewer/flightPlanViewer.html'\n}).filter('secondsToDateTime', [(): any => {\n        return function(seconds: number): number {\n            return new Date(1970, 0, 1).setSeconds(seconds);\n        };\n}]);\n"],"sourceRoot":"/source/"}
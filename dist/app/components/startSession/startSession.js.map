{"version":3,"sources":["components/startSession/startSession.ts"],"names":[],"mappings":"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","file":"components/startSession/startSession.js","sourcesContent":["\nimport ISession from '@dronesense/core/lib/common/ISession';\nimport { IDroneMetadata } from '@dronesense/core/lib/common/metadata/IDroneMetadata';\nimport ServerConnection from '../../components/flightControlViewer/serverConnection';\nimport { ISessionMetadata } from '@dronesense/core/lib/common/metadata/ISessionMetadata';\n\nexport interface IStartSession extends ng.IScope {\n\n}\n\nclass StartSession {\n\n    // url of the new session\n    name: string = 'Blue Team';\n\n    // Flag to indicate if name has been changed by user\n    nameChanged: boolean = false;\n\n    // Flag to indicate if service is tryin to connect\n    creating: boolean = false;\n\n    // Server connection to use for session creation\n    serverConnection: ServerConnection;\n\n    // Flag to show on error\n    showError: boolean = false;\n\n    // Session no name error\n    sessionNoNameError: boolean = false;\n\n    // Session no drone error\n    sessionNoDroneError: boolean = false;\n\n    // Session name already exists error\n    sessionNameExistsError: boolean = false;\n\n    // Session color already exists error\n    sessionColorExistsError: boolean = false;\n\n    // Text to show on connect button while connecting\n    connectButtonText: string = 'Start';\n\n    // Session to return\n    session: ISession;\n\n    // List to hold returned drones\n    drones: Array<IDroneMetadata> = [];\n\n    // Selected drone from session\n    selectedDrone: IDroneMetadata;\n\n    // Flag whether guests can connect without need a prompt for explicit permission\n    guestCanConnect: boolean = true;\n\n    // Flag to start recording on takeoff automatically\n    autoRecordOnTakeoff: boolean = true;\n\n    existingSessions: Array<ISessionMetadata>;\n\n    // On start callback\n    onStart(session: any): void {}\n\n    teamColors: Array<string> = ['#0A92EA', '#ea0707', '#00c121', '#dcd300', '#673ab7'];\n    teamNames: Array<string> = ['Blue Team', 'Red Team', 'Green Team', 'Yellow Team', 'Purple Team'];\n    selectedColor: string = this.teamColors[0];\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        '$mdDialog',\n        '$log'\n    ];\n    constructor(public bindings: IStartSession,\n                public mdDialog: angular.material.MDDialogService,\n                public $log: angular.ILogService) {\n\n    }\n\n    // Load available drones on init.\n    $onInit(): void {\n        \n        // exit if connection is already in progress\n        if (this.creating) {\n            return;\n        }\n\n        // Change button text to show user that we are connecting\n        this.connectButtonText = 'Getting drones...';\n\n        // turn error off if shown\n        this.showError = false;\n\n        // Turn on progress bar\n        this.creating = true;\n\n        // Get existing sessions so we can check for name and color conflicts.\n        this.serverConnection.droneService.SessionManager.getSessions().then((sessions: Array<ISessionMetadata>) => {\n            \n            // Set sessions\n            this.existingSessions = sessions;\n\n            // Remove used colors from option array\n            if (this.existingSessions.length > 0) {\n                this.existingSessions.forEach((value: ISessionMetadata) => {\n                    let index: number = this.teamColors.indexOf(value.color);\n                    this.teamColors.splice(index, 1);\n                    this.teamNames.splice(index, 1);\n                });\n\n                this.selectedColor = this.teamColors[0];\n                this.name = this.teamNames[0];\n            }\n\n            // Get drones available for connection\n            this.serverConnection.droneService.DroneManager.getDrones().then((droneMetaData: Array<IDroneMetadata>) => {\n                                \n                // Check if we have drones returne if not show error.\n                if (droneMetaData.length > 0) {\n                    // bind to userinterface for selection;\n\n                    this.drones = droneMetaData;\n\n                    this.bindings.$applyAsync();\n\n                    // Turn off the progress indicator\n                    this.creating = false;\n\n                    // Change button text back to normal\n                    this.connectButtonText = 'Start';\n\n                } else {\n                    // Turn off the progress indicator\n                    this.creating = false;\n\n                    // show error message\n                    this.showError = true;\n\n                    // Change button text back to normal\n                    this.connectButtonText = 'Retry';\n\n                    // force UI update\n                    this.bindings.$applyAsync();\n\n                    this.$log.log({ message: 'No drones available for connection.'});\n                }\n            }).catch((error: any) => {\n                // connect error\n\n                // Turn off the progress indicator\n                this.creating = false;\n\n                // show error message\n                this.showError = true;\n\n                // Change button text back to normal\n                this.connectButtonText = 'Start';\n\n                // force UI update\n                this.bindings.$applyAsync();\n\n                this.$log.log({ message: 'Error getting drone list for session.', error: error });\n            });\n        }).catch((error) => {\n            this.$log.log({ message: 'Error getting existing session list.', error: error });\n        });\n    }\n\n    // helper to clear drone selection and set new one\n    clearDroneSelection(selected: any): void {\n        \n        if (selected.checkoutState.isCheckedOut) {\n            selected.isSelected = false;\n            return;\n        }\n        \n        this.drones.forEach((drone: any) => {\n            drone.isSelected = false;\n        });\n\n        this.selectedDrone = selected;\n\n    }\n\n    createSession(): void {\n\n        // check that drone has been selected and we have a valid name\n        if (!this.selectedDrone) {\n            this.sessionNoDroneError = true;\n            return;\n        } else {\n            this.sessionNoDroneError = false;\n        }\n\n        if (this.name === '') {\n            // message to tell user they need a session name\n            this.sessionNoNameError = true;\n            return;\n        } else {\n            this.sessionNoNameError = false;\n        }\n        \n        // check if session name is already in use\n        let nameMatch: boolean = false;\n        let colorMatch: boolean = false;\n\n        // check for existing color and name\n        this.existingSessions.forEach((session: ISessionMetadata) => {\n            if (this.name.toLowerCase() === session.name.toLocaleLowerCase()) {\n                nameMatch = true;\n            }\n            if (this.selectedColor === session.color) {\n                colorMatch = true;\n            }\n        });\n\n        // show existing name match error\n        if (nameMatch) {\n            this.sessionNameExistsError = true;\n            return;\n        } else {\n            this.sessionNameExistsError = false;\n        }\n\n        // show existing color match error\n        if (colorMatch) {\n            this.sessionColorExistsError = true;\n            return;\n        } else {\n            this.sessionColorExistsError = false;\n        }\n\n        // exit if connection is already in progress\n        if (this.creating) {\n            return;\n        }\n\n        // Check if the user is attempting a retry and reset state\n        if (this.connectButtonText === 'Retry') {\n            this.connectButtonText = '';\n            this.$onInit();\n            return;\n        }\n\n        // Change button text to show user that we are connecting\n        this.connectButtonText = 'Starting session...';\n\n        // turn error off if shown\n        this.showError = false;\n\n        // Turn on progress bar\n        this.creating = true;\n\n        this.$log.log({ message: 'Starting session.', \n                        name: this.name, \n                        color: this.selectedColor, \n                        drone: this.selectedDrone, \n                        allowAllGuests: this.guestCanConnect, \n                        startRecording: this.autoRecordOnTakeoff });\n\n        // Try to create session\n        this.serverConnection.droneService.SessionManager.createSession(this.name, this.selectedColor, [this.selectedDrone]).then((session: ISession) => {\n            session.getDrones().then((drones) => {\n\n                // This return the drones requested for the session so for now we can assume it will\n                // always be the first drone in the array.\n                if (drones.length > 0) {\n                    drones[0].connect().then(() => {\n\n                        this.$log.log({ message: 'Connected to drone.', drone: drones[0].Name });\n\n                        // // set current drone\n                        // this.currentDrone = drones[0];\n\n                        this.onStart({ session: session, allowAllGuests: this.guestCanConnect, startRecording: this.autoRecordOnTakeoff });\n                        \n                    }).catch((error: any) => {\n                        // error connection to selected drone\n                        // Turn off the progress indicator\n                        this.creating = false;\n\n                        // show error message\n                        this.showError = true;\n\n                        // Change button text back to normal\n                        this.connectButtonText = 'Start';\n\n                        // force UI update\n                        this.bindings.$applyAsync();\n\n                        this.$log.log({ message: 'Error connecting to drone', error: error });\n                    });\n                } else {\n                    // no drones were returned to connect to\n                    this.$log.log({ message: 'No drones were returned to connect to.' });\n                }\n\n            }).catch((error: any) => {\n                // error getting drones\n                this.$log.log({ message: 'Error getting drones.', error: error });\n            });\n        }).catch((error: any) => {\n            // error creating session\n            this.$log.log({ message: 'Error creating session.', error: error });\n        });\n\n    }\n\n    // Set team name based on color selection only if name has not been edited\n    setTeamName(colorIndex: number): void {\n        if (!this.nameChanged) {\n            this.name = this.teamNames[colorIndex];\n        }\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.StartSession', [\n]).component('dsStartSession', {\n    bindings: {\n        onStart: '&',\n        onCancel: '&',\n        serverConnection: '<'\n    },\n    controller: StartSession,\n    templateUrl: './app/components/startSession/startSession.html'\n});\n"],"sourceRoot":"/source/"}
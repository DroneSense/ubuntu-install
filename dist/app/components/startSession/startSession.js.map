{"version":3,"sources":["components/startSession/startSession.ts"],"names":[],"mappings":"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","file":"components/startSession/startSession.js","sourcesContent":["\nimport ISession from '@dronesense/core/lib/common/ISession';\nimport { IDroneMetadata } from '@dronesense/core/lib/common/metadata/IDroneMetadata';\nimport ServerConnection from '../../components/flightControlViewer/serverConnection';\n\nexport interface IStartSession extends ng.IScope {\n\n}\n\nclass StartSession {\n\n    // url of the new session\n    name: string = 'Blue Team';\n\n    // Flag to indicate if name has been changed by user\n    nameChanged: boolean = false;\n\n    // Flag to indicate if service is tryin to connect\n    creating: boolean = false;\n\n    // Server connection to use for session creation\n    serverConnection: ServerConnection;\n\n    // Flag to show on error\n    showError: boolean = false;\n\n    // Text to show on connect button while connecting\n    connectButtonText: string = 'Start';\n\n    // Session to return\n    session: ISession;\n\n    // List to hold returned drones\n    drones: Array<IDroneMetadata> = [];\n\n    // Selected drone from session\n    selectedDrone: IDroneMetadata;\n\n    // Flag whether guests can connect without need a prompt for explicit permission\n    guestCanConnect: boolean = true;\n\n    teamColors: Array<string> = ['#0A92EA', '#ea0707', '#00c121', '#dcd300', '#673ab7'];\n    teamNames: Array<string> = ['Blue Team', 'Red Team', 'Green Team', 'Yellow Team', 'Purple Team'];\n    selectedColor: string = '#0A92EA';\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        '$mdDialog'\n    ];\n    constructor(public bindings: IStartSession,\n                public mdDialog: angular.material.MDDialogService) {\n\n    }\n\n    // Load available drones on init.\n    $onInit(): void {\n        \n        // exit if connection is already in progress\n        if (this.creating) {\n            return;\n        }\n\n        // Change button text to show user that we are connecting\n        this.connectButtonText = 'Getting drones...';\n\n        // turn error off if shown\n        this.showError = false;\n\n        // Turn on progress bar\n        this.creating = true;\n        \n        // Get drones available for connection\n        this.serverConnection.droneService.DroneManager.getDrones().then((droneMetaData: Array<IDroneMetadata>) => {\n                            \n            // Check if we have drones returne if not show error.\n            if (droneMetaData.length > 0) {\n                // bind to userinterface for selection;\n\n                this.drones = droneMetaData;\n\n                this.bindings.$applyAsync();\n\n                // Turn off the progress indicator\n                this.creating = false;\n\n                // Change button text back to normal\n                this.connectButtonText = 'Start';\n\n            } else {\n                // Turn off the progress indicator\n                this.creating = false;\n\n                // show error message\n                this.showError = true;\n\n                // Change button text back to normal\n                this.connectButtonText = 'Retry';\n\n                // force UI update\n                this.bindings.$applyAsync();\n\n            }\n        }).catch((error: any) => {\n            // connect error\n\n            // Turn off the progress indicator\n            this.creating = false;\n\n            // show error message\n            this.showError = true;\n\n            // Change button text back to normal\n            this.connectButtonText = 'Start';\n\n            // force UI update\n            this.bindings.$applyAsync();\n\n            console.log(error);\n        });\n    }\n\n    // helper to clear drone selection and set new one\n    clearDroneSelection(selected: any): void {\n        \n        if (selected.checkoutState.isCheckedOut) {\n            selected.isSelected = false;\n            return;\n        }\n        \n        this.drones.forEach((drone: any) => {\n            drone.isSelected = false;\n        });\n\n        this.selectedDrone = selected;\n\n    }\n\n    onStart(session: any): void {}\n\n    createSession(): void {\n\n        // check that drone has been selected and we have a valid name\n        if (!this.selectedDrone) {\n            // need to select a drone message\n            return;\n        }\n\n        if (this.name === '') {\n            // message to tell user they need a session name\n        }\n\n        // exit if connection is already in progress\n        if (this.creating) {\n            return;\n        }\n\n        // Check if the user is attempting a retry and reset state\n        if (this.connectButtonText === 'Retry') {\n            this.connectButtonText = '';\n            this.$onInit();\n            return;\n        }\n\n        // Change button text to show user that we are connecting\n        this.connectButtonText = 'Starting session...';\n\n        // turn error off if shown\n        this.showError = false;\n\n        // Turn on progress bar\n        this.creating = true;\n\n        // Try to create session\n        this.serverConnection.droneService.SessionManager.createSession(this.name, this.selectedColor, [this.selectedDrone]).then((session: ISession) => {\n            session.getDrones().then((drones) => {\n\n                // This return the drones requested for the session so for now we can assume it will\n                // always be the first drone in the array.\n                if (drones.length > 0) {\n                    drones[0].connect().then(() => {\n\n                        console.log('drone connected');\n                        // // set current drone\n                        // this.currentDrone = drones[0];\n\n                        this.onStart({ session: session, allowAllGuests: this.guestCanConnect });\n                        \n                        // this.currentDrone.FlightController.Telemetry.on('propertyChanged', (name, value) => {\n                        //     //this.bindings.$applyAsync(); \n                        //     //console.log(name);\n                        // });\n\n                    }).catch((error: any) => {\n                        // error connection to selected drone\n                        // Turn off the progress indicator\n                        this.creating = false;\n\n                        // show error message\n                        this.showError = true;\n\n                        // Change button text back to normal\n                        this.connectButtonText = 'Start';\n\n                        // force UI update\n                        this.bindings.$applyAsync();\n\n                        console.log(error);\n                    });\n                } else {\n                    // no drones were returned to connect to\n                    console.log('no drones were returned to connect to');\n                }\n\n            }).catch((error: any) => {\n                // error getting drones\n                console.log(error);\n            });\n        }).catch((error: any) => {\n            // error creating session\n            console.log(error);\n        });\n\n    }\n\n    setTeamName(colorIndex: number): void {\n        if (!this.nameChanged) {\n            this.name = this.teamNames[colorIndex];\n        }\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.StartSession', [\n]).component('dsStartSession', {\n    bindings: {\n        onStart: '&',\n        onCancel: '&',\n        serverConnection: '<'\n    },\n    controller: StartSession,\n    templateUrl: './app/components/startSession/startSession.html'\n});\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["components/weatherViewer/weatherViewer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;YAYA;gBAoBI,uBAAmB,QAAwB,EACxB,cAA+B,EAC/B,cAA+B;oBAF/B,aAAQ,GAAR,QAAQ,CAAgB;oBACxB,mBAAc,GAAd,cAAc,CAAiB;oBAC/B,mBAAc,GAAd,cAAc,CAAiB;oBApBlD,mBAAc,GAAY,KAAK,CAAC;oBAMhC,aAAQ,GAAY,KAAK,CAAC;gBAgB1B,CAAC;gBAED,+BAAO,GAAP;oBACI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACtB,CAAC;gBAED,kCAAU,GAAV;oBAEI,uEAAuE;oBACvE,qEAAqE;oBACrE,gIAAgI;oBAChI,aAAa;oBACb,GAAG;oBANP,iBA6BC;oBArBG,gBAAgB;oBAChB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAE3B,IAAI,aAAa,GAAwB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC;oBAE9E,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,OAAgB;wBAChJ,uBAAuB;wBACvB,YAAY;wBACZ,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC;wBAE3B,KAAI,CAAC,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC;wBAElC,eAAe;wBACf,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBAErB,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAChC,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,aAA4B;wBACrK,KAAI,CAAC,WAAW,GAAG,aAAa,CAAC;oBACrC,CAAC,CAAC,CAAC;gBACP,CAAC;gBA7CD,cAAc;gBACP,qBAAO,GAAkB;oBAC5B,QAAQ;oBACR,gBAAgB;oBAChB,gBAAgB;iBACnB,CAAC;gBA0CN,oBAAC;YAAD,CA7DA,AA6DC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,8BAA8B,EAAE;gBAC1D,wBAAc,CAAC,IAAI;gBACnB,wBAAc,CAAC,IAAI;aACtB,CAAC,CAAC,SAAS,CAAC,iBAAiB,EAAE;gBAC5B,QAAQ,EAAE;oBACN,GAAG,EAAE,GAAG;iBACX;gBACD,UAAU,EAAE,aAAa;gBACzB,WAAW,EAAE,mDAAmD;aACnE,CAAC,EAAC","file":"components/weatherViewer/weatherViewer.js","sourcesContent":["import { Weather } from '../../services/weatherService';\nimport { IWeatherService } from '../../services/weatherService';\nimport WeatherService from '../../services/weatherService';\n\nimport { GeocodeResult } from '../../services/geocodeService';\nimport { IGeocodeService } from '../../services/geocodeService';\nimport GeocodeService from '../../services/geocodeService';\n\nexport interface IWeatherViewer extends ng.IScope {\n\n}\n\nclass WeatherViewer {\n\n    weatherLoading: boolean = false;\n\n    weatherData: Weather;\n\n    lastWeatherLoad: Date;\n\n    showIcon: boolean = false;\n\n    geocodeData: GeocodeResult;\n\n    map: Cesium.Viewer;\n\n    // Constructor\n    static $inject: Array<string> = [\n        '$scope',\n        'weatherService',\n        'geocodeService'\n    ];\n    constructor(public bindings: IWeatherViewer,\n                public weatherService: IWeatherService,\n                public geocodeService: IGeocodeService) {\n\n    }\n\n    $onInit(): void {\n        this.getWeather();\n    }\n\n    getWeather(): void {\n\n        // TODO - This can only be used if we can detect that the map has moved\n        //// If weather has been check within the last 10 minutes just return\n        //if (this.lastWeatherLoad !== undefined && Math.floor((new Date().getTime() - this.lastWeatherLoad.getTime()) / 60000) < 10 ) {\n        //    return;\n        //}\n\n        // Start Spinner\n        this.weatherLoading = true;\n\n        var cartoPosition: Cesium.Cartographic = this.map.camera.positionCartographic;\n\n        this.weatherService.getWeather(Cesium.Math.toDegrees(cartoPosition.latitude), Cesium.Math.toDegrees(cartoPosition.longitude)).then((weather: Weather): void => {\n            //console.log(weather);\n            // Load Data\n            this.weatherData = weather;\n\n            this.lastWeatherLoad = new Date();\n\n            // Stop Spinner\n            this.showIcon = true;\n\n            this.weatherLoading = false;\n        });\n\n        this.geocodeService.getGeocodeForLatLng(Cesium.Math.toDegrees(cartoPosition.latitude), Cesium.Math.toDegrees(cartoPosition.longitude)).then((geocodeResult: GeocodeResult): void => {\n            this.geocodeData = geocodeResult;\n        });\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.WeatherViewer', [\n    WeatherService.name,\n    GeocodeService.name\n]).component('dsWeatherViewer', {\n    bindings: {\n        map: '<'\n    },\n    controller: WeatherViewer,\n    templateUrl: './app/components/weatherViewer/weatherViewer.html'\n});\n\n"],"sourceRoot":"/source/"}
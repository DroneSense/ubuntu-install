{"version":3,"sources":["components/formatters/infoFormatter.ts"],"names":[],"mappings":";;;;;;;;;;;YAGA;gBAiBI,uBAAmB,QAAmB;oBAjB1C,iBA0DC;oBAzCsB,aAAQ,GAAR,QAAQ,CAAW;oBAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;oBAE3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;wBACjB,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC;oBACtB,CAAC,EAAE,UAAC,QAAgB,EAAE,QAAgB;wBAElC,KAAI,CAAC,SAAS,EAAE,CAAC;oBAErB,CAAC,CAAC,CAAC;oBAEH,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;wBACjB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,cAAc,CAAC;oBACpC,CAAC,EAAE,UAAC,QAAgB,EAAE,QAAgB;wBAElC,KAAI,CAAC,SAAS,EAAE,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,iCAAS,GAAT;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAEvB,IAAI,CAAC,QAAQ,GAAG,qBAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAEnD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;4BAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;wBACzB,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;4BACjC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;wBACtB,CAAC;oBACL,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAEJ,IAAI,CAAC,QAAQ,GAAG,qBAAW,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAErD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;4BAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;wBACvB,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;4BACjC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;wBACvB,CAAC;oBACL,CAAC;gBACL,CAAC;gBA9CM,qBAAO,GAAkB;oBAC5B,QAAQ;iBACX,CAAC;gBA6CN,oBAAC;YAAD,CA1DA,AA0DC,IAAA;YAGD,oBAAe,OAAO,CAAC,MAAM,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,EAAE;gBAC3F,QAAQ,EAAE;oBACN,IAAI,EAAE,GAAG;oBACT,KAAK,EAAE,GAAG;oBACV,KAAK,EAAE,GAAG;oBACV,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,GAAG;oBACZ,MAAM,EAAE,GAAG;iBACd;gBACD,UAAU,EAAE,aAAa;gBACzB,WAAW,EAAE,gDAAgD;aAChE,CAAC,EAAC","file":"components/formatters/infoFormatter.js","sourcesContent":["import { User } from '@dronesense/model';\nimport { Conversions } from '@dronesense/model/lib/common/Utility';\n\nclass InfoFormatter {\n\n    user: User;\n    label: string;\n    value: number;\n    format: string;\n\n    unit: string;\n\n    onEdit: any;\n\n    static $inject: Array<string> = [\n        '$scope'\n    ];\n\n    viewData: number;\n\n    constructor(public bindings: ng.IScope) {\n\n        this.viewData = this.value;\n\n        this.bindings.$watch(() => {\n            return this.value;\n        }, (newValue: number, oldValue: number) => {\n\n            this.setValues();\n\n        });\n\n        this.bindings.$watch(() => {\n            return this.user.UnitPreference;\n        }, (newValue: string, oldValue: string) => {\n\n            this.setValues();\n        });\n    }\n\n    setValues(): void {\n        if (this.user.isMetric()) {\n\n            this.viewData = Conversions.roundToTwo(this.value);\n\n            if (this.format === 'elevation') {\n                this.unit = 'meters';\n            } else if (this.format === 'speed') {\n                this.unit = 'm/s';\n            }\n        } else {\n\n            this.viewData = Conversions.metersToFeet(this.value);\n\n            if (this.format === 'elevation') {\n                this.unit = 'feet';\n            } else if (this.format === 'speed') {\n                this.unit = 'ft/s';\n            }\n        }\n    }\n}\n\n// Register component with Angular\nexport default angular.module('DroneSense.Web.InfoFormatter', []).component('dsInfoFormatter', {\n    bindings: {\n        user: '<',\n        label: '@',\n        value: '<',\n        format: '@',\n        canEdit: '@',\n        onEdit: '&'\n    },\n    controller: InfoFormatter,\n    templateUrl: './app/components/formatters/infoFormatter.html'\n});\n\n"],"sourceRoot":"/source/"}
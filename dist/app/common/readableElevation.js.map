{"version":3,"sources":["common/readableElevation.ts"],"names":[],"mappings":";;;;QAGI,iBAAiB;;;;;;;YAAjB,iBAAiB,GAAQ,CAAC,YAAY,EAAE,UAAC,UAAwB;oBACjE,MAAM,CAAC;wBACH,QAAQ,EAAE,GAAG;wBACb,OAAO,EAAE,SAAS;wBAClB,IAAI,EAAE,UAAS,KAAgB,EAAE,OAAY,EAAE,IAAS,EAAE,OAAY;4BAElE,KAAK,CAAC,MAAM,CAAC,cAAQ,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAC,QAAa,EAAE,QAAa;gCAE7E,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;oCAC3D,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC1D,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,OAAO,CAAC,aAAa,CAAC,qBAAW,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;gCACzE,CAAC;gCAED,OAAO,CAAC,OAAO,EAAE,CAAC;4BAEtB,CAAC,CAAC,CAAC;4BAEH,eAAe;4BACf,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,UAAC,KAAa;gCACnC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;oCAC3D,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gCACxC,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,MAAM,CAAC,qBAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gCAC3C,CAAC;4BACL,CAAC,CAAC,CAAC;4BAEH,4BAA4B;4BAC5B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,KAAa;gCAChC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;oCAC5D,MAAM,CAAC,qBAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gCAC3C,CAAC;gCAAC,IAAI,CAAC,CAAC;oCACJ,MAAM,CAAC,KAAK,CAAC;gCACjB,CAAC;4BACL,CAAC,CAAC,CAAC;wBAEP,CAAC;qBACJ,CAAC;gBACN,CAAC,CAAC,CAAC;YAEH,oBAAe,OAAO,CAAC,MAAM,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,EAAC","file":"common/readableElevation.js","sourcesContent":["import { Conversions } from '@dronesense/model/lib/common/Utility';\nimport { IDSRootScope } from '../services/userService';\n\nvar readableElevation: any = ['$rootScope', ($rootScope: IDSRootScope): any => {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope: ng.IScope, element: any, attr: any, ngModel: any): any {\n\n            scope.$watch(() => { return $rootScope.isMetric; }, (newValue: any, oldValue: any) => {\n\n                if ($rootScope.isMetric || $rootScope.isMetric === undefined) {\n                    ngModel.$setViewValue(ngModel.$modelValue.toFixed(2));\n                } else {\n                    ngModel.$setViewValue(Conversions.metersToFeet(ngModel.$modelValue));\n                }\n\n                ngModel.$render();\n\n            });\n\n            // What to show\n            ngModel.$formatters.push((value: number): any => {\n                if ($rootScope.isMetric || $rootScope.isMetric === undefined) {\n                    return parseFloat(value.toFixed(2));\n                } else {\n                    return Conversions.metersToFeet(value);\n                }\n            });\n\n            // What to give to the model\n            ngModel.$parsers.push((value: number): any => {\n                if (!$rootScope.isMetric || $rootScope.isMetric === undefined) {\n                    return Conversions.feetToMeters(value);\n                } else {\n                    return value;\n                }\n            });\n\n        }\n    };\n}];\n\nexport default angular.module('DroneSense.Web.ReadableElevation', []).directive('readableElevation', readableElevation);\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["common/dsRepeatSwitch.ts"],"names":[],"mappings":"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","file":"common/dsRepeatSwitch.js","sourcesContent":["// I am a Switch/Case directive that is intended to work in conjunction with\n// an ngRepat directive. I precompile the children tags with the attribute,\n// 'bn-repeat-switch-when (case/when) tags and then link them for each cloned\n// item in the ngRepeat rendering. Currently, this directive will clear out the\n// contents of the ngRepeat before rendering the appropriate 'case' template.\nexport default angular.module('DroneSense.Web.RepeatSwitch', []).directive(\n    'bnRepeatSwitch', ['$parse', '$compile',\n    function( $parse: any, $compile: any ): any {\n        // I provide a means to pass the switch expression, switch cases, and\n        // other settings from this 'priority' of the directive to the next\n        // priority of the same directive.\n        function Controller(): any {\n            // I hold the parsed expression that each ngRepeat clone will have\n            // to $watch() in order to figure out which template to render.\n            this.expression = null;\n            // I hold the linking functions for each 'case' template.\n            // --\n            // NOTE: I am using .create(null) here in order to make sure that\n            // this object does NOT inherit keys from any other prototype. This\n            // allows us to check keys on this object without having to worry\n            // about inheritance (supported in IE9+).\n            this.cases = Object.create( null );\n            // I determine if the switch-expression should be allowed to change\n            // once, or multiple times. If only once, the code is optimized to\n            // stop caring.\n            this.switchOnce = false;\n        }\n        // I compile the ngRepeat element (before ngRepeat executes) in order to\n        // pre-compile the rendering templates and prepare the linking functions.\n        function compile( tElement: any, tAttributes: any ): any {\n            // Parse the expression that we want to watch/switch-on in each of\n            // the individual ngRepeat elements. By parsing it here, during the\n            // compilation phase, we save the overhead of having to parse it\n            // every time the ngRepeat elements is cloned and linked.\n            var switchExpression: any = $parse( tAttributes.bnRepeatSwitch );\n            // Find all the children elements that make up the 'case' statements,\n            // strip them out, and compile them. This way, we can simply clone\n            // and link them later on.\n            // --\n            // NOTE: Since we are manually querying the DOM for these elements,\n            // we have to make assumptions about the format of the target\n            // attribute. We don't get to rely on the normalization AngularJS\n            // usually gives us (in the Attributes collection).\n            var switchCases: any = {};\n            // Check to see if the user only wants to check the switch expression\n            // once; this will allow the watchers to unbind after the first digest\n            // which should help with long-term performance of the page.\n            var switchOnce: any = ( tAttributes.switchOnce === 'true' );\n            // Find, compile, and remove case-templates.\n            tElement\n                .children( '[ bn-repeat-switch-when ]' )\n                .remove()\n                .each(\n                function iterateOverCaseTemplates(): any {\n                    var node: any = angular.element( this );\n                    var caseValue: any = node.attr( 'bn-repeat-switch-when' );\n                    var caseLinkFunction: any = $compile( node.removeAttr( 'bn-repeat-switch-when' ) );\n                    switchCases[ caseValue ] = caseLinkFunction;\n                }\n            )\n            ;\n            // Clear out any remaining content - the current state of this\n            // directive is not designed to use positional DOM insertion (the way\n            // that ngSwitchWhen does).\n            tElement.empty();\n            // Remove the switch-once attribute (if exists); we no longer need it\n            // and it will only add weight to the DOM at this point.\n            if ( 'switchOnce' in tAttributes ) {\n                tElement.removeAttr( tAttributes.$attr.switchOnce );\n            }\n            // Clean up references that we no longer need.\n            tElement = null;\n            tAttributes = null;\n            // Return the linking function (which will run before the ngRepeat\n            // linking phase).\n            return( link );\n            // The primary purpose of this linking phase, for this directive,\n            // is to copy the switch expression and the case-link-functions into\n            // the current Controller so that they can be made available to the\n            // lower-priority version of this directive (which will link every\n            // time the ngRepeat element is cloned and linked).\n            function link( $scope: ng.IScope, element: any, attributes: any, controller: any ): any {\n                // Store the switch configuration.\n                controller.expression = switchExpression;\n                controller.cases = switchCases;\n                controller.switchOnce = switchOnce;\n                // Since our Controller is going to be passed-around, we should\n                // probably tear it down in order to help prevent unexpected\n                // memory references from sticking around.\n                $scope.$on(\n                    '$destroy',\n                    function handleDestroyEvent(): any {\n                        controller.expression = null;\n                        controller.cases = null;\n                        controller.switchOnce = null;\n                        controller = null;\n                        // NOTE: We cannot tear-down compiled elements as those\n                        // may be used in a subsequent linking phase.\n                    }\n                );\n            }\n        }\n        // Return the directive configuration. Note that this 'version' of the\n        // bnRepeatSwitch directive has to execute with priority 1,001 so that\n        // it is compiled BEFORE the ngRepeat is compiled and linked (at 1,000).\n        return({\n            compile: compile,\n            controller: Controller,\n            priority: 1001,\n            required: 'bnRepeatSwitch',\n            restrict: 'A'\n        });\n    }\n    ]).directive(\n    'bnRepeatSwitch',\n    function(): any {\n        // After each ngRepeat element is cloned and linked I set up the watcher\n        // to render the appropriate template as the expression outcome changes.\n        function link( scope: any, element: any, attributes: any, switchController: any ): any {\n            // Start watching the precompiled expression.\n            var stopWatching: any = scope.$watch(\n                switchController.expression,\n                function handleSwitchExpressionChange( newValue: any, oldValue: any ): any {\n                    // If the user does not expect the switch expression to ever\n                    // change, then we can unbind the watcher after the watcher\n                    // is configured.\n                    if ( switchController.switchOnce ) {\n                        stopWatching();\n                    }\n                    var linkFunction: any = switchController.cases[ newValue ];\n                    // If there was no matching case statement template, just\n                    // clear out the content.\n                    if ( ! linkFunction ) {\n                        return( element.empty() );\n                    }\n                    // If the expression outcome is changing, clear out the\n                    // content before rendering the new template.\n                    if ( newValue !== oldValue ) {\n                        element.empty();\n                    }\n                    // Clone the case template and inject it into the DOM.\n                    linkFunction(\n                        scope,\n                        function handleCaseTemplateCloneLinking(clone: any ): any {\n                            element.append( clone );\n                        }\n                    );\n                }\n            );\n        }\n        // Return the directives configuration. Require the Controller from the\n        // higher-priority version of the bnRepeatSwitch directive so that we can\n        // access the Expression and Case templates that were generated during\n        // the compile phase.\n        // --\n        // NOTE: This directive has to execute with the priority 999 so that it\n        // is linked AFTER the ngRepeat directive is linked (at 1,000).\n        return({\n            link: link,\n            priority: 999,\n            require: 'bnRepeatSwitch',\n            restrict: 'A'\n        });\n    }\n);\n"],"sourceRoot":"/source/"}
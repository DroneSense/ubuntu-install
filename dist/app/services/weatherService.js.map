{"version":3,"sources":["services/weatherService.ts"],"names":[],"mappings":";;;;;;;YAKA;gBASI,wBAAY,EAAgB,EAAE,KAAsB;oBAJpD,sBAAiB,GAAW,oCAAoC,CAAC;oBAK7D,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;oBACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACvB,CAAC;gBAED,mCAAU,GAAV,UAAW,GAAW,EAAE,GAAW;oBAC/B,IAAI,QAAQ,GAA0B,IAAI,CAAC,EAAE,CAAC,KAAK,EAAW,CAAC;oBAE/D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;yBACnD,OAAO,CAAC,UAAC,IAAS;wBACf,IAAI,OAAO,GAAY,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;wBAEzC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAElB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAE9B,CAAC,CAAC,CAAC,KAAK,CAAC;wBACL,QAAQ,CAAC,MAAM,CAAC,yCAAyC,CAAC,CAAC;oBAC/D,CAAC,CAAC,CAAC;oBAEP,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC;gBAvBM,sBAAO,GAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAwBpD,qBAAC;YAAD,CA/BA,AA+BC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,+BAA+B,EAAE,EAE9D,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,cAAc,CAAC,EAAC;YAE7C;gBAQI,iBAAY,IAAS;oBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;oBACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;oBAClC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;gBACtB,CAAC;gBACL,cAAC;YAAD,CAdA,AAcC,IAAA;YAdD,6BAcC,CAAA","file":"services/weatherService.js","sourcesContent":["\nexport interface IWeatherService {\n    getWeather(lat: number, lng: number): ng.IPromise<Weather>;\n}\n\nclass WeatherService {\n\n    $q: ng.IQService;\n    $http: ng.IHttpService;\n\n    weatherAPIBaseURL: string = 'http://uavconditions.cloudapp.net/';\n\n    static $inject: Array<string> = ['$q', '$http'];\n\n    constructor($q: ng.IQService, $http: ng.IHttpService) {\n        this.$q = $q;\n        this.$http = $http;\n    }\n\n    getWeather(lat: number, lng: number): ng.IPromise<Weather> {\n        var deferred: ng.IDeferred<Weather> = this.$q.defer<Weather>();\n\n        this.$http.get(this.weatherAPIBaseURL + lat + '/' + lng)\n            .success((data: any): void => {\n                var weather: Weather = new Weather(data);\n\n                console.log(data);\n\n                deferred.resolve(weather);\n\n            }).error(function (): void {\n                deferred.reject('There was an error getting the weather.');\n            });\n\n        return deferred.promise;\n    }\n}\n\nexport default angular.module('DroneSense.Web.WeatherService', [\n    \n]).service('weatherService', WeatherService);\n\nexport class Weather {\n\n    current: any;\n    daily: any;\n    hourly: any;\n    kp: any;\n\n\n    constructor(data: any) {\n        this.current = data.weather.current;\n        this.daily = data.weather.daily;\n        this.hourly = data.weather.hourly;\n        this.kp = data.kp;\n    }\n}\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["services/geocodeService.ts"],"names":[],"mappings":";;;;;;;YAMA;gBAOI,wBAAY,EAAgB,EAAE,KAAsB;oBAChD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;oBACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACvB,CAAC;gBAED,4CAAmB,GAAnB,UAAoB,GAAW,EAAE,GAAW;oBACxC,IAAI,QAAQ,GAAgC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAiB,CAAC;oBAE3E,IAAI,cAAc,GAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAErD,cAAc,CAAC,OAAO,CAAE,EAAE,UAAU,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EACpE,UAAC,OAA0C,EAAE,MAAkC;wBAC/E,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAEjE,IAAI,aAAa,GAAkB,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;4BAE9D,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;wBAEpC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,QAAQ,CAAC,MAAM,CAAC,4CAA4C,CAAC,CAAC;wBAClE,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC;gBAED,6CAAoB,GAApB,UAAqB,OAAe;oBAChC,IAAI,QAAQ,GAA2B,IAAI,CAAC,EAAE,CAAC,KAAK,EAAY,CAAC;oBAEjE,iBAAiB;oBAEjB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAC5B,CAAC;gBAlCM,sBAAO,GAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAmCpD,qBAAC;YAAD,CAxCA,AAwCC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,+BAA+B,EAAE,EAE9D,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,cAAc,CAAC,EAAC;YAE7C;gBAOI,uBAAY,IAAuC;oBAC/C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBAEpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjC,CAAC;gBAED,sCAAc,GAAd,UAAe,MAAkC;oBAC7C,IAAI,iBAAiB,GAAe,MAAM,CAAC,kBAAkB,CAAC;oBAE9D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAG,CAAC;wBACzD,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,6BAA6B,CAAC,CAAC,CAAC;4BAClE,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;wBAChD,CAAC;wBACD,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;4BAC/C,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC/C,CAAC;oBACL,CAAC;gBACL,CAAC;gBACL,oBAAC;YAAD,CAzBA,AAyBC,IAAA;YAzBD,yCAyBC,CAAA","file":"services/geocodeService.js","sourcesContent":["import { GeoPoint } from '@dronesense/model';\n\nexport interface IGeocodeService {\n    getGeocodeForLatLng(lat: number, lng: number): ng.IPromise<GeocodeResult>;\n}\n\nclass GeocodeService {\n\n    $q: ng.IQService;\n    $http: ng.IHttpService;\n\n    static $inject: Array<string> = ['$q', '$http'];\n\n    constructor($q: ng.IQService, $http: ng.IHttpService) {\n        this.$q = $q;\n        this.$http = $http;\n    }\n\n    getGeocodeForLatLng(lat: number, lng: number): ng.IPromise<GeocodeResult> {\n        var deferred: ng.IDeferred<GeocodeResult> = this.$q.defer<GeocodeResult>();\n\n        var geocodeService: any = new google.maps.Geocoder();\n\n        geocodeService.geocode( { 'location': new google.maps.LatLng(lat, lng) },\n            (results: Array<google.maps.GeocoderResult>, status: google.maps.GeocoderStatus): any => {\n            if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n\n                var geocodeResult: GeocodeResult = new GeocodeResult(results);\n\n                deferred.resolve(geocodeResult);\n\n            } else {\n                deferred.reject('There was an error geocoding the location.');\n            }\n        });\n\n        return deferred.promise;\n    }\n\n    getGeocodeForAddress(address: string): ng.IPromise<GeoPoint> {\n        var deferred: ng.IDeferred<GeoPoint> = this.$q.defer<GeoPoint>();\n\n        // TODO Implement\n\n        return deferred.promise;\n    }\n}\n\nexport default angular.module('DroneSense.Web.GeocodeService', [\n\n]).service('geocodeService', GeocodeService);\n\nexport class GeocodeResult {\n\n    current: any;\n\n    city: string;\n    state: string;\n\n    constructor(data: Array<google.maps.GeocoderResult>) {\n        this.current = data;\n\n        this.parseCityState(data[0]);\n    }\n\n    parseCityState(result: google.maps.GeocoderResult): void {\n        var addressComponents: Array<any> = result.address_components;\n\n        for (var i: number = 0; i < addressComponents.length; ++i ) {\n            if (addressComponents[i].types[0] === 'administrative_area_level_1') {\n                this.state = addressComponents[i].long_name;\n            }\n            if (addressComponents[i].types[0] === 'locality') {\n                this.city = addressComponents[i].long_name;\n            }\n        }\n    }\n}\n"],"sourceRoot":"/source/"}
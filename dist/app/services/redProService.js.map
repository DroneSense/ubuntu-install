{"version":3,"sources":["services/redProService.ts"],"names":[],"mappings":"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","file":"services/redProService.js","sourcesContent":["\nexport interface IRedProService {\n    getLiveStreams(): Promise<Array<RedProStream>>;\n    getLiveStreamStatistics(red5ProStream: RedProStream): Promise<void>;\n}\n\nexport class RedProStream {\n\n    bytes_received: number;\n    active_subscribers: number;\n    total_subscribers: number;\n    max_subscribers: number;\n    id: number;\n    name: string;\n    publish_name: string;\n    creation_time: number;\n    scope_path: string;\n    is_recording: boolean;\n    state: string;\n\n    constructor(publishName: string) {\n        this.publish_name = publishName;\n    }\n}\n\nclass RedProService {\n\n    $http: ng.IHttpService;\n\n    appName: string = 'live';\n    accessToken: string = 'dronesense';\n    red5proServerIp: string = '10.0.1.105';\n    red5proServerPort: string = '5080';\n\n    static $inject: Array<string> = [\n        '$http'\n    ];\n\n    constructor($http: ng.IHttpService) {\n        this.$http = $http;\n    }\n\n    getLiveStreams(): Promise<Array<RedProStream>> {\n        return new Promise<Array<RedProStream>>((resolve, reject) => {\n\n            this.$http.get('http://' + this.red5proServerIp + ':' + this.red5proServerPort + '/api/v1/applications/' + this.appName + '/streams?accessToken=' + this.accessToken).success((data: any): void => {\n                \n                let streams: Array<RedProStream> = [];\n                \n                data.data.forEach((stream: string) => {\n                    streams.push(new RedProStream(stream));\n                });\n\n                resolve(streams);\n            }).error(() => {\n                reject();\n            });\n\n        }); \n    }\n\n    getLiveStreamStatistics(red5ProStream: RedProStream): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            this.$http.get('http://' + this.red5proServerIp + ':' + this.red5proServerPort + '/api/v1/applications/' + this.appName + '/streams/' + red5ProStream.name + '?accessToken=' + this.accessToken).success((data: any): void => {\n                \n                red5ProStream.active_subscribers = data.data.active_subscribers;\n                red5ProStream.total_subscribers = data.data.total_subscribers;\n                red5ProStream.max_subscribers = data.data.max_subscribers;\n                red5ProStream.id = data.data.id;\n                red5ProStream.publish_name = data.data.publish_name;\n                red5ProStream.creation_time = data.data.creation_time;\n                red5ProStream.scope_path = data.data.scope_path;\n                red5ProStream.is_recording = data.data.is_recording;\n                red5ProStream.state = data.data.state;\n\n                resolve();\n            }).error(() => {\n                reject();\n            });\n        });\n    }\n}\n\nexport default angular.module('DroneSense.Web.RedProService', [\n    \n]).service('redProService', RedProService);\n\n"],"sourceRoot":"/source/"}
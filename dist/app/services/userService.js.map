{"version":3,"sources":["services/userService.ts"],"names":[],"mappings":";;;;;;;;;;;YAWA;gBAQI,qBAAY,EAAO,EAAE,UAAwB,EAAE,MAAgC;oBARnF,iBAqCC;oBA3BO,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;oBACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBAErB,IAAI,CAAC,WAAW,GAAG,IAAI,YAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBAE1D,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,iBAAiB,EAAE,UAAC,IAAY,EAAE,KAAU;wBAE5D,EAAE,CAAC,CAAC,KAAI,CAAC,WAAW,IAAI,KAAI,CAAC,WAAW,CAAC,cAAc,IAAI,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC;4BACpH,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;wBAC/B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;wBAChC,CAAC;wBAED,qCAAqC;wBACrC,UAAU,CAAC,KAAK,CAAC,iBAAiB,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;wBAEzD,UAAU,CAAC,WAAW,EAAE,CAAC;oBAE7B,CAAC,CAAC,CAAC;gBAEP,CAAC;gBAED,4BAAM,GAAN;oBACI,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;oBACzB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBAC5B,CAAC;gBA5BM,mBAAO,GAAkB,CAAC,IAAI,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;gBA8BnE,kBAAC;YAAD,CArCA,AAqCC,IAAA;YAED,oBAAe,OAAO,CAAC,MAAM,CAAC,4BAA4B,EAAE,EAE3D,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,EAAC","file":"services/userService.js","sourcesContent":["import { User } from '@dronesense/model';\n\nexport interface IUserService {\n    CurrentUser: User;\n    Logout(): void;\n}\n\nexport interface IDSRootScope extends ng.IRootScopeService {\n    isMetric: boolean;\n}\n\nclass UserService {\n\n    db: any;\n    $state: angular.ui.IStateService;\n\n    CurrentUser: User;\n\n    static $inject: Array<string> = ['db', '$rootScope', '$state'];\n    constructor(db: any, $rootScope: IDSRootScope, $state: angular.ui.IStateService) {\n\n        this.db = db;\n        this.$state = $state;\n\n        this.CurrentUser = new User(db.session.handle.userHandle);\n\n        this.CurrentUser.on('propertyChanged', (name: string, value: any): void => {\n\n            if (this.CurrentUser && this.CurrentUser.UnitPreference && this.CurrentUser.UnitPreference.toLowerCase() === 'metric') {\n                $rootScope.isMetric = true;\n            } else {\n                $rootScope.isMetric = false;\n            }\n\n            // emit broadcast to all rootScope.on\n            $rootScope.$emit('unitPrefChanged', $rootScope.isMetric);\n\n            $rootScope.$applyAsync();\n\n        });\n\n    }\n\n    Logout(): void {\n        this.db.session.logout();\n        this.$state.go('login');\n    }\n\n}\n\nexport default angular.module('DroneSense.Web.UserService', [\n\n]).service('userService', UserService);\n"],"sourceRoot":"/source/"}
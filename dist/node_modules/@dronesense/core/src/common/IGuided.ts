import { IEventEmitter } from './IEventEmitter';
import { DSError } from './DSError';
import { IGuidedWaypoint } from './entities/IGuidedWaypoint';
import { WaypointCommand } from '@dronesense/model';

export module constants {
    export module commands {
        export const GET_WAYPOINTS: string = 'get-waypoints';

        export const ADD_WAYPOINT: string = 'add-waypoint';
        export const REMOVE_WAYPOINT: string = 'remove-waypoint';

        export const SET_ACCEPTANCE_RADIUS: string = 'set-acceptance-radius';
    }

    export module events {
        export const WAYPOINT_ADDED: string = 'waypoint-added';
        export const WAYPOINT_REMOVED: string = 'waypoint-removed';
        export const WAYPOINTS_CHANGED: string = 'waypoints-changed';

        export const WAYPOINT_ERROR: string = 'waypoint-error';
        export const WAYPOINT_STARTED: string = 'waypoint-started';
        export const WAYPOINT_REACHED: string = 'waypoint-reached';
    }
}

// TODO: set guided, takoff, fly to lat/lng/alt, queue by default, go now (trunc, or continue?), pause, play

export interface IGuided extends IEventEmitter {
    /**
     * The waypoints.
     */
    Waypoints: Array<IGuidedWaypoint>;

    /**
     * The index of the current waypoint being flow to.
     */
    CurrWaypointIdx: number;

    /**
     * Enqueus a waypoint to fly to. If flyToNow is true, the queue is truncated, and this
     * waypoint is placed at its front.
     * @param {IGuidedWaypoint} waypoint - the waypoint.
     * @param {boolean} flyToNow - true if this waypoint should be flown to immediately.
     */
    addWaypoint(waypoint: IGuidedWaypoint, flyToNow?: boolean): Promise<void>;

    /**
     * can only delete curr idx, and after
     * if delet curr idx, automatical go to next in queue
     */
    removeWaypoint(index: number): Promise<void>;

    /**
     * Sets the radius, in meters, in which the drones GPS coordinates must fall for
     * its guided waypoints to be accepted as being visited. Defaults to 5.
     */
    setAcceptanceRadius(radius: number): Promise<void>;

    // Events
	on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'waypoint-added', callback?: (waypoint: IGuidedWaypoint, index?: number) => void, context?: any): any;
    on(eventName: 'waypoint-removed', callback?: (index: number) => void, context?: any): any;
    on(eventName: 'waypoints-changed', callback?: () => void, context?: any): any;
    on(eventName: 'waypoint-error', callback?: (index: number, error: DSError) => void, context?: any): any;
    on(eventName: 'waypoint-started', callback?: (index: number) => void, context?: any): any;
    on(eventName: 'waypoint-reached', callback?: (index: number) => void, context?: any): any;
}

export default IGuided;

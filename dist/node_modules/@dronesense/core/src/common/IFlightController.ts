import { ISetting } from './entities/ISetting';
import { IEventEmitter } from './IEventEmitter';
import { FlightPlan } from '@dronesense/model';
import { FlightMode } from './enums/FlightMode';
import { ITelemetry } from './ITelemetry';
import { ISettingsManager } from '../common/ISettingsManager';
import { IGuided } from '../common/IGuided';
import { IFlightPlanner } from '../common/IFlightPlanner';
import { Autopilot } from './enums/Autopilot';
import { Firmware } from './enums/Firmware';
import { IHomePosition } from './entities/IHomePosition';

export module constants {
    export module commands {
        export const REBOOT_DRONE: string = 'reboot-drone';
        export const CALIBRATE_DRONE: string = 'calibrate-drone';
		export const ARM_DRONE: string = 'arm-drone';
        export const TAKEOFF: string = 'takeoff';
		export const ENABLE_ALL_STREAMS: string = 'enable-all-streams';
		export const SET_FLIGHT_MODE: string = 'set-flight-mode';
        export const GET_HOME_POSITION: string = 'get-home-position';
        export const SET_HOME_POSITION: string = 'set-home-position';
        export const SET_PAUSED: string = 'set-paused';

        export const ENABLE_ALTITUDE_MSL_OFFSET: string = 'enable-altitude-msl-offset';
	}
	export module events {
        export const ARMED: string = 'event-armed';
        export const PROPERTY_CHANGED = 'propertyChanged';
    }
}

export interface IFlightControllerConfig {
    type: string;
}

/**
 * Common interface implemented by all flight controllers.
 */
export interface IFlightController extends IEventEmitter {
    /**
     * The type of autopilot this flightcontroller instance represents.
     */
    Type: Autopilot;

    /**
     * The version string for the autopilot this instance represents.
     */
    Version: string;

    /**
     * The firmware installed on this flight controller.
     */
    Firmware: Firmware;

    /**
     * The telemetry state of the flight controller.
     */
    Telemetry: ITelemetry;

    /**
     * The settings of the flight controller.
     */
    SettingsManager: ISettingsManager;

    /**
     * Guided flight mode.
     */
    Guided: IGuided;

    /**
     * The flight planner of the flight controller.
     */
    FlightPlanner: IFlightPlanner;

    /**
     * Reboots the autopilot.
     */
    reboot(): Promise<void>;

    /**
     * Performs preflight calibration.
     */
    calibrate(): Promise<void>;

    /**
     * Arms or disarms the flight controller.
     * @param enable true to arm, false to disarm
     * @param callback Called when the operation completes.
     */
    arm(enable: boolean): Promise<void>;

    /**
     * Takeoff from ground.
     * @param {number} altitude - takeoff altitude AGL in meters
     */
    takeoff(altitudeAGL: number): Promise<void>;

    /**
     * Sets the flight mode.
     * @param cllback Called when the operation completes.
     */
    setFlightMode(flightMode: FlightMode): Promise<void>;

    /**
     * Gets the home position.
     */
    getHomePosition(): Promise<IHomePosition>;

    /**
     * Sets the home position.
     */
    setHomePosition(homePosition: IHomePosition): Promise<void>;

    /**
     * Pauses/unpauses the drone. This works in any state.
     */
    pause(pause: boolean): Promise<void>;

	/**
	 * TODO: HACK:
	 * enables, and sets altitudeMSLOffset for the drone. This is a quick and dirty implementation
	 * of this setting. We'll need to come back later, and make this 'Session Settings' API extensible.
	 */
	enableAltitudeMSLOffset(enabled: boolean, altitudeMSLOffset?: number): Promise<void>;

    // Events
	on(eventName: string, callback?: Function, context?: any): any;
	on(eventName: 'propertyChanged', callback?: (name: string, value: any) => void, context?: any): any;
}

export default IFlightController;


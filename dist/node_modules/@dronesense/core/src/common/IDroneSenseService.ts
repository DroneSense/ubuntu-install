import { IEventEmitter } from './IEventEmitter';
import { IDroneManager } from './IDroneManager';
import { ISessionManager } from './ISessionManager';

// Security
// WSS/HTTPS
// Auth: basic header OR form based w/a set cookie

// Accounts
// should server have a .config with accounts in it?
//  droneService.login(...,...) OR basic/form auth

// Permissions
//  'master': access to everything
//  'slave': only viewer access

// Timeouts
//  If master disconnects, give master permissions to random slave after X seconds
//  If master by himself disconnects, initiate emergency procedures after X seconds

export module constants {
    export module events {
		export const CONNECTED: string = 'connected';
        export const DISCONNECTED: string = 'disconnected';
        export const CONNECT_ERROR: string = 'connect-error';
	}
}

export interface IDroneSenseService extends IEventEmitter {
    /**
     * Gets the drone manager.
     */
    DroneManager: IDroneManager;

    /**
     * Gets the session manager.
     */
    SessionManager: ISessionManager;

    /**
     * True if the client is connected.
     */
    IsConnected: boolean;

    /**
     * Connects this client to the server, and sets the username.
     * @param {string} username - The username of this client.
     * @returns {Promise<void>} A promise that resolves when the connection completes.
     */
    connect(username: string): Promise<void>;

    /**
     * Disconnects this client from the server.
     * @returns {Promise<void>} A promise that resolves when the disconnect completes.
     */
    disconnect(): Promise<void>;

    // Events
	on(eventName: string, callback?: Function, context?: any): any;
	on(eventName: 'connected', callback?: Function, context?: any): any;
	on(eventName: 'disconnected', callback?: Function, context?: any): any;
    on(eventName: 'connect-error', callback?: (error: any) => void, context?: any): any;
}

export default IDroneSenseService;

import { IEventEmitter } from './IEventEmitter';
import { IDrone } from './IDrone';

export module constants {
	export module commands {
		export const CONNECT_TO_SESSION: string = 'connect-to-session';
		export const END_SESSION: string = 'end-session';
		export const REQUEST_MASTER: string = 'request-master';
		export const GET_MASTER: string = 'get-master';
		export const GET_SLAVES: string = 'get-slaves';
		export const GET_DRONES: string = 'get-drones';
	}
	export module events {
		export const MASTER_CONNECTED: string = 'master-connected';
		export const MASTER_DISCONNECTED: string = 'master-disconnected';
		export const SLAVE_REQUESTING_CONNECTION: string = 'slave-requesting-connection';
		export const SLAVE_REQUESTING_MASTER: string = 'slave-requesting-master';
		export const SLAVE_CONNECTED: string = 'slave-connected';
		export const SLAVE_DISCONNECTED: string = 'slave-disconnected';
		export const SESSION_ENDED: string = 'session-ended';
	}
}

export interface ISession extends IEventEmitter {
	/**
	 * @property {string} Id - the unique id of the session.
	 */
	Id: string;

	/**
	 * @property {string} Name - the name of the session.
	 */
	Name: string;

	/**
	 * @property {string} Color - the hex value color of the session.
	 */
	Color: string;

	/**
	 * Leaves the session.
	 */
	leaveSession(): Promise<void>;

	/**
	 * Ends the session for everyone, and removes it from the server.
	 */
	endSession(): Promise<void>;

	/**
	 * Used by an existing slave to request to become master of the session. If there is no
	 * master, this results in the slave automatically becoming master.
	 */
	requestMaster(): Promise<void>;

	/**
	 * Gets the username of the master.
	 */
	getMaster(): Promise<string>;

	/**
	 * Gets the usernames of connected slaves.
	 */
	getSlaves(): Promise<string[]>;

	/**
	 * Gets the drones exclusive to this session.
	 */
	getDrones(): Promise<IDrone[]>;

	// Events
	on(eventName: string, callback?: Function, context?: any): any;
	on(eventName: 'master-connected', callback?: (username: string) => void, context?: any): any;
	on(eventName: 'master-disconnected', callback?: (username: string) => void, context?: any): any;
	on(eventName: 'slave-requesting-connection', callback?: (username: string, cb: (accepted: boolean) => void) => void, context?: any): any;
	on(eventname: 'slave-requesting-master', callback?: (username: string, cb: (accepted: boolean) => void) => void, context?: any): any;
	on(eventName: 'slave-connected', callback?: (username: string) => void, context?: any): any;
	on(eventName: 'slave-disconnected', callback?: (username: string) => void, context?: any): any;
}

export default ISession;

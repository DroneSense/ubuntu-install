"use strict";
var Serializer = (function () {
    function Serializer() {
    }
    Serializer.prototype.serialize = function (obj) {
        this._json = {};
        this._json.__type__ = obj.__type__;
        obj.encodeWithCoder(this);
        return this._json;
    };
    Serializer.prototype.serializeObject = function (obj) {
        this._json = {};
        this._json.__type__ = obj.__type__;
        obj.encodeWithCoder(this);
        return this._json;
    };
    Serializer.prototype.encode = function (value) {
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                return this.encodeArray(value);
            }
            else if (value.__type__) {
                var serializer = new Serializer();
                return serializer.serialize(value);
            }
            else {
            }
        }
        else {
            return value;
        }
    };
    Serializer.prototype.encodeArray = function (values) {
        var _this = this;
        var encodedArray = new Array();
        values.forEach(function (v) {
            encodedArray.push(_this.encode(v));
        });
        return encodedArray;
    };
    Serializer.prototype.encodeObjectForKey = function (obj, key) {
        if (obj) {
            var serializer = new Serializer();
            this._json[key] = serializer.serialize(obj);
        }
        else {
            this._json[key] = null;
        }
    };
    Serializer.prototype.encodeArrayForKey = function (values, key) {
        var _this = this;
        var encodedArray = new Array();
        values.forEach(function (v) {
            encodedArray.push(_this.encode(v));
        });
        this._json[key] = encodedArray;
    };
    Serializer.prototype.encodeBooleanForKey = function (value, key) {
        this._json[key] = value;
    };
    Serializer.prototype.encodeNumberForKey = function (value, key) {
        this._json[key] = value;
    };
    Serializer.prototype.encodeStringForKey = function (value, key) {
        this._json[key] = value;
    };
    Serializer.prototype.encodeDateForKey = function (value, key) {
        this._json[key] = value;
    };
    return Serializer;
}());
exports.Serializer = Serializer;
var Deserializer = (function () {
    function Deserializer(objectFactory) {
        if (objectFactory) {
            this._objectFactory = objectFactory;
        }
        else {
            this._objectFactory = {
                createInstance: function (type) {
                    return null;
                }
            };
        }
    }
    Deserializer.prototype.deserialize = function (clazz, json) {
        this._json = json;
        var obj = new clazz();
        obj.initWithCoder(this);
        return obj;
    };
    Deserializer.prototype.deserializeObject = function (json) {
        this._json = json;
        var type = this._json.__type__;
        var obj = this._objectFactory.createInstance(type);
        obj.initWithCoder(this);
        return obj;
    };
    Deserializer.prototype.decode = function (value) {
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                return this.decodeArray(value);
            }
            else if (value.__type__) {
                var deserializer = new Deserializer(this._objectFactory);
                return deserializer.deserializeObject(value);
            }
            else {
            }
        }
        else {
            return value;
        }
    };
    Deserializer.prototype.decodeArray = function (values) {
        var _this = this;
        var decodedArray = new Array();
        values.forEach(function (v) {
            decodedArray.push(_this.decode(v));
        });
        return decodedArray;
    };
    Deserializer.prototype.decodeObjectForKey = function (key) {
        if (this._json[key]) {
            var deserializer = new Deserializer(this._objectFactory);
            return deserializer.deserializeObject(this._json[key]);
        }
        else {
            return null;
        }
    };
    Deserializer.prototype.decodeObjectOfTypeForKey = function (clazz, key) {
        var deserializer = new Deserializer(this._objectFactory);
        return deserializer.deserialize(clazz, this._json[key]);
    };
    Deserializer.prototype.decodeArrayForKey = function (key) {
        return this.decodeArray(this._json[key]);
    };
    Deserializer.prototype.decodeBooleanForKey = function (key) {
        return this._json[key];
    };
    Deserializer.prototype.decodeNumberForKey = function (key) {
        return this._json[key];
    };
    Deserializer.prototype.decodeStringForKey = function (key) {
        return this._json[key];
    };
    Deserializer.prototype.decodeDateForKey = function (key) {
        return this._json[key];
    };
    return Deserializer;
}());
exports.Deserializer = Deserializer;

//# sourceMappingURL=Serialization.js.map

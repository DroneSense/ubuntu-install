import { IEventEmitter } from './IEventEmitter';
import { DSError } from './DSError';
import { IGuidedWaypoint } from './entities/IGuidedWaypoint';
export declare module constants {
    module commands {
        const GET_WAYPOINTS: string;
        const ADD_WAYPOINT: string;
        const REMOVE_WAYPOINT: string;
        const SET_ACCEPTANCE_RADIUS: string;
    }
    module events {
        const WAYPOINT_ADDED: string;
        const WAYPOINT_REMOVED: string;
        const WAYPOINTS_CHANGED: string;
        const WAYPOINT_ERROR: string;
        const WAYPOINT_STARTED: string;
        const WAYPOINT_REACHED: string;
    }
}
export interface IGuided extends IEventEmitter {
    Waypoints: Array<IGuidedWaypoint>;
    CurrWaypointIdx: number;
    addWaypoint(waypoint: IGuidedWaypoint, flyToNow?: boolean): Promise<void>;
    removeWaypoint(index: number): Promise<void>;
    setAcceptanceRadius(radius: number): Promise<void>;
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'waypoint-added', callback?: (waypoint: IGuidedWaypoint, index?: number) => void, context?: any): any;
    on(eventName: 'waypoint-removed', callback?: (index: number) => void, context?: any): any;
    on(eventName: 'waypoints-changed', callback?: () => void, context?: any): any;
    on(eventName: 'waypoint-error', callback?: (index: number, error: DSError) => void, context?: any): any;
    on(eventName: 'waypoint-started', callback?: (index: number) => void, context?: any): any;
    on(eventName: 'waypoint-reached', callback?: (index: number) => void, context?: any): any;
}
export default IGuided;

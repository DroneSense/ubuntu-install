export declare enum DSErrorCode {
    NOT_SET = 0,
    CONNECT_FAILED = 10,
    DISCONNECT_FAILED = 20,
    CONFIGURATION_ERROR = 30,
    DRONE_ALREADY_EXISTS = 40,
    DRONE_DOES_NOT_EXIST = 50,
    SOCKETIO_CONNECTION_FAILED = 59,
    SESSION_ID_IN_USE = 60,
    DRONE_LOCKED = 70,
    SLAVE_CONNECTION_REQUEST_DENIED = 80,
    SLAVE_REQUEST_MASTER_DENIED = 90,
    FLIGHT_PLAN_NOT_SET = 100,
    EKF_POSITION_ESTIMATE_NOT_OK = 101,
    INVALID_MODE = 200,
    MODE_NOT_SUPPORTED = 201,
    TUNNEL_NOT_OPEN = 202,
    TUNNEL_ALREADY_OPEN = 203,
    CMD_FAILED = 500,
    NOT_AUTHORIZED = 600,
    NOT_CONNECTED = 601,
    SERIALIZATION_FAILED = 601,
    DESERIALIZATION_FAILED = 602,
    FEATURE_NOT_IMPLEMENTED = 603,
    UNKNOWN = 700,
    INVALID_STATE = 800,
    TIMEOUT = 900,
    OPERATION_FAILED = 1000,
    INDEX_OUT_OF_RANGE = 1001,
    ALREADY_SET = 1002,
    VALUE_NOT_UNIQUE = 1003,
    PAUSED = 1004,
}
export declare class DSError extends Error {
    name: string;
    code: DSErrorCode;
    message: string;
    parentError: DSError;
    constructor(code?: number, message?: string, parentError?: any);
    static Codes: typeof DSErrorCode;
    static create(code: number, message: string, parentError?: any): DSError;
    static normalize(error: any): any;
    static fromJSON(json: any): DSError;
    toJSON(): any;
}
export default DSError;

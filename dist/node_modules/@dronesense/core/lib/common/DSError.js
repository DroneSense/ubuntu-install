"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (DSErrorCode) {
    DSErrorCode[DSErrorCode["NOT_SET"] = 0] = "NOT_SET";
    DSErrorCode[DSErrorCode["CONNECT_FAILED"] = 10] = "CONNECT_FAILED";
    DSErrorCode[DSErrorCode["DISCONNECT_FAILED"] = 20] = "DISCONNECT_FAILED";
    DSErrorCode[DSErrorCode["CONFIGURATION_ERROR"] = 30] = "CONFIGURATION_ERROR";
    DSErrorCode[DSErrorCode["DRONE_ALREADY_EXISTS"] = 40] = "DRONE_ALREADY_EXISTS";
    DSErrorCode[DSErrorCode["DRONE_DOES_NOT_EXIST"] = 50] = "DRONE_DOES_NOT_EXIST";
    DSErrorCode[DSErrorCode["SOCKETIO_CONNECTION_FAILED"] = 59] = "SOCKETIO_CONNECTION_FAILED";
    DSErrorCode[DSErrorCode["SESSION_ID_IN_USE"] = 60] = "SESSION_ID_IN_USE";
    DSErrorCode[DSErrorCode["DRONE_LOCKED"] = 70] = "DRONE_LOCKED";
    DSErrorCode[DSErrorCode["SLAVE_CONNECTION_REQUEST_DENIED"] = 80] = "SLAVE_CONNECTION_REQUEST_DENIED";
    DSErrorCode[DSErrorCode["SLAVE_REQUEST_MASTER_DENIED"] = 90] = "SLAVE_REQUEST_MASTER_DENIED";
    DSErrorCode[DSErrorCode["FLIGHT_PLAN_NOT_SET"] = 100] = "FLIGHT_PLAN_NOT_SET";
    DSErrorCode[DSErrorCode["EKF_POSITION_ESTIMATE_NOT_OK"] = 101] = "EKF_POSITION_ESTIMATE_NOT_OK";
    DSErrorCode[DSErrorCode["INVALID_MODE"] = 200] = "INVALID_MODE";
    DSErrorCode[DSErrorCode["MODE_NOT_SUPPORTED"] = 201] = "MODE_NOT_SUPPORTED";
    DSErrorCode[DSErrorCode["TUNNEL_NOT_OPEN"] = 202] = "TUNNEL_NOT_OPEN";
    DSErrorCode[DSErrorCode["TUNNEL_ALREADY_OPEN"] = 203] = "TUNNEL_ALREADY_OPEN";
    DSErrorCode[DSErrorCode["CMD_FAILED"] = 500] = "CMD_FAILED";
    DSErrorCode[DSErrorCode["NOT_AUTHORIZED"] = 600] = "NOT_AUTHORIZED";
    DSErrorCode[DSErrorCode["NOT_CONNECTED"] = 601] = "NOT_CONNECTED";
    DSErrorCode[DSErrorCode["SERIALIZATION_FAILED"] = 601] = "SERIALIZATION_FAILED";
    DSErrorCode[DSErrorCode["DESERIALIZATION_FAILED"] = 602] = "DESERIALIZATION_FAILED";
    DSErrorCode[DSErrorCode["FEATURE_NOT_IMPLEMENTED"] = 603] = "FEATURE_NOT_IMPLEMENTED";
    DSErrorCode[DSErrorCode["UNKNOWN"] = 700] = "UNKNOWN";
    DSErrorCode[DSErrorCode["INVALID_STATE"] = 800] = "INVALID_STATE";
    DSErrorCode[DSErrorCode["TIMEOUT"] = 900] = "TIMEOUT";
    DSErrorCode[DSErrorCode["OPERATION_FAILED"] = 1000] = "OPERATION_FAILED";
    DSErrorCode[DSErrorCode["INDEX_OUT_OF_RANGE"] = 1001] = "INDEX_OUT_OF_RANGE";
    DSErrorCode[DSErrorCode["ALREADY_SET"] = 1002] = "ALREADY_SET";
    DSErrorCode[DSErrorCode["VALUE_NOT_UNIQUE"] = 1003] = "VALUE_NOT_UNIQUE";
    DSErrorCode[DSErrorCode["PAUSED"] = 1004] = "PAUSED";
})(exports.DSErrorCode || (exports.DSErrorCode = {}));
var DSErrorCode = exports.DSErrorCode;
var DSError = (function (_super) {
    __extends(DSError, _super);
    function DSError(code, message, parentError) {
        _super.call(this, message);
        this.name = 'DSError';
        this.code = code;
        this.message = message;
        if (parentError) {
            if (parentError.name === 'DSError') {
                this.parentError = parentError;
            }
            else if (typeof parentError.toString === 'function') {
                this.parentError = new DSError(DSErrorCode.UNKNOWN, parentError.toString());
            }
            else {
                this.parentError = new DSError(DSErrorCode.UNKNOWN, 'unknown error');
            }
        }
    }
    Object.defineProperty(DSError, "Codes", {
        get: function () {
            return DSErrorCode;
        },
        enumerable: true,
        configurable: true
    });
    DSError.create = function (code, message, parentError) {
        return new DSError(code, message, parentError);
    };
    DSError.normalize = function (error) {
        if (error) {
            if (error.name === 'DSError') {
                return error;
            }
            else if (typeof error.toString === 'function') {
                return new DSError(DSErrorCode.UNKNOWN, error.toString());
            }
            else {
                return new DSError(DSErrorCode.UNKNOWN, 'unknown error');
            }
        }
        else {
            return new DSError(DSErrorCode.UNKNOWN, 'unknown null/undefined error');
        }
    };
    DSError.fromJSON = function (json) {
        var error = new DSError();
        error.code = json.code;
        error.message = json.message;
        error.parentError = json.parentError ? DSError.fromJSON(json.parentError) : null;
        return error;
    };
    DSError.prototype.toJSON = function () {
        return {
            name: this.name,
            code: this.code,
            message: this.message,
            parentError: this.parentError
        };
    };
    return DSError;
}(Error));
exports.DSError = DSError;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DSError;

//# sourceMappingURL=DSError.js.map

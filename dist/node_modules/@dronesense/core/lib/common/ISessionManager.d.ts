import { IEventEmitter } from './IEventEmitter';
import { ISession } from './ISession';
import { ISessionMetadata } from './metadata/ISessionMetadata';
import { IDroneMetadata } from './metadata/IDroneMetadata';
export declare module constants {
    module commands {
        const CREATE_SESSION: string;
        const GET_SESSIONS: string;
        const JOIN_SESSION: string;
    }
    module events {
        const SESSION_CREATED: string;
        const SESSION_DESTROYED: string;
    }
}
export interface ISessionManager extends IEventEmitter {
    createSession(sessionName: string, color: string, drones: Array<IDroneMetadata>): Promise<ISession>;
    getSessions(): Promise<Array<ISessionMetadata>>;
    joinSession(metadata: ISessionMetadata, timeoutMs: number): Promise<ISession>;
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'session-created', callback?: (metadata: ISessionMetadata) => void, context?: any): any;
    on(eventName: 'session-destroyed', callback?: (id: string) => void, context?: any): any;
}
export default ISessionManager;

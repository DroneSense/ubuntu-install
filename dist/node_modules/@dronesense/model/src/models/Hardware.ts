import ModelBase from './ModelBase';

// Harware baseclass with common hardware attributes
export class Hardware extends ModelBase {

    // Name: string;
    private _name: string;

    get Name(): string {
        return this._name;
    }
    set Name(value: string) {
        if (this.handle) {
            this.handle.setValue('Name', value);
        } else {
            this._name = value;
        }
    }

    // Serial: string;
    // Unique identifier for the hardware
    private _serial: string;

    get Serial(): string {
        return this._serial;
    }
    set Serial(value: string) {
        if (this.handle) {
            this.handle.setValue('Serial', value);
        } else {
            this._serial = value;
        }
    }

    // Status: string;
    // Current condition of the hardware
    private _status: string;

    get Status(): string {
        return this._status;
    }
    set Status(value: string) {
        if (this.handle) {
            this.handle.setValue('Status', value);
        } else {
            this._status = value;
        }
    }

    // Notes: string;
    // Notes about the hardware
    private _notes: string;

    get Notes(): string {
        return this._notes;
    }
    set Notes(value: string) {
        if (this.handle) {
            this.handle.setValue('Notes', value);
        } else {
            this._notes = value;
        }
    }

    constructor(handle: any) {
        super();

        if (handle) {
            super(handle);

            this.hydrate(handle.data);

            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate, this);
        }
    }

    hydrate(data: any): void {

        super.hydrate(data);

        if (data) {

            if (this.Name !== data.Name) {
                this._name = data.Name;
                this.trigger('propertyChanged', 'Name', this.Name);
            }

            if (this.Serial !== data.Serial) {
                this._serial = data.Serial;
                this.trigger('propertyChanged', 'Serial', this.Serial);
            }

            if (this.Status !== data.Status) {
                this._status = data.Status;
                this.trigger('propertyChanged', 'Status', this.Status);
            }

            if (this.Notes !== data.Notes) {
                this._notes = data.Notes;
                this.trigger('propertyChanged', 'Notes', this.Notes);
            }

        }

    }

}

export default Hardware;

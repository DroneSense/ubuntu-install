import ModelBase from './ModelBase';
import GeoPoint from './GeoPoint';
import Camera from './Camera';
import User from './User';
import Drone from './Drone';
import Command from './Command';
import Tag from './Tag';
import { CommandFactory } from '../factories/CommandFactory';
import { MockHandle } from '../common/MockHandle';

export class MapState extends ModelBase {

    MapZoomLevel: number;

    MapCenterPoint: GeoPoint;

    BaseMap: string;

    Overlays: string;

}

// FlightPlan
export class FlightPlan extends ModelBase {

    // Flag to indicate whether the flight plan is saved
    // Saved: boolean;
    private _saved: boolean;

    get Saved(): boolean {
        return this._saved;
    }
    set Saved(value: boolean) {
        if (this.handle) {
            this.handle.setValue('Saved', value);
        } else {
            this._saved = value;
        }
    }

    // Name of flight plan
    // Name: string;
    private _name: string;

    get Name(): string {
        return this._name;
    }
    set Name(value: string) {
        if (this.handle) {
            this.handle.setValue('Name', value);
        } else {
            this._name = value;
        }
    }

    // Date and Time of the flight
    // ScheduledDate: Date;
    private _scheduledDate: Date;

    get ScheduledDate(): Date {
        return this._scheduledDate;
    }
    set ScheduledDate(value: Date) {
        if (this.handle) {
            this.handle.setValue('ScheduledDate', value);
        } else {
            this._scheduledDate = value;
        }
    }

    // User that created this flight plan
    Owners: Array<User>;

    // Total distance in meters of this flight plan path
    // Distance: number = 0;
    private _distance: number = 0;

    get Distance(): number {
        return this._distance;
    }
    set Distance(value: number) {
        if (this.handle) {
            this.handle.setValue('Distance', value);
        } else {
            this._distance = value;
        }
    }

    // Total number of navigation points in this flight plan
    // NavPointCount: number = 0;
    private _navPointCount: number = 0;

    get NavPointCount(): number {
        return this._navPointCount;
    }
    set NavPointCount(value: number) {
        if (this.handle) {
            this.handle.setValue('NavPointCount', value);
        } else {
            this._navPointCount = value;
        }
    }

    // Total time of flight in seconds
    // FlightTime: number = 0;
    private _flightTime: number = 0;

    get FlightTime(): number {
        return this._flightTime;
    }
    set FlightTime(value: number) {
        if (this.handle) {
            this.handle.setValue('FlightTime', value);
        } else {
            this._flightTime = value;
        }
    }

    // List of commands that make up this flight plan
    Commands: Array<Command>;

    // Drone object with base properties
    Drone: any;

    // Camera used for this flight plan
    Camera: any;

    // Highest elevation point in flight plan
    // HighElevation: number;
    private _highElevation: number = 0;

    get HighElevation(): number {
        return this._highElevation;
    }
    set HighElevation(value: number) {
        if (this.handle) {
            this.handle.setValue('HighElevation', value);
        } else {
            this._highElevation = value;
        }
    }

    // Lowest elevation point in flight plan
    // LowElevation: number;
    private _lowElevation: number = 0;

    get LowElevation(): number {
        return this._lowElevation;
    }
    set LowElevation(value: number) {
        if (this.handle) {
            this.handle.setValue('LowElevation', value);
        } else {
            this._lowElevation = value;
        }
    }

    // Thumbnail url of the flight plan captured in the planning screen
    // ThumbnailUrl: string;
    private _thumbnailUrl: string;

    get ThumbnailUrl(): string {
        return this._thumbnailUrl;
    }
    set ThumbnailUrl(value: string) {
        if (this.handle) {
            this.handle.setValue('ThumbnailUrl', value);
        } else {
            this._thumbnailUrl = value;
        }
    }

    // Flight plan geographic political name
    // LocationName: string;
    private _locationName: string;

    get LocationName(): string {
        return this._locationName;
    }
    set LocationName(value: string) {
        if (this.handle) {
            this.handle.setValue('LocationName', value);
        } else {
            this._locationName = value;
        }
    }

    // Flight plan geogrpahic lat/lng
    // LocationLatLng: string;
    private _locationLatLng: string;

    get LocationLatLng(): string {
        return this._locationLatLng;
    }
    set LocationLatLng(value: string) {
        if (this.handle) {
            this.handle.setValue('LocationLatLng', value);
        } else {
            this._locationLatLng = value;
        }
    }

    MapZoomLevel: number;

    MapCenterPoint: GeoPoint;

    // Max distance the drone is from the takeoff point during the flight
    // MaxDistance: number;
    private _maxDistance: number = 0;

    get MaxDistance(): number {
        return this._maxDistance;
    }
    set MaxDistance(value: number) {
        if (this.handle) {
            this.handle.setValue('MaxDistance', value);
        } else {
            this._maxDistance = value;
        }
    }

    Tags: Array<Tag>;

    // Flight plan notes
    // Notes: string;
    private _notes: string;

    get Notes(): string {
        return this._notes;
    }
    set Notes(value: string) {
        if (this.handle) {
            this.handle.setValue('Notes', value);
        } else {
            this._notes = value;
        }
    }

    // Moved settings into flight plan object instead of having seperate object for three properties
    DefaultAltitudeMSL: boolean = true;

    DefaultWaypointAltitude: number = 50;

    DefaultFlightSpeed: number = 5;

    private _data: any = {};

    constructor();
    constructor(handle: any);
    constructor(handle?: any) {
        super();

        if (this.handle) {
            super(handle);

            this.hydrate(this.handle.data);

            this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
        }
    }

    hydrate(data: any): void {

        super.hydrate(data);

        if (data) {
            // Hydrate needs to set defaults

            var cameraChanged: boolean = false;

            if (data.Saved) {
                this.Saved = data.Saved;
            } else {
                this.Saved = false;
            }

            if (data.Name) {
                this.Name = data.Name;
            }

            // this.Created = new Date(data.createdAt);
            // this.DateTime = data.DateTime ? new Date(data.DateTime) : new Date();

            if (data.MapZoomLevel) {
                this.MapZoomLevel = data.MapZoomLevel;
            } else {
                this.MapZoomLevel = 14;
            }

            if (data.MapCenterPoint) {
                this.MapCenterPoint = data.MapCenterPoint;
            } else {
                this.MapCenterPoint = new GeoPoint(30.2746903, -97.7402973);
            }

            // if (data.Settings) {
            //     this.Settings = data.Settings;
            // } else {
            //     this.Settings = new FlightPlanSettings();
            // }

            if (data.NavPointCount) {
                this.NavPointCount = data.NavPointCount;
            } else {
                this.NavPointCount = 0;
            }

            if (data.FlightTime) {
                this.FlightTime = data.FlightTime;
            } else {
                this.FlightTime = 0;
            }

            if (data.Distance) {
                this.Distance = data.Distance;
            } else {
                this.Distance = 0;
            }

            if (data.MaxDistance) {
                this.MaxDistance = data.MaxDistance;
            } else {
                this.MaxDistance = 0;
            }

            if (data.HighElevation) {
                this.HighElevation = data.HighElevation;
            } else {
                this.HighElevation = 0;
            }

            if (data.LowElevation) {
                this.LowElevation = data.LowElevation;
            } else {
                this.LowElevation = 0;
            }

            // We can set the default selected drone here.
            if (data.Drone) {
                this.Drone = data.Drone;

                var drone: Drone = new Drone();

                drone.Name = data.Drone.Name;
                drone.Id = data.Drone.Id;
                drone.Type = data.Drone.Type;
                drone.Endurance = data.Drone.Endurance;
                drone.BatterySize = data.Drone.BatterySize;
                drone.BatteryType = data.Drone.BatteryType;
                drone.FrameType = data.Drone.FrameType;
                drone.AutopilotType = data.Drone.AutopilotType;

                this.Drone = drone;

            } else {

                var drone2: Drone = new Drone();

                drone2.Name = '3DR Iris+';
                drone2.Id = 'a';
                drone2.Type = 'catalog';
                drone2.Endurance = 10;
                drone2.BatterySize = 5100;
                drone2.BatteryType = 'LiPo3S';
                drone2.FrameType = 'Quadcopter';
                drone2.AutopilotType = 'APM';

                this.Drone = drone2;

                //this.Drone = {
                //    Name: '3DR Solo',
                //    Type: 'Catalog',
                //    Id: 'c'
                //};
            }

            /**
             * TODO: FIX THIS!
             */
            // if (!angular.equals(this._data.Camera, data.Camera)) {
            if (this._data.Camera !== data.Camera) {
                //this.Camera = data.Camera;

                var camera: Camera = new Camera();
                camera.Name = data.Camera.Name;
                camera.Id = data.Camera.Id;
                camera.Type = data.Camera.Type;
                camera.SensorWidth = data.Camera.SensorWidth;
                camera.SensorHeight = data.Camera.SensorHeight;
                camera.FocalLength = data.Camera.FocalLength;
                camera.HorizontalResolution = data.Camera.HorizontalResolution;
                camera.VerticalResolution = data.Camera.VerticalResolution;

                this.Camera = camera;

                cameraChanged = true;
            } else if (!data.Camera) {
                var cam: Camera = new Camera();

                cam.Name = 'Canon S100';
                cam.Id = 'j';
                cam.Type = 'catalog';
                cam.SensorWidth = 7.6;
                cam.SensorHeight = 5.7;
                cam.FocalLength = 5.2;
                cam.HorizontalResolution = 4000;
                cam.VerticalResolution = 3000;

                this.Camera = cam;
            }

            this.LocationName = data.LocationName;

            this._data = data;

            // Propagate Update Event
            //this.onModelUpdated.trigger('dataChange');

            if (cameraChanged) {
                //
            }
        }
    }

    SaveProperty(prop: any, propName: string): void {
        this.handle.setValue(propName, prop)
            .catch(function (error: any): void {
                // TODO how should we display error?
                console.log('Flight plan property save error. ' + error);
            });
    }

    Update(data: any): void {
        this.handle.update(data).catch((error: any): void => {
            console.log(error);
        });
    }

    RemoveHandle(): void {
        this.handle.off(this.handle.EVENTS.DATA_CHANGED);
    }

    // quick and dirty serialization

    // static deserializeFromJSON(flightPlanJsonObject: any): FlightPlan {
    //     // convert json back to flightplan and commands
    //     //let flightPlan = new FlightPlan(new MockHandle(flightPlanJsonObject.flightPlan.data));

    //     let flightPlan = new FlightPlan();
    //     flightPlan.hydrate(flightPlanJsonObject.data);

    //     let commands: Array<Command> = (<Array<any>>(flightPlanJsonObject.commands)).map((cmdJson) => {
    //         return CommandFactory.createCommand(cmdJson.type, cmdJson.id, new MockHandle(cmdJson.data), cmdJson.isBase);
    //     });

    //     flightPlan.Commands = commands;

    //     return flightPlan;
    // }

    // serializeToJSON(): any {
    //     // convert flightplan, and commands to json for transport
    //     var flightPlanJson = { flightPlanId: this.id, data: this.handle.data };

    //     var commandsJson = this.Commands.map((cmd) => {
    //         return { type: cmd.Type, id: cmd.id, data: cmd.getHandle().data, isBase: cmd.isBase };
    //     });

    //     return { flightPlan: flightPlanJson, commands: commandsJson };
    // }

}

// 1) Get all flight plans for a given user
// 2) Load specific flight plan by name or id
// 3) Add new flight plan
// 4) Edit flight plan
// 5) Delete flight plan
// 6) Get most recently created flight plans
// 7) Get flight plans by type of drone
// 8) Get flight plans by type of camera

export default FlightPlan;

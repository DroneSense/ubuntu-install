import Command from '../Command';
import GeoPoint from '../GeoPoint';

// Most basic command type simply represents a location for the drone to fly towards
export class WaypointCommand extends Command {

    constructor(type: string, id: string, handle: any, public isBase: boolean) {
        super(type, id, handle, true);

        if (this.handle) {
            this.hydrate(this.handle.data);

            if (!isBase) {
                this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
            }
        }
    }

    // Location of the waypoint
    Position: GeoPoint;

    // In meters, above ground for takeoff point
    Altitude: number;

    // Altitude in MSL in meters
    AltitudeMSL: number;

    // Alitude in Height Above Ellipsoid in meters
    AltitudeHAE: number;

    // Ground elevation at takeoff point in MSL meters
    GroundElevationMSL: number;

    // Ground elevation at takeoff point in Height Above Ellipsoid in meters
    GroundElevationHAE: number;

    // Speed to fly to the waypoint
    FlightSpeed: number;

    // Heading to fly to the waypoint
    Heading: number;

    // Camera angle while flying toward waypoint
    CameraAngle: number;

    hydrate(data: any): boolean {

        if (_.isEmpty(data)) {
            console.log('data in waypoint command model is empty, come check me and figure out why');
            //this.handle.off(this.handle.EVENTS.DATA_CHANGED);
            //return;
        }

        if (data) {

            var dataChanged: boolean = false;

            dataChanged = super.hydrate(data);

            console.log('waypoint hydrate called');

            if (this.FlightSpeed !== data.FlightSpeed) {
                this.FlightSpeed = data.FlightSpeed;
                dataChanged = true;
            }

            if (this.Altitude !== data.Altitude) {
                this.Altitude = data.Altitude;
                dataChanged = true;
            }

            if (this.AltitudeMSL !== data.AltitudeMSL) {
                this.AltitudeMSL = data.AltitudeMSL;
                dataChanged = true;
            }

            if (this.AltitudeHAE !== data.AltitudeHAE) {
                this.AltitudeHAE = data.AltitudeHAE;
                dataChanged = true;
            }

            if (this.GroundElevationMSL !== data.GroundElevationMSL) {
                this.GroundElevationMSL = data.GroundElevationMSL;
                dataChanged = true;
            }

            if (this.GroundElevationHAE !== data.GroundElevationHAE) {
                this.GroundElevationHAE = data.GroundElevationHAE;
                dataChanged = true;
            }

            if (!this.Position ||
                this.Position.lat !== data.Position.lat ||
                this.Position.lng !== data.Position.lng) {
                this.Position = new GeoPoint(data.Position.lat, data.Position.lng);
                dataChanged = true;
            }

            if (dataChanged && !this.isBase) {
                //this.onModelUpdated.trigger('dataChanged');
            }

            return dataChanged;

        }
    }
}

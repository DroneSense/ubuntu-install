import { WaypointCommand } from './WaypointCommand';

export class SensorCaptureCommand extends WaypointCommand {

    constructor(type: string, id: string, handle: any, public isBase: boolean) {
        super(type, id, handle, true);

        if (this.handle) {
            this.hydrate(this.handle.data);

            if (!isBase) {
                this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
            }
        }
    }

    // Heading of capture sensor stored in degrees
    Heading: number;

    // Angle of the capture sensor stored in degrees
    Pitch: number;

    // Roll of the capture sensor stored in degrees
    Roll: number;

    // Ground Sample Distance of current sensor capture point in cm/pixel
    GSD: number;

    hydrate(data: any): boolean {

        if (_.isEmpty(data)) {
            this.handle.off(this.handle.EVENTS.DATA_CHANGED);
            return;
        }

        if (data) {

            var dataChanged: boolean = false;

            dataChanged = super.hydrate(data);

            if (this.Heading !== data.Heading) {
                this.Heading = data.Heading;
                dataChanged = true;
            }

            if (this.Pitch !== data.Pitch) {
                this.Pitch = data.Pitch;
                dataChanged = true;
            }

            if (this.Roll !== data.Roll) {
                this.Roll = data.Roll;
                dataChanged = true;
            }

            if (dataChanged && !this.isBase) {
                //this.onModelUpdated.trigger('dataChanged');
            }

            return dataChanged;

        }
    }

}

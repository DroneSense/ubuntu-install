import BackboneEvents = require('backbone-events-standalone');
import { User } from './User';

export interface IModelBaseEvents {
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'propertyChanged', callback?: (propName: string, propValue: any) => void, context?: any): any;
    once(events: string, callback: Function, context?: any): any;
    off(eventName?: string, callback?: Function, context?: any): any;
}

export class ModelBase implements IModelBaseEvents {

    on: (eventName: string, callback?: Function, context?: any) => any;
    once: (events: string, callback: Function, context?: any) => any;
    off: (eventName?: string, callback?: Function, context?: any) => any;
    protected trigger: (eventName: string, ...args: any[]) => any;

    handle: any;

    // ID assigned from firebase
    // ID: string;
    get ID(): string {
        return this.handle.id;
    }

    // CreateDate: Date;
    private _createDate: Date;

    get CreateDate(): Date {
        return this._createDate;
    }
    set CreateDate(value: Date) {
        if (this.handle) {
            this.handle.setValue('CreateDate', value);
        } else {
            this._createDate = value;
        }
    }

    // ModifiedDate: Date;
    private _modifiedDate: Date;

    get ModifiedDate(): Date {
        return this._modifiedDate;
    }
    set ModifiedDate(value: Date) {
        if (this.handle) {
            this.handle.setValue('ModifiedDate', value);
        } else {
            this._modifiedDate = value;
        }
    }

    // CreatedUser: User;
    private _createdUser: User;

    get CreatedUser(): User {
        return this._createdUser;
    }
    set CreatedUser(value: User) {
        if (this.handle) {
            this.handle.setValue('CreatedUser', value);
        } else {
            this._createdUser = value;
        }
    }

    // ModifiedUser: User;
    private _modifiedUser: User;

    get ModifiedUser(): User {
        return this._modifiedUser;
    }
    set ModifiedUser(value: User) {
        if (this.handle) {
            this.handle.setValue('ModifiedUser', value);
        } else {
            this._modifiedUser = value;
        }
    }

    constructor();
    constructor(handle: any)
    constructor(handle?: any) {

        if (this.handle) {
            this.handle = handle;
        }
    }

    hydrate(data: any): void {
        if (data) {

            if (this.CreateDate !== data.CreateDate) {
                this._createDate = data.CreateDate;
                this.trigger('CreateDate', this.CreateDate);
            }

            if (this.ModifiedDate !== data.ModifiedDate) {
                this._modifiedDate = data.ModifiedDate;
                this.trigger('ModifiedDate', this.ModifiedDate);
            }

            this.CreatedUser = data.CreatedUser;
            this.ModifiedUser = data.ModifiedUser;
        }
    }
}

BackboneEvents.mixin(ModelBase.prototype);

export default ModelBase;

import ModelBase from './ModelBase';
import Camera from './Camera';
import Drone from './Drone';
import * as Enums from '../common/Enums';
import { Account } from './Account';
import { Address } from './Address';


// User Profile with their settings
export class User extends ModelBase {

    // FirstName: string;
    private _firstName: string;

    get FirstName(): string {
        return this._firstName;
    }
    set FirstName(value: string) {
        if (this.handle) {
            this.handle.setValue('FirstName', value);
        } else {
            this._firstName = value;
        }
    }

    // LastName: string;
    private _lastName: string;

    get LastName(): string {
        return this._lastName;
    }
    set LastName(value: string) {
        if (this.handle) {
            this.handle.setValue('LastName', value);
        } else {
            this._lastName = value;
        }
    }

    // Email: string;
    private _email: string;

    get Email(): string {
        return this._email;
    }
    set Email(value: string) {
        if (this.handle) {
            this.handle.setValue('Email', value);
        } else {
            this._email = value;
        }
    }

    // TimeZone: string;
    private _timeZone: string;

    get TimeZone(): string {
        return this._timeZone;
    }
    set TimeZone(value: string) {
        if (this.handle) {
            this.handle.setValue('TimeZone', value);
        } else {
            this._timeZone = value;
        }
    }

    // Preference whether to display values in metric or standard
    // UnitPreference: string = 'Metric';
    private _unitPreference: string;

    get UnitPreference(): string {
        return this._unitPreference;
    }
    set UnitPreference(value: string) {
        if (this.handle) {
            this.handle.setValue('UnitPreference', value);
        } else {
            this._unitPreference = value;
        }
    }

    // Whether to display GPS coordinates in decimal or degrees
    // CoordinatePreference: string = 'Decimal';
    private _coordinatePreference: string;

    get CoordinatePreference(): string {
        return this._coordinatePreference;
    }
    set CoordinatePreference(value: string) {
        if (this.handle) {
            this.handle.setValue('CoordinatePreference', value);
        } else {
            this._coordinatePreference = value;
        }
    }

    // User avatar url string
    // AvatarUrl: string;
    private _avatarUrl: string;

    get AvatarUrl(): string {
        return this._avatarUrl;
    }
    set AvatarUrl(value: string) {
        if (this.handle) {
            this.handle.setValue('AvatarUrl', value);
        } else {
            this._avatarUrl = value;
        }
    }

    // List of accounts the user is on
    Accounts: Array<Account>;

    // Name of last selected accounts
    // LastLoadedAccountName: string;
    private _lastLoadedAccountName: string;

    get LastLoadedAccountName(): string {
        return this._lastLoadedAccountName;
    }
    set LastLoadedAccountName(value: string) {
        if (this.handle) {
            this.handle.setValue('LastLoadedAccountName', value);
        } else {
            this._lastLoadedAccountName = value;
        }
    }

    // CertificateType: string;
    private _certificateType: string;

    get CertificateType(): string {
        return this._certificateType;
    }
    set CertificateType(value: string) {
        if (this.handle) {
            this.handle.setValue('CertificateType', value);
        } else {
            this._certificateType = value;
        }
    }

    // CertificateNumber: string;
    private _certificateNumber: string;

    get CertificateNumber(): string {
        return this._certificateNumber;
    }
    set CertificateNumber(value: string) {
        if (this.handle) {
            this.handle.setValue('CertificateNumber', value);
        } else {
            this._certificateNumber = value;
        }
    }

    // HireDate: Date;
    private _hireDate: string;

    get HireDate(): string {
        return this._hireDate;
    }
    set HireDate(value: string) {
        if (this.handle) {
            this.handle.setValue('HireDate', value);
        } else {
            this._hireDate = value;
        }
    }

    // User profile address
    // Address: Address;
    private _address: Address;

    get Address(): Address {
        return this._address;
    }
    set Address(value: Address) {
        if (this.handle) {
            this.handle.setValue('Address', value);
        } else {
            this._address = value;
        }
    }

    // Non-stored fields
    UserInitials: string;

    UserName: string;

    constructor(handle: any) {
        super();

        if (handle) {
            super(handle);

            this.hydrate(handle.data);

            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate, this);
        }
    }

    hydrate(data: any): void {

        super.hydrate(data);

        if (data) {

            if (this.FirstName !== data.FirstName) {
                this._firstName = data.FirstName;
                this.trigger('propertyChanged', 'FirstName', this.FirstName);
            }

            if (this.LastName !== data.LastName) {
                this._lastName = data.LastName;
                this.trigger('propertyChanged', 'LastName', this.LastName);
            }

            if (this.Email !== data.Email) {
                this._email = data.Email;
                this.trigger('propertyChanged', 'Email', this.Email);
            }

            if (this.TimeZone !== data.TimeZone) {
                this._timeZone = data.TimeZone;
                this.trigger('propertyChanged', 'TimeZone', this.TimeZone);
            }

            if (this.UnitPreference !== data.UnitPreference) {
                this._unitPreference = data.UnitPreference;
                this.trigger('propertyChanged', 'UnitPreference', this.UnitPreference);
            }

            if (this.CoordinatePreference !== data.CoordinatePreference) {
                this._coordinatePreference = data.CoordinatePreference;
                this.trigger('propertyChanged', 'CoordinatePreference', this.CoordinatePreference);
            }

            if (this.AvatarUrl !== data.AvatarUrl) {
                this._avatarUrl = data.AvatarUrl;
                this.trigger('propertyChanged', 'AvatarUrl', this.AvatarUrl);
            }

            this.Accounts = data.Accounts;

            if (this.LastLoadedAccountName !== data.LastLoadedAccountName) {
                this._lastLoadedAccountName = data.LastLoadedAccountName;
                this.trigger('propertyChanged', 'LastLoadedAccountName', this.LastLoadedAccountName);
            }

            if (this.CertificateType !== data.CertificateType) {
                this._certificateType = data.CertificateType;
                this.trigger('propertyChanged', 'CertificateType', this.CertificateType);
            }

            if (this.CertificateNumber !== data.CertificateNumber) {
                this._certificateNumber = data.CertificateNumber;
                this.trigger('propertyChanged', 'CertificateNumber', this.CertificateNumber);
            }

            if (this.HireDate !== data.HireDate) {
                this._hireDate = data.HireDate;
                this.trigger('propertyChanged', 'HireDate', this.HireDate);
            }

            // TODO: Review usage of complex object hydration
            if (this.Address !== data.Address) {
                let newAddress: Address = new Address();
                newAddress.hydrate(data.Address);
                this._address = newAddress;
                this.trigger('propertyChanged', 'Address', this.Address);
            }

            this.UserInitials = data.firstName.charAt(0) + data.lastName.charAt(0);
            this.UserName = data.firstName + ' ' + data.lastName;
        }

    }

    isMetric(): boolean {
        if (this.UnitPreference && this.UnitPreference === 'Metric') {
            return true;
        } else {
            return false;
        }
    }
}

export default User;

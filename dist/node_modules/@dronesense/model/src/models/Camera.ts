import { Conversions } from '../common/Utility';

export class CameraBase {
    // User or Catalog
    Type: string;

    // Id assigned from firebase
    Id: string;

    // Name of camera
    Name: string;

    constructor() {
        //
    }
}

// Camera
export class Camera extends CameraBase {

    // Focal Length in mm
    FocalLength: number;

    // Sensor Height in mm
    SensorHeight: number;

    // Sensor Width in mm
    SensorWidth: number;

    // Horizontal pixel count
    HorizontalResolution: number;

    // Vertical Pixel count
    VerticalResolution: number;

    // Size of individual image in MB
    ImageSize: number;

    handle: any;

    private _data: any = {};

    constructor(id?: string, handle?: any, type?: string) {
        super();

        this.Id = id;
        this.handle = handle;
        this.Type = type;

        if (handle) {
            this.hydrate(handle.data);
            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
        }
    }

    getHalfAngleX(): number {
        return Math.atan(this.SensorWidth / (2 * this.FocalLength));
    }

    getHalfAngleY(): number {
        return Math.atan(this.SensorHeight / (2 * this.FocalLength));
    }

    getGSD(altitudeAGL: number): number {
        return 100 * (this.getHorizontalCoverage(altitudeAGL) / this.HorizontalResolution);
    }

    getHorizontalCoverage(altitudeAGL: number): number {
        return (2 * altitudeAGL * Math.tan(Conversions.toRadians(this.getHorizontalFOV() / 2)));
    }

    // Calculations for FOV
    getHorizontalFOV(): number {
        return Conversions.toDegrees((2 * Math.atan(this.SensorWidth / (2 * this.FocalLength))));
    }

    hydrate(data: any): void {

        //if (_.isEmpty(data)) {
        //    this.handle.off(this.handle.EVENTS.DATA_CHANGED);
        //    return;
        //}

        if (data) {

            var dataChanged: boolean = false;

            if (this._data.Name !== data.Name) {
                this.Name = data.Name;
                dataChanged = true;
            }

            if (this._data.FocalLength !== data.FocalLength) {
                this.FocalLength = data.FocalLength;
                dataChanged = true;
            }

            if (this._data.SensorHeight !== data.SensorHeight) {
                this.SensorHeight = data.SensorHeight;
                dataChanged = true;
            }

            if (this._data.SensorWidth !== data.SensorWidth) {
                this.SensorWidth = data.SensorWidth;
                dataChanged = true;
            }

            if (this._data.HorizontalResolution !== data.HorizontalResolution) {
                this.HorizontalResolution = data.HorizontalResolution;
                dataChanged = true;
            }

            if (this._data.VerticalResolution !== data.VerticalResolution) {
                this.VerticalResolution = data.VerticalResolution;
                dataChanged = true;
            }

            if (this._data.ImageSize !== data.ImageSize) {
                this.ImageSize = data.ImageSize;
                dataChanged = true;
            }

            if (this._data.Type !== data.Type) {
                this.Type = data.Type;
                dataChanged = true;
            }

            this._data = data;

            if (dataChanged) {
                //
            }
        }
    }

    SaveProperty(prop: any, propName: string): void {
        this.handle.setValue(propName, prop)
            .catch((error: any): void => {
                // TODO how should we display error?
                console.log(error);
            });
    }

    Update(data: any): void {
        this.handle.update(data).catch((error: any): void => {
            console.log(error);
        });
    }

}

export default Camera;

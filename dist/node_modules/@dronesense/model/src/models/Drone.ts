export class DroneBase {
    // User or Catalog
    Type: string;

    // Id assigned from firebase
    Id: string;

    // Name of drone
    Name: string;

    constructor() {
        //
    }
}

// Drone
export class Drone extends DroneBase {

    // In minutes
    Endurance: number;

    // In mAH
    BatterySize: number;

    // In grams
    PayloadCapacity: number;

    // Number of cells in battery
    BatteryType: any;

    // Drone frame type
    FrameType: any;

    // Autopilot Type
    AutopilotType: any;

    handle: any;

    private _data: any = {};

    constructor(id?: string, handle?: any) {
        super();

        this.Id = id;
        this.handle = handle;

        if (handle) {
            this.hydrate(handle.data);
            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
        }
    }

    hydrate(data: any): void {

        //if (_.isEmpty(data)) {
        //    this.handle.off(this.handle.EVENTS.DATA_CHANGED);
        //    return;
        //}

        if (data) {

            var dataChanged: boolean = false;

            if (this._data.Name !== data.Name) {
                this.Name = data.Name;
                dataChanged = true;
            }

            if (this._data.Endurance !== data.Endurance) {
                this.Endurance = data.Endurance;
                dataChanged = true;
            }

            if (this._data.BatterySize !== data.BatterySize) {
                this.BatterySize = data.BatterySize;
                dataChanged = true;
            }

            if (this._data.PayloadCapacity !== data.PayloadCapacity) {
                this.PayloadCapacity = data.PayloadCapacity;
                dataChanged = true;
            }

            if (this._data.BatteryType !== data.BatteryType) {
                this.BatteryType = data.BatteryType;
                dataChanged = true;
            }

            if (this._data.FrameType !== data.FrameType) {
                this.FrameType = data.FrameType;
                dataChanged = true;
            }

            if (this._data.AutopilotType !== data.AutopilotType) {
                this.AutopilotType = data.AutopilotType;
                dataChanged = true;
            }

            if (this._data.Type !== data.Type) {
                this.Type = data.Type;
                dataChanged = true;
            }

            this._data = data;

            if (dataChanged) {
                //
            }
        }
    }

    SaveProperty(prop: any, propName: string): void {
        this.handle.setValue(propName, prop)
            .catch((error: any): void => {
                // TODO how should we display error?
                console.log(error);
            });
    }

    Update(data: any): void {
        this.handle.update(data).catch((error: any): void => {
            console.log(error);
        });
    }

}

export default Drone;

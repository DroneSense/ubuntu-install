import ModelBase from './ModelBase';

// Base Class for all commands
export class Command extends ModelBase {

    // String type of the command
    Type: string;

    // The order within the command list of this command
    Order: number;

    // Name of the command
    Name: string;

    // Flag to indicate if the command is expanded
    Expanded: boolean;

    constructor(type: string, id: string, handle: any, public isBase: boolean) {
        super(handle);

        if (this.handle) {
            this.hydrate(this.handle.data);

            if (!isBase) {
                this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
            }
        }
    }

    hydrate(data: any): boolean {

        if (data) {

            var dataChanged: boolean = false;

            if (this.Name !== data.Name) {
                this.Name = data.Name;
                dataChanged = true;
            }

            if (this.Expanded !== data.Expanded) {
                this.Expanded = data.Expanded;
                dataChanged = true;
            }

            if (this.Order !== data.Order) {
                this.Order = data.Order;
                dataChanged = true;
            }

            if (this.Type !== data.Type) {
                this.Type = data.Type;
                dataChanged = true;
            }

            if (dataChanged && !this.isBase) {
                //this.onModelUpdated.trigger('dataChanged');
            }

            return dataChanged;

        }
    }

    SaveProperty(prop: any, propName: string): void {
        this.handle.setValue(propName, prop)
            .catch((error: any): void => {
                // TODO how should we display error?
                console.log(error);
        });
    }

    UpdateProperties(props: Object): void {
        this.handle.update(props).catch((error: any): void => {
            console.log(error);
        });
    }

    SaveOrder(order: number): void {
        this.handle.setValue('Order', order)
            .catch((error: any): void => {
                // TODO how should we display error?
                console.log(error);
            });
    }

    RemoveHandle(): void {
        this.handle.off(this.handle.EVENTS.DATA_CHANGED);
    }
}

export default Command;

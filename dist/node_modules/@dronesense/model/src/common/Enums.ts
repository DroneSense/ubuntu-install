// Enum for unit of measurement preference
export enum Unit { Standard, Metric }

// Enum for coordinate preference format
export enum CoordinatePreference { Decimal, Degrees }

// Position setting for FollowMe mode
export enum PositionType { North, RelativeToSubjectCourse }

// Direction for Circle Command
export enum CircleDirection {
    'Clockwise',
    'CounterClockwise'
}

// Frame type of the drone
export enum FrameType {
    Quadcopter,
    Hexacopter,
    Octocopter,
    Airplane
}

// Battery cell count
export enum BatteryType {
    LiPo3S,
    LiPo4S,
    LiPo5S,
    LiPo6S,
    LiPo7S,
    LiPo8S
}

// Autopilot Version - TODO- Expand to include details needed for GS
export enum AutopilotType {
    'APM',
    '3DR Pixhawk',
    'DJI'
}

export enum HeadingMode {
    'Follow Flight Path',
    'Fixed Heading'
}

export enum AltGSDMode {
    'Altitude',
    'GSD'
}

export enum POIHeadingModes {
    'Toward Center',
    'Along Flight Path',
    'Fixed Heading',
    'Away from Center'
}

export enum PhotoIntervalMode {
    'Degrees',
    'Distance',
    'Time'
}

export class EnumEx {
    static getNames(e: any): Array<string> {
        var a: Array<string> = [];
        for (var val in e) {
            if (isNaN(parseInt(val, 10))) {
                a.push(val);
            }
        }
        return a;
    }

    static getValues(e: any): Array<number> {
        var a: Array<number> = [];
        for (var val in e) {
            if (!isNaN(parseInt(val, 10))) {
                a.push(parseInt(val, 10));
            }
        }
        return a;
    }
}

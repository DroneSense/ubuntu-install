export interface ILiteEvent<T> {
    on(handler: { (data?: T): void }): any;
    off(handler: { (data?: T): void }): any;
}

export class LiteEvent<T> implements ILiteEvent<T> {
    private handlers: { (data?: T): void; }[] = [];

    public on(handler: { (data?: T): void }): any {
        this.handlers.push(handler);
    }

    public off(handler: { (data?: T): void }): any {
        this.handlers = this.handlers.filter((h: any): boolean => {
            return h !== handler;
        });
    }

    public trigger(data?: T): void {
        if (this.handlers) {
            this.handlers.slice(0).forEach(h => h(data));
        }
    }
}

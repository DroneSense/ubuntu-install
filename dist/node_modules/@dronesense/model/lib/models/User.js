"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ModelBase_1 = require('./ModelBase');
var Address_1 = require('./Address');
var User = (function (_super) {
    __extends(User, _super);
    function User(handle) {
        _super.call(this);
        if (handle) {
            _super.call(this, handle);
            this.hydrate(handle.data);
            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate, this);
        }
    }
    Object.defineProperty(User.prototype, "FirstName", {
        get: function () {
            return this._firstName;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('FirstName', value);
            }
            else {
                this._firstName = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "LastName", {
        get: function () {
            return this._lastName;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('LastName', value);
            }
            else {
                this._lastName = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "Email", {
        get: function () {
            return this._email;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Email', value);
            }
            else {
                this._email = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "TimeZone", {
        get: function () {
            return this._timeZone;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('TimeZone', value);
            }
            else {
                this._timeZone = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "UnitPreference", {
        get: function () {
            return this._unitPreference;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('UnitPreference', value);
            }
            else {
                this._unitPreference = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "CoordinatePreference", {
        get: function () {
            return this._coordinatePreference;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('CoordinatePreference', value);
            }
            else {
                this._coordinatePreference = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "AvatarUrl", {
        get: function () {
            return this._avatarUrl;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('AvatarUrl', value);
            }
            else {
                this._avatarUrl = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "LastLoadedAccountName", {
        get: function () {
            return this._lastLoadedAccountName;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('LastLoadedAccountName', value);
            }
            else {
                this._lastLoadedAccountName = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "CertificateType", {
        get: function () {
            return this._certificateType;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('CertificateType', value);
            }
            else {
                this._certificateType = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "CertificateNumber", {
        get: function () {
            return this._certificateNumber;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('CertificateNumber', value);
            }
            else {
                this._certificateNumber = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "HireDate", {
        get: function () {
            return this._hireDate;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('HireDate', value);
            }
            else {
                this._hireDate = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "Address", {
        get: function () {
            return this._address;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Address', value);
            }
            else {
                this._address = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    User.prototype.hydrate = function (data) {
        _super.prototype.hydrate.call(this, data);
        if (data) {
            if (this.FirstName !== data.FirstName) {
                this._firstName = data.FirstName;
                this.trigger('propertyChanged', 'FirstName', this.FirstName);
            }
            if (this.LastName !== data.LastName) {
                this._lastName = data.LastName;
                this.trigger('propertyChanged', 'LastName', this.LastName);
            }
            if (this.Email !== data.Email) {
                this._email = data.Email;
                this.trigger('propertyChanged', 'Email', this.Email);
            }
            if (this.TimeZone !== data.TimeZone) {
                this._timeZone = data.TimeZone;
                this.trigger('propertyChanged', 'TimeZone', this.TimeZone);
            }
            if (this.UnitPreference !== data.UnitPreference) {
                this._unitPreference = data.UnitPreference;
                this.trigger('propertyChanged', 'UnitPreference', this.UnitPreference);
            }
            if (this.CoordinatePreference !== data.CoordinatePreference) {
                this._coordinatePreference = data.CoordinatePreference;
                this.trigger('propertyChanged', 'CoordinatePreference', this.CoordinatePreference);
            }
            if (this.AvatarUrl !== data.AvatarUrl) {
                this._avatarUrl = data.AvatarUrl;
                this.trigger('propertyChanged', 'AvatarUrl', this.AvatarUrl);
            }
            this.Accounts = data.Accounts;
            if (this.LastLoadedAccountName !== data.LastLoadedAccountName) {
                this._lastLoadedAccountName = data.LastLoadedAccountName;
                this.trigger('propertyChanged', 'LastLoadedAccountName', this.LastLoadedAccountName);
            }
            if (this.CertificateType !== data.CertificateType) {
                this._certificateType = data.CertificateType;
                this.trigger('propertyChanged', 'CertificateType', this.CertificateType);
            }
            if (this.CertificateNumber !== data.CertificateNumber) {
                this._certificateNumber = data.CertificateNumber;
                this.trigger('propertyChanged', 'CertificateNumber', this.CertificateNumber);
            }
            if (this.HireDate !== data.HireDate) {
                this._hireDate = data.HireDate;
                this.trigger('propertyChanged', 'HireDate', this.HireDate);
            }
            if (this.Address !== data.Address) {
                var newAddress = new Address_1.Address();
                newAddress.hydrate(data.Address);
                this._address = newAddress;
                this.trigger('propertyChanged', 'Address', this.Address);
            }
            this.UserInitials = data.firstName.charAt(0) + data.lastName.charAt(0);
            this.UserName = data.firstName + ' ' + data.lastName;
        }
    };
    User.prototype.isMetric = function () {
        if (this.UnitPreference && this.UnitPreference === 'Metric') {
            return true;
        }
        else {
            return false;
        }
    };
    return User;
}(ModelBase_1.default));
exports.User = User;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = User;

//# sourceMappingURL=User.js.map

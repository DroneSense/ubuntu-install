"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ModelBase_1 = require('./ModelBase');
var Hardware = (function (_super) {
    __extends(Hardware, _super);
    function Hardware(handle) {
        _super.call(this);
        if (handle) {
            _super.call(this, handle);
            this.hydrate(handle.data);
            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate, this);
        }
    }
    Object.defineProperty(Hardware.prototype, "Name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Name', value);
            }
            else {
                this._name = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hardware.prototype, "Serial", {
        get: function () {
            return this._serial;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Serial', value);
            }
            else {
                this._serial = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hardware.prototype, "Status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Status', value);
            }
            else {
                this._status = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hardware.prototype, "Notes", {
        get: function () {
            return this._notes;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Notes', value);
            }
            else {
                this._notes = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Hardware.prototype.hydrate = function (data) {
        _super.prototype.hydrate.call(this, data);
        if (data) {
            if (this.Name !== data.Name) {
                this._name = data.Name;
                this.trigger('propertyChanged', 'Name', this.Name);
            }
            if (this.Serial !== data.Serial) {
                this._serial = data.Serial;
                this.trigger('propertyChanged', 'Serial', this.Serial);
            }
            if (this.Status !== data.Status) {
                this._status = data.Status;
                this.trigger('propertyChanged', 'Status', this.Status);
            }
            if (this.Notes !== data.Notes) {
                this._notes = data.Notes;
                this.trigger('propertyChanged', 'Notes', this.Notes);
            }
        }
    };
    return Hardware;
}(ModelBase_1.default));
exports.Hardware = Hardware;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Hardware;

//# sourceMappingURL=Hardware.js.map

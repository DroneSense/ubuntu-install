import { User } from './User';
export interface IModelBaseEvents {
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'propertyChanged', callback?: (propName: string, propValue: any) => void, context?: any): any;
    once(events: string, callback: Function, context?: any): any;
    off(eventName?: string, callback?: Function, context?: any): any;
}
export declare class ModelBase implements IModelBaseEvents {
    on: (eventName: string, callback?: Function, context?: any) => any;
    once: (events: string, callback: Function, context?: any) => any;
    off: (eventName?: string, callback?: Function, context?: any) => any;
    protected trigger: (eventName: string, ...args: any[]) => any;
    handle: any;
    ID: string;
    private _createDate;
    CreateDate: Date;
    private _modifiedDate;
    ModifiedDate: Date;
    private _createdUser;
    CreatedUser: User;
    private _modifiedUser;
    ModifiedUser: User;
    constructor();
    constructor(handle: any);
    hydrate(data: any): void;
}
export default ModelBase;

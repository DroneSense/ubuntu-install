"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ModelBase_1 = require('./ModelBase');
var GeoPoint_1 = require('./GeoPoint');
var Camera_1 = require('./Camera');
var Drone_1 = require('./Drone');
var MapState = (function (_super) {
    __extends(MapState, _super);
    function MapState() {
        _super.apply(this, arguments);
    }
    return MapState;
}(ModelBase_1.default));
exports.MapState = MapState;
var FlightPlan = (function (_super) {
    __extends(FlightPlan, _super);
    function FlightPlan(handle) {
        _super.call(this);
        this._distance = 0;
        this._navPointCount = 0;
        this._flightTime = 0;
        this._highElevation = 0;
        this._lowElevation = 0;
        this._maxDistance = 0;
        this.DefaultAltitudeMSL = true;
        this.DefaultWaypointAltitude = 50;
        this.DefaultFlightSpeed = 5;
        this._data = {};
        if (this.handle) {
            _super.call(this, handle);
            this.hydrate(this.handle.data);
            this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
        }
    }
    Object.defineProperty(FlightPlan.prototype, "Saved", {
        get: function () {
            return this._saved;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Saved', value);
            }
            else {
                this._saved = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "Name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Name', value);
            }
            else {
                this._name = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "ScheduledDate", {
        get: function () {
            return this._scheduledDate;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('ScheduledDate', value);
            }
            else {
                this._scheduledDate = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "Distance", {
        get: function () {
            return this._distance;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Distance', value);
            }
            else {
                this._distance = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "NavPointCount", {
        get: function () {
            return this._navPointCount;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('NavPointCount', value);
            }
            else {
                this._navPointCount = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "FlightTime", {
        get: function () {
            return this._flightTime;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('FlightTime', value);
            }
            else {
                this._flightTime = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "HighElevation", {
        get: function () {
            return this._highElevation;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('HighElevation', value);
            }
            else {
                this._highElevation = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "LowElevation", {
        get: function () {
            return this._lowElevation;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('LowElevation', value);
            }
            else {
                this._lowElevation = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "ThumbnailUrl", {
        get: function () {
            return this._thumbnailUrl;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('ThumbnailUrl', value);
            }
            else {
                this._thumbnailUrl = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "LocationName", {
        get: function () {
            return this._locationName;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('LocationName', value);
            }
            else {
                this._locationName = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "LocationLatLng", {
        get: function () {
            return this._locationLatLng;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('LocationLatLng', value);
            }
            else {
                this._locationLatLng = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "MaxDistance", {
        get: function () {
            return this._maxDistance;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('MaxDistance', value);
            }
            else {
                this._maxDistance = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightPlan.prototype, "Notes", {
        get: function () {
            return this._notes;
        },
        set: function (value) {
            if (this.handle) {
                this.handle.setValue('Notes', value);
            }
            else {
                this._notes = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    FlightPlan.prototype.hydrate = function (data) {
        _super.prototype.hydrate.call(this, data);
        if (data) {
            var cameraChanged = false;
            if (data.Saved) {
                this.Saved = data.Saved;
            }
            else {
                this.Saved = false;
            }
            if (data.Name) {
                this.Name = data.Name;
            }
            if (data.MapZoomLevel) {
                this.MapZoomLevel = data.MapZoomLevel;
            }
            else {
                this.MapZoomLevel = 14;
            }
            if (data.MapCenterPoint) {
                this.MapCenterPoint = data.MapCenterPoint;
            }
            else {
                this.MapCenterPoint = new GeoPoint_1.default(30.2746903, -97.7402973);
            }
            if (data.NavPointCount) {
                this.NavPointCount = data.NavPointCount;
            }
            else {
                this.NavPointCount = 0;
            }
            if (data.FlightTime) {
                this.FlightTime = data.FlightTime;
            }
            else {
                this.FlightTime = 0;
            }
            if (data.Distance) {
                this.Distance = data.Distance;
            }
            else {
                this.Distance = 0;
            }
            if (data.MaxDistance) {
                this.MaxDistance = data.MaxDistance;
            }
            else {
                this.MaxDistance = 0;
            }
            if (data.HighElevation) {
                this.HighElevation = data.HighElevation;
            }
            else {
                this.HighElevation = 0;
            }
            if (data.LowElevation) {
                this.LowElevation = data.LowElevation;
            }
            else {
                this.LowElevation = 0;
            }
            if (data.Drone) {
                this.Drone = data.Drone;
                var drone = new Drone_1.default();
                drone.Name = data.Drone.Name;
                drone.Id = data.Drone.Id;
                drone.Type = data.Drone.Type;
                drone.Endurance = data.Drone.Endurance;
                drone.BatterySize = data.Drone.BatterySize;
                drone.BatteryType = data.Drone.BatteryType;
                drone.FrameType = data.Drone.FrameType;
                drone.AutopilotType = data.Drone.AutopilotType;
                this.Drone = drone;
            }
            else {
                var drone2 = new Drone_1.default();
                drone2.Name = '3DR Iris+';
                drone2.Id = 'a';
                drone2.Type = 'catalog';
                drone2.Endurance = 10;
                drone2.BatterySize = 5100;
                drone2.BatteryType = 'LiPo3S';
                drone2.FrameType = 'Quadcopter';
                drone2.AutopilotType = 'APM';
                this.Drone = drone2;
            }
            if (this._data.Camera !== data.Camera) {
                var camera = new Camera_1.default();
                camera.Name = data.Camera.Name;
                camera.Id = data.Camera.Id;
                camera.Type = data.Camera.Type;
                camera.SensorWidth = data.Camera.SensorWidth;
                camera.SensorHeight = data.Camera.SensorHeight;
                camera.FocalLength = data.Camera.FocalLength;
                camera.HorizontalResolution = data.Camera.HorizontalResolution;
                camera.VerticalResolution = data.Camera.VerticalResolution;
                this.Camera = camera;
                cameraChanged = true;
            }
            else if (!data.Camera) {
                var cam = new Camera_1.default();
                cam.Name = 'Canon S100';
                cam.Id = 'j';
                cam.Type = 'catalog';
                cam.SensorWidth = 7.6;
                cam.SensorHeight = 5.7;
                cam.FocalLength = 5.2;
                cam.HorizontalResolution = 4000;
                cam.VerticalResolution = 3000;
                this.Camera = cam;
            }
            this.LocationName = data.LocationName;
            this._data = data;
            if (cameraChanged) {
            }
        }
    };
    FlightPlan.prototype.SaveProperty = function (prop, propName) {
        this.handle.setValue(propName, prop)
            .catch(function (error) {
            console.log('Flight plan property save error. ' + error);
        });
    };
    FlightPlan.prototype.Update = function (data) {
        this.handle.update(data).catch(function (error) {
            console.log(error);
        });
    };
    FlightPlan.prototype.RemoveHandle = function () {
        this.handle.off(this.handle.EVENTS.DATA_CHANGED);
    };
    return FlightPlan;
}(ModelBase_1.default));
exports.FlightPlan = FlightPlan;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FlightPlan;

//# sourceMappingURL=FlightPlan.js.map

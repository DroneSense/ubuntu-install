"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Command_1 = require('../Command');
var GeoPoint_1 = require('../GeoPoint');
var WaypointCommand = (function (_super) {
    __extends(WaypointCommand, _super);
    function WaypointCommand(type, id, handle, isBase) {
        _super.call(this, type, id, handle, true);
        this.isBase = isBase;
        if (this.handle) {
            this.hydrate(this.handle.data);
            if (!isBase) {
                this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
            }
        }
    }
    WaypointCommand.prototype.hydrate = function (data) {
        if (_.isEmpty(data)) {
            console.log('data in waypoint command model is empty, come check me and figure out why');
        }
        if (data) {
            var dataChanged = false;
            dataChanged = _super.prototype.hydrate.call(this, data);
            console.log('waypoint hydrate called');
            if (this.FlightSpeed !== data.FlightSpeed) {
                this.FlightSpeed = data.FlightSpeed;
                dataChanged = true;
            }
            if (this.Altitude !== data.Altitude) {
                this.Altitude = data.Altitude;
                dataChanged = true;
            }
            if (this.AltitudeMSL !== data.AltitudeMSL) {
                this.AltitudeMSL = data.AltitudeMSL;
                dataChanged = true;
            }
            if (this.AltitudeHAE !== data.AltitudeHAE) {
                this.AltitudeHAE = data.AltitudeHAE;
                dataChanged = true;
            }
            if (this.GroundElevationMSL !== data.GroundElevationMSL) {
                this.GroundElevationMSL = data.GroundElevationMSL;
                dataChanged = true;
            }
            if (this.GroundElevationHAE !== data.GroundElevationHAE) {
                this.GroundElevationHAE = data.GroundElevationHAE;
                dataChanged = true;
            }
            if (!this.Position ||
                this.Position.lat !== data.Position.lat ||
                this.Position.lng !== data.Position.lng) {
                this.Position = new GeoPoint_1.default(data.Position.lat, data.Position.lng);
                dataChanged = true;
            }
            if (dataChanged && !this.isBase) {
            }
            return dataChanged;
        }
    };
    return WaypointCommand;
}(Command_1.default));
exports.WaypointCommand = WaypointCommand;

//# sourceMappingURL=WaypointCommand.js.map

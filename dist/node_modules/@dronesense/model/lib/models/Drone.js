"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DroneBase = (function () {
    function DroneBase() {
    }
    return DroneBase;
}());
exports.DroneBase = DroneBase;
var Drone = (function (_super) {
    __extends(Drone, _super);
    function Drone(id, handle) {
        _super.call(this);
        this._data = {};
        this.Id = id;
        this.handle = handle;
        if (handle) {
            this.hydrate(handle.data);
            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
        }
    }
    Drone.prototype.hydrate = function (data) {
        if (data) {
            var dataChanged = false;
            if (this._data.Name !== data.Name) {
                this.Name = data.Name;
                dataChanged = true;
            }
            if (this._data.Endurance !== data.Endurance) {
                this.Endurance = data.Endurance;
                dataChanged = true;
            }
            if (this._data.BatterySize !== data.BatterySize) {
                this.BatterySize = data.BatterySize;
                dataChanged = true;
            }
            if (this._data.PayloadCapacity !== data.PayloadCapacity) {
                this.PayloadCapacity = data.PayloadCapacity;
                dataChanged = true;
            }
            if (this._data.BatteryType !== data.BatteryType) {
                this.BatteryType = data.BatteryType;
                dataChanged = true;
            }
            if (this._data.FrameType !== data.FrameType) {
                this.FrameType = data.FrameType;
                dataChanged = true;
            }
            if (this._data.AutopilotType !== data.AutopilotType) {
                this.AutopilotType = data.AutopilotType;
                dataChanged = true;
            }
            if (this._data.Type !== data.Type) {
                this.Type = data.Type;
                dataChanged = true;
            }
            this._data = data;
            if (dataChanged) {
            }
        }
    };
    Drone.prototype.SaveProperty = function (prop, propName) {
        this.handle.setValue(propName, prop)
            .catch(function (error) {
            console.log(error);
        });
    };
    Drone.prototype.Update = function (data) {
        this.handle.update(data).catch(function (error) {
            console.log(error);
        });
    };
    return Drone;
}(DroneBase));
exports.Drone = Drone;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Drone;

//# sourceMappingURL=Drone.js.map

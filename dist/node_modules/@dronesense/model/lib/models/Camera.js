"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Utility_1 = require('../common/Utility');
var CameraBase = (function () {
    function CameraBase() {
    }
    return CameraBase;
}());
exports.CameraBase = CameraBase;
var Camera = (function (_super) {
    __extends(Camera, _super);
    function Camera(id, handle, type) {
        _super.call(this);
        this._data = {};
        this.Id = id;
        this.handle = handle;
        this.Type = type;
        if (handle) {
            this.hydrate(handle.data);
            handle.on(handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
        }
    }
    Camera.prototype.getHalfAngleX = function () {
        return Math.atan(this.SensorWidth / (2 * this.FocalLength));
    };
    Camera.prototype.getHalfAngleY = function () {
        return Math.atan(this.SensorHeight / (2 * this.FocalLength));
    };
    Camera.prototype.getGSD = function (altitudeAGL) {
        return 100 * (this.getHorizontalCoverage(altitudeAGL) / this.HorizontalResolution);
    };
    Camera.prototype.getHorizontalCoverage = function (altitudeAGL) {
        return (2 * altitudeAGL * Math.tan(Utility_1.Conversions.toRadians(this.getHorizontalFOV() / 2)));
    };
    Camera.prototype.getHorizontalFOV = function () {
        return Utility_1.Conversions.toDegrees((2 * Math.atan(this.SensorWidth / (2 * this.FocalLength))));
    };
    Camera.prototype.hydrate = function (data) {
        if (data) {
            var dataChanged = false;
            if (this._data.Name !== data.Name) {
                this.Name = data.Name;
                dataChanged = true;
            }
            if (this._data.FocalLength !== data.FocalLength) {
                this.FocalLength = data.FocalLength;
                dataChanged = true;
            }
            if (this._data.SensorHeight !== data.SensorHeight) {
                this.SensorHeight = data.SensorHeight;
                dataChanged = true;
            }
            if (this._data.SensorWidth !== data.SensorWidth) {
                this.SensorWidth = data.SensorWidth;
                dataChanged = true;
            }
            if (this._data.HorizontalResolution !== data.HorizontalResolution) {
                this.HorizontalResolution = data.HorizontalResolution;
                dataChanged = true;
            }
            if (this._data.VerticalResolution !== data.VerticalResolution) {
                this.VerticalResolution = data.VerticalResolution;
                dataChanged = true;
            }
            if (this._data.ImageSize !== data.ImageSize) {
                this.ImageSize = data.ImageSize;
                dataChanged = true;
            }
            if (this._data.Type !== data.Type) {
                this.Type = data.Type;
                dataChanged = true;
            }
            this._data = data;
            if (dataChanged) {
            }
        }
    };
    Camera.prototype.SaveProperty = function (prop, propName) {
        this.handle.setValue(propName, prop)
            .catch(function (error) {
            console.log(error);
        });
    };
    Camera.prototype.Update = function (data) {
        this.handle.update(data).catch(function (error) {
            console.log(error);
        });
    };
    return Camera;
}(CameraBase));
exports.Camera = Camera;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Camera;

//# sourceMappingURL=Camera.js.map

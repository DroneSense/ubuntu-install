"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ModelBase_1 = require('./ModelBase');
var Command = (function (_super) {
    __extends(Command, _super);
    function Command(type, id, handle, isBase) {
        _super.call(this, handle);
        this.isBase = isBase;
        if (this.handle) {
            this.hydrate(this.handle.data);
            if (!isBase) {
                this.handle.on(this.handle.EVENTS.DATA_CHANGED, this.hydrate.bind(this));
            }
        }
    }
    Command.prototype.hydrate = function (data) {
        if (data) {
            var dataChanged = false;
            if (this.Name !== data.Name) {
                this.Name = data.Name;
                dataChanged = true;
            }
            if (this.Expanded !== data.Expanded) {
                this.Expanded = data.Expanded;
                dataChanged = true;
            }
            if (this.Order !== data.Order) {
                this.Order = data.Order;
                dataChanged = true;
            }
            if (this.Type !== data.Type) {
                this.Type = data.Type;
                dataChanged = true;
            }
            if (dataChanged && !this.isBase) {
            }
            return dataChanged;
        }
    };
    Command.prototype.SaveProperty = function (prop, propName) {
        this.handle.setValue(propName, prop)
            .catch(function (error) {
            console.log(error);
        });
    };
    Command.prototype.UpdateProperties = function (props) {
        this.handle.update(props).catch(function (error) {
            console.log(error);
        });
    };
    Command.prototype.SaveOrder = function (order) {
        this.handle.setValue('Order', order)
            .catch(function (error) {
            console.log(error);
        });
    };
    Command.prototype.RemoveHandle = function () {
        this.handle.off(this.handle.EVENTS.DATA_CHANGED);
    };
    return Command;
}(ModelBase_1.default));
exports.Command = Command;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Command;

//# sourceMappingURL=Command.js.map

import GeoPoint from '../models/GeoPoint';
export declare class Conversions {
    static readableDistance(distance: number, isMetric: boolean): string;
    static readableElevation(elevation: number, isMetric: boolean): string;
    static metersToFeet(elevation: number): number;
    static feetToMeters(elevation: number): number;
    static cmToIn(cm: number): number;
    static inToCM(inches: number): number;
    static readableArea(area: number, isMetric: boolean): string;
    static readableSpeed(speed: number, isMetric: boolean): string;
    static geodesicArea(latLngs: Array<GeoPoint>): number;
    static readableCoordinate(coordinate: number): string;
    static formatCoordinate(coordinate: number, digits: number): number;
    static distanceToPoint(x1: number, y1: number, x2: number, y2: number): number;
    static bearingFromCoordinates(lat1: number, long1: number, lat2: number, long2: number): number;
    static destinationPoint(point: GeoPoint, bearing: number, distance: number, radius?: number): GeoPoint;
    static distanceTo(point1: GeoPoint, point2: GeoPoint): number;
    static distance2(lat1: number, lng1: number, lat2: number, lng2: number): number;
    static toRadians(degrees: number): number;
    static toDegrees(radians: number): number;
    static isOdd(num: number): boolean;
    static earthRadius(): number;
    static calculateHeight(xDistance: number, yDistance: number, xPixels: number): number;
    static roundToTwo(num: number): number;
    static newGuid(): string;
    static toInchesHG(mbPressure: number): number;
    static toMBPressure(inHg: number): number;
    static getResolution(zoomLevel: number, latitudeCorrected: boolean, latitude?: number): number;
    static toLeafletLatLng(coordinate: GeoPoint): GeoPoint;
    static toLeafletLatLngArray(geoPoints: Array<GeoPoint>): Array<GeoPoint>;
    static toGeoPointArray(latLngs: Array<GeoPoint>): Array<GeoPoint>;
    static getMaxDistance(latLngs: Array<GeoPoint>, takeoff: GeoPoint): number;
}
export declare class Sensor {
    static horizontalFOV(sensorWidth: number, focalLength: number): number;
    static verticalFOV(sensorHeight: number, focalLength: number): number;
    static calculateHorizontalCoverage(altitude: number, horizontalFOV: number): number;
    static calculateVerticalCoverage(altitude: number, verticalFOV: number): number;
}

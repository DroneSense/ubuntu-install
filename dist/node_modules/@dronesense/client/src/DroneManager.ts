import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IServerNodeClient } from './common/IServerNodeClient';
import { IDroneManager, constants as IDroneManagerConstants } from '@dronesense/core/lib/common/IDroneManager';
import { IDrone } from '@dronesense/core/lib/common/IDrone';
import { IDroneMetadata } from '@dronesense/core/lib/common/metadata/IDroneMetadata';

export class DroneManager extends ServerNodeClientController implements IDroneManager {
	private _eventHandlers = {
		droneCreated: (droneMetadata: IDroneMetadata) => {
			this.trigger(IDroneManagerConstants.events.DRONE_CREATED, droneMetadata);
		},
		droneDestroyed: (id: string) => {
			this.trigger(IDroneManagerConstants.events.DRONE_DESTROYED, id);
		}
	};

	constructor(serverNodeClient: IServerNodeClient) {
		super(serverNodeClient);
	}

	protected _onConnected(socket: IServerNodeClient): void {
		socket.on(IDroneManagerConstants.events.DRONE_CREATED, this._eventHandlers.droneCreated);
		socket.on(IDroneManagerConstants.events.DRONE_DESTROYED, this._eventHandlers.droneDestroyed);
    }

    protected _onDisconnected(socket: IServerNodeClient): void {
        socket.off(IDroneManagerConstants.events.DRONE_CREATED, this._eventHandlers.droneCreated);
		socket.off(IDroneManagerConstants.events.DRONE_DESTROYED, this._eventHandlers.droneDestroyed);
    }

	public getDrones(): Promise<Array<IDroneMetadata>> {
		return this.sendCommand<Array<IDroneMetadata>>(IDroneManagerConstants.commands.GET_DRONES);
	}
}

export default DroneManager;

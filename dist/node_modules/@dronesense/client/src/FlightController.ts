import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IFlightController, constants } from '@dronesense/core/lib/common/IFlightController';
import { FlightMode } from '@dronesense/core/lib/common/enums/FlightMode';
import { ITelemetry } from '@dronesense/core/lib/common/ITelemetry';
import { Telemetry } from './Telemetry';
import { ISettingsManager } from '@dronesense/core/lib/common/ISettingsManager';
import { SettingsManager } from './SettingsManager';
import { ISetting } from '@dronesense/core/lib/common/entities/ISetting';
import { IGuided } from '@dronesense/core/lib/common/IGuided';
import { Guided } from './Guided';
import { IOrbit } from '@dronesense/core/lib/common/IOrbit';
import { Orbit } from './Orbit';
import { IFlightPlanner } from '@dronesense/core/lib/common/IFlightPlanner';
import { FlightPlanner } from './FlightPlanner';
import { FlightPlan } from '@dronesense/model';
import { Autopilot } from '@dronesense/core/lib/common/enums/Autopilot';
import { Firmware } from '@dronesense/core/lib/common/enums/Firmware';
import { IHomePosition } from '@dronesense/core/lib/common/entities/IHomePosition';

export class FlightController extends ServerNodeClientController implements IFlightController {
	private _telemetry: Telemetry;
	private _settingsManager: SettingsManager;
	private _guided: Guided;
	private _orbit: Orbit;
    private _flightPlanner: FlightPlanner;

	constructor(serverNodeClient: IServerNodeClient) {
		super(serverNodeClient);

		this._telemetry = new Telemetry(serverNodeClient.spawn('/telemetry'));
		this._settingsManager = new SettingsManager(serverNodeClient.spawn('/settingsManager'));
		this._guided = new Guided(serverNodeClient.spawn('/guided'));
		this._orbit = new Orbit(serverNodeClient.spawn('/orbit'));
		this._flightPlanner = new FlightPlanner(serverNodeClient.spawn('/flightPlanner'));
	}

	public get Type(): Autopilot {
        return <Autopilot>(this._properties['Type']);
    }

    public get Version(): string {
        return <string>(this._properties['Version']);
    }

    public get Firmware(): Firmware {
        return <Firmware>(this._properties['Firmware']);
    }

	public get Telemetry(): ITelemetry {
		return this._telemetry;
	}

	public get SettingsManager(): ISettingsManager {
        return this._settingsManager;
    }

	public get Guided(): IGuided {
		return this._guided;
	}

	public get Orbit(): IOrbit {
		return this._orbit;
	}

	public get FlightPlanner(): IFlightPlanner {
        return this._flightPlanner;
    }

	public reboot(): Promise<void> {
		return this.sendCommand<void>(constants.commands.REBOOT_DRONE);
	}

	public calibrate(): Promise<void> {
		return this.sendCommand<void>(constants.commands.CALIBRATE_DRONE);
	}

	public arm(enable: boolean): Promise<void> {
		return this.sendCommand<void>(constants.commands.ARM_DRONE, enable);
	}

	public takeoff(altitudeAGL: number): Promise<void> {
		return this.sendCommand<void>(constants.commands.TAKEOFF, altitudeAGL);
	}

	public setFlightMode(flightMode: FlightMode): Promise<void> {
		return this.sendCommand<void>(constants.commands.SET_FLIGHT_MODE, flightMode);
	}

	public getHomePosition(): Promise<IHomePosition> {
		return this.sendCommand<IHomePosition>(constants.commands.GET_HOME_POSITION);
	}

    public setHomePosition(homePosition: IHomePosition): Promise<void> {
		return this.sendCommand<void>(constants.commands.SET_HOME_POSITION, homePosition);
	}

	public pause(pause: boolean): Promise<void> {
		return this.sendCommand<void>(constants.commands.SET_PAUSED, pause);
	}

	public enableAltitudeMSLOffset(enabled: boolean, altitudeMSLOffset?: number): Promise<void> {
		return this.sendCommand<void>(constants.commands.ENABLE_ALTITUDE_MSL_OFFSET, enabled, altitudeMSLOffset);
	}
}

export default FlightController;

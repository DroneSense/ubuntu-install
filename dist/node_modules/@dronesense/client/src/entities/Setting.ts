import { ISettingDelegate } from '@dronesense/core/lib/common/ISettingsManager';
import ISetting from '@dronesense/core/lib/common/entities/ISetting';
import * as Serialization from '@dronesense/core/lib/Utility/Serialization';

export class Setting implements ISetting {
    private _settingDelegate: ISettingDelegate;

    private _id: string;
    private _name: string;
    private _value: number;

    constructor() {
        // do nothing
    }

    get id(): string {
        return this._id;
    }

    get name(): string {
        return this._name;
    }

    get value(): number {
        return this._value;
    }

    set value(value: number) {
        this._value = value;
    }

    setValue(value: number): Promise<number> {
        return this._settingDelegate.setValue(this._id, value).then((newValue: number) => {
            this._value = newValue;
            return newValue;
        });
    }

    set delegate(delegate: ISettingDelegate) {
        this._settingDelegate = delegate;
    }

	// ICoding implementation

    get __type__(): string {
        return 'Setting';
    }
    initWithCoder(coder: Serialization.IDecoder) : void {
        this._id = coder.decodeStringForKey('id');
		this._name = coder.decodeStringForKey('name');
        this._value = coder.decodeNumberForKey('value');
    }
    encodeWithCoder(coder: Serialization.IEncoder) : void {
        // do nothing
    }
};

export default Setting;

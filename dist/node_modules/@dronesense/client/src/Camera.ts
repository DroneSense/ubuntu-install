import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { ICamera, constants as ICameraConstants } from '@dronesense/core/lib/common/ICamera';
import { DSError } from '@dronesense/core/lib/common/DSError';

export class Camera extends ServerNodeClientController implements ICamera {
    private _isTakingPicture: boolean;
    private _isRecording: boolean;

    private _eventHandlers = {
        takePictureStarted: () => {
            this._isTakingPicture = true;
            this.trigger(ICameraConstants.events.TAKE_PICTURE_STARTED);
        },
        takePictureFinished: () => {
            this._isTakingPicture = false;
            this.trigger(ICameraConstants.events.TAKE_PICTURE_FINISHED);
        },
        recordingStarted: () => {
            this._isRecording = true;
            this.trigger(ICameraConstants.events.RECORDING_STARTED);
        },
        recordingStopped: () => {
            this._isRecording = false;
            this.trigger(ICameraConstants.events.RECORDING_STOPPED);
        }
	};

    constructor(serverNodeClient: IServerNodeClient) {
        super(serverNodeClient);

        this._isTakingPicture = false;
        this._isRecording = false;
    }

    protected _onConnected(socket: IServerNodeClient): void {
        socket.on(ICameraConstants.events.TAKE_PICTURE_STARTED, this._eventHandlers.takePictureStarted);
        socket.on(ICameraConstants.events.TAKE_PICTURE_FINISHED, this._eventHandlers.takePictureFinished);
        socket.on(ICameraConstants.events.RECORDING_STARTED, this._eventHandlers.recordingStarted);
        socket.on(ICameraConstants.events.RECORDING_STOPPED, this._eventHandlers.recordingStopped);
    }

    protected _onDisconnected(socket: IServerNodeClient): void {
        socket.off(ICameraConstants.events.TAKE_PICTURE_STARTED, this._eventHandlers.takePictureStarted);
        socket.off(ICameraConstants.events.TAKE_PICTURE_FINISHED, this._eventHandlers.takePictureFinished);
        socket.off(ICameraConstants.events.RECORDING_STARTED, this._eventHandlers.recordingStarted);
        socket.off(ICameraConstants.events.RECORDING_STOPPED, this._eventHandlers.recordingStopped);
    }

    get IsTakingPicture(): boolean {
        return this._isTakingPicture;
    }

    get IsRecording(): boolean {
        return this._isRecording;
    }

    takePicture(): Promise<void> {
        return this.sendCommand<void>(ICameraConstants.commands.TAKE_PICTURE);
    }

    startRecording(): Promise<void> {
        return this.sendCommand<void>(ICameraConstants.commands.START_RECORDING);
    }

    stopRecording(): Promise<void> {
        return this.sendCommand<void>(ICameraConstants.commands.STOP_RECORDING);
    }
}

export default Camera;

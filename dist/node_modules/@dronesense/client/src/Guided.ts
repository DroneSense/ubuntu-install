import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IGuided, constants as IGuidedConstants } from '@dronesense/core/lib/common/IGuided';
import { IGuidedWaypoint } from '@dronesense/core/lib/common/entities/IGuidedWaypoint';
import { FlightPlan } from '@dronesense/model';
import { DSError } from '@dronesense/core/lib/common/DSError';

export class Guided extends ServerNodeClientController implements IGuided {
    private _waypoints: Array<IGuidedWaypoint>;
    private _currWaypointIdx: number;

	private _eventHandlers = {
        waypointAdded: (waypoint: IGuidedWaypoint, index: number) => {
            this._waypoints.splice(index, 0, waypoint);
            this.trigger(IGuidedConstants.events.WAYPOINT_ADDED, waypoint, index);
            this.trigger(IGuidedConstants.events.WAYPOINTS_CHANGED);
        },
        waypointRemoved: (index: number) => {
            this._waypoints.splice(index, 1);
            this.trigger(IGuidedConstants.events.WAYPOINT_REMOVED, index);
            this.trigger(IGuidedConstants.events.WAYPOINTS_CHANGED);
        },
        waypointError: (index: number, errorJson: string) => {
            this.trigger(IGuidedConstants.events.WAYPOINT_ERROR, index, DSError.fromJSON(errorJson));
        },
        waypointStarted: (index: number) => {
            this._currWaypointIdx = index;
            this.trigger(IGuidedConstants.events.WAYPOINT_STARTED, index);
        },
        waypointReached: (index: number) => {
            this._currWaypointIdx = index;
            this._waypoints[this._currWaypointIdx].isReached = true;
            this.trigger(IGuidedConstants.events.WAYPOINT_REACHED, index);
        }
	};

    constructor(serverNodeClient: IServerNodeClient) {
        super(serverNodeClient);

        this._waypoints = new Array<IGuidedWaypoint>();
        this._currWaypointIdx = -1;
    }

    protected _onConnected(socket: IServerNodeClient): void {
        this.sendCommand<{ waypoints: Array<IGuidedWaypoint>, currWaypointIdx: number }>(IGuidedConstants.commands.GET_WAYPOINTS).then((result) => {
            this._waypoints = result.waypoints;
            this._currWaypointIdx = result.currWaypointIdx;

            // are there any race conditions associated with this?
            // use a promise queue on the server to prevent sync problems?
            socket.on(IGuidedConstants.events.WAYPOINT_ADDED, this._eventHandlers.waypointAdded);
            socket.on(IGuidedConstants.events.WAYPOINT_REMOVED, this._eventHandlers.waypointRemoved);
            socket.on(IGuidedConstants.events.WAYPOINT_ERROR, this._eventHandlers.waypointError);
            socket.on(IGuidedConstants.events.WAYPOINT_STARTED, this._eventHandlers.waypointStarted);
            socket.on(IGuidedConstants.events.WAYPOINT_REACHED, this._eventHandlers.waypointReached);
        });
	}

	protected _onDisconnected(socket: IServerNodeClient): void {
        socket.off(IGuidedConstants.events.WAYPOINT_ADDED, this._eventHandlers.waypointAdded);
        socket.off(IGuidedConstants.events.WAYPOINT_REMOVED, this._eventHandlers.waypointRemoved);
        socket.off(IGuidedConstants.events.WAYPOINT_ERROR, this._eventHandlers.waypointError);
        socket.off(IGuidedConstants.events.WAYPOINT_STARTED, this._eventHandlers.waypointStarted);
        socket.off(IGuidedConstants.events.WAYPOINT_REACHED, this._eventHandlers.waypointReached);
	}

    get Waypoints(): Array<IGuidedWaypoint> {
        return this._waypoints;
    }

    get CurrWaypointIdx(): number {
        return this._currWaypointIdx;
    }

    get IsPaused(): boolean {
        return <boolean>(this._properties['IsPaused']);
    }

    addWaypoint(waypoint: IGuidedWaypoint, flyToNow?: boolean): Promise<void> {
        return this.sendCommand<void>(IGuidedConstants.commands.ADD_WAYPOINT, waypoint, flyToNow);
    }

    removeWaypoint(index: number): Promise<void> {
        return this.sendCommand<void>(IGuidedConstants.commands.REMOVE_WAYPOINT, index);
    }

    setAcceptanceRadius(radius: number): Promise<void> {
        return this.sendCommand<void>(IGuidedConstants.commands.SET_ACCEPTANCE_RADIUS, radius);
    }
}

import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IServerNodeClient } from './common/IServerNodeClient';
import { IDroneSenseService, constants } from '@dronesense/core/lib/common/IDroneSenseService';
import { IDroneManager } from '@dronesense/core/lib/common/IDroneManager';
import { DroneManager } from './DroneManager';
import { ISessionManager } from '@dronesense/core/lib/common/ISessionManager';
import { SessionManager } from './SessionManager';

export class DroneSenseService extends ServerNodeClientController implements IDroneSenseService {
	private _droneManager: DroneManager;
	private _sessionManager: SessionManager;
	private _isConnected: boolean;

	/**
	 * @param The address in the form: http://localhost:3005
	 */
	constructor(serverNodeClient: IServerNodeClient) {
		super(serverNodeClient);

		this._droneManager = new DroneManager(this.Node.spawn('/droneManager'));
		this._sessionManager = new SessionManager(this.Node.spawn('/sessionManager'));
		this._isConnected = false;
	}

	protected _onConnected(socket: IServerNodeClient): void {
		this._isConnected = true;
		this.trigger(constants.events.CONNECTED);
	}

	protected _onDisconnected(socket: IServerNodeClient): void {
		this._isConnected = false;
		this.trigger(constants.events.DISCONNECTED);
	}

	protected _onConnectError(socket: IServerNodeClient, error: any): void {
		this._isConnected = false;
		this.trigger(constants.events.CONNECT_ERROR, error);
	}

	public get IsConnected(): boolean {
		return this._isConnected;
	}

	public get DroneManager(): IDroneManager {
		return this._droneManager;
	}

	public get SessionManager(): ISessionManager {
		return this._sessionManager;
	}

	// TODO: change to TLS security for logging in
	public connect(username: string): Promise<void> {
		return this.Node.connect(username);
	}

	public disconnect(): Promise<void> {
		return this.Node.disconnect();
	}
}

export default DroneSenseService;

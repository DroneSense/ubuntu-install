import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IFlightPlanner, constants } from '@dronesense/core/lib/common/IFlightPlanner';

import { FlightPlan } from '@dronesense/model';

import { DSError } from '@dronesense/core/lib/common/DSError';

export class FlightPlanner extends ServerNodeClientController implements IFlightPlanner {
    constructor(serverNodeClient: IServerNodeClient) {
        super(serverNodeClient);
    }

	public clearFlightPlan(): Promise<void> {
		return this.sendCommand<void>(constants.commands.CLEAR_FLIGHT_PLAN);
	}

	public getFlightPlan(): Promise<FlightPlan> {
		// TODO:
		// return this.sendCommand<any>(constants.commands.GET_FLIGHT_PLAN).then((flightPlanJsonObject) => {
		// 	return FlightPlan.deserializeFromJSON(flightPlanJsonObject);
		// });
		return null;
	}

	public setFlightPlan(flightPlan: FlightPlan): Promise<void> {
		// TODO:
		// return new Promise<void>((resolve, reject) => {
		// 	return this.sendCommand<void>(constants.commands.SET_FLIGHT_PLAN, flightPlan.serializeToJSON());
		// });
		return null;
	}

	public startFlightPlan(): Promise<void> {
		return this.sendCommand<void>(constants.commands.START_FLIGHT_PLAN);
	}
}

export default FlightPlanner;

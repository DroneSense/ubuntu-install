import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IServerNodeClient } from './common/IServerNodeClient';
import { IDrone, constants } from '@dronesense/core/lib/common/IDrone';
import { IFlightController } from '@dronesense/core/lib/common/IFlightController';
import { FlightController } from './FlightController';

export class Drone extends ServerNodeClientController implements IDrone {
	private _flightController: FlightController;

	private _eventHandlers = {
		connected: () => {
			this.trigger(constants.events.CONNECTED);
		},
		disconnected: () => {
			this.trigger(constants.events.DISCONNECTED);
		},
		unreachable: () => {
			this.trigger(constants.events.UNREACHABLE);
		}
	};

	constructor(serverNodeClient: IServerNodeClient) {
		super(serverNodeClient);

		this._flightController = new FlightController(serverNodeClient.spawn('/flightController'));
	}

	protected _onConnected(socket: IServerNodeClient): void {
		socket.on(constants.events.CONNECTED, this._eventHandlers.connected);
		socket.on(constants.events.DISCONNECTED, this._eventHandlers.disconnected);
		socket.on(constants.events.UNREACHABLE, this._eventHandlers.unreachable);
	}

	protected _onDisconnected(socket: IServerNodeClient): void {
		socket.off(constants.events.CONNECTED, this._eventHandlers.connected);
		socket.off(constants.events.DISCONNECTED, this._eventHandlers.disconnected);
		socket.off(constants.events.UNREACHABLE, this._eventHandlers.unreachable);
	}

	public get Name(): string {
		return <string>this._properties['Name'];
	}

	public get FlightController(): IFlightController {
		return this._flightController;
	}

	public connect(): Promise<void> {
		return this.sendCommand<void>(constants.commands.CONNECT_DRONE);
	}

	public disconnect(): Promise<void> {
		return this.sendCommand<void>(constants.commands.DISCONNECT_DRONE);
	}
}

export default Drone;

import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { ISettingsManager, ISettingDelegate, constants as ISettingsManagerConstants } from '@dronesense/core/lib/common/ISettingsManager';
import { Setting } from './entities/Setting';
import { ISetting } from '@dronesense/core/lib/common/entities/ISetting';
import { Serializer } from '@dronesense/core/lib/utility/Serializer';

export class SettingsManager extends ServerNodeClientController implements ISettingsManager, ISettingDelegate {
    private _settings: Array<ISetting>;

    /**
     * internal event handlers
     */
	private _eventHandlers = {
        /**
         * Called when a setting's value has changed.
         * @param id The name of the setting.
         * @param value The new value of the setting.
         */
		settingValueChanged: (id: string, value: number) => {
            // update the setting value, if it is in the local cache
            this._settings.forEach((setting: ISetting) => {
                if (setting.id === id) {
                    setting.value = value;
                }
            });

			this.trigger(ISettingsManagerConstants.events.SETTING_VALUE_CHANGED, id, value);
		},
        settingsRefreshed: (settingJsonObject: Array<ISetting>) => {
            this._settings = Serializer.deserializeArray<Setting>(Setting, settingJsonObject);
            this.trigger(ISettingsManagerConstants.events.SETTINGS_REFRESHED, this._settings);
        }
	};

	constructor(serverNodeClient: IServerNodeClient) {
		super(serverNodeClient);
        this._settings = new Array<ISetting>();
	}

    protected _onConnected(socket: IServerNodeClient): void {
        socket.on(ISettingsManagerConstants.events.SETTING_VALUE_CHANGED, this._eventHandlers.settingValueChanged);
        socket.on(ISettingsManagerConstants.events.SETTINGS_REFRESHED, this._eventHandlers.settingsRefreshed);
    }

    protected _onDisconnected(socket: IServerNodeClient): void {
        socket.off(ISettingsManagerConstants.events.SETTING_VALUE_CHANGED, this._eventHandlers.settingValueChanged);
        socket.off(ISettingsManagerConstants.events.SETTINGS_REFRESHED, this._eventHandlers.settingsRefreshed);
    }

    public refresh(): Promise<Array<ISetting>> {
        return new Promise<Array<ISetting>>((resolve, reject) => {
            return this.sendCommandExpectResponseArray<Setting>(Setting, ISettingsManagerConstants.commands.REFRESH_SETTINGS)
                .then((settings: Array<Setting>) => {
                    settings.forEach((setting) => {
                        setting.delegate = this;
                    });
                    this._settings = settings;
                    resolve(this._settings);
                });
        });
    }

    public getSettings(): Promise<Array<ISetting>> {
        return new Promise<Array<ISetting>>((resolve, reject) => {
            if (this._settings.length <= 0) {
                return this.sendCommandExpectResponseArray<Setting>(Setting, ISettingsManagerConstants.commands.GET_SETTINGS)
                    .then((settings: Array<Setting>) => {
                        settings.forEach((setting) => {
                            setting.delegate = this;
                        });
                        this._settings = settings;
                        resolve(this._settings);
                    });
            } else {
                return this._settings;
            }
        });
    }

    /// ISettingDelegate Implementation

    public setValue(id: string, value: number): Promise<number> {
        return this.sendCommand<number>(ISettingsManagerConstants.commands.SET_VALUE, id, value);
    }
}

import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { ITelemetry, constants as ITelemetryConstants } from '@dronesense/core/lib/common/ITelemetry';
import { Severity } from '@dronesense/core/lib/common/enums/Severity';
import { ISystem } from '@dronesense/core/lib/common/entities/ISystem';
import { IBattery } from '@dronesense/core/lib/common/entities/IBattery';
import { IAttitude } from '@dronesense/core/lib/common/entities/IAttitude';
import { IPosition } from '@dronesense/core/lib/common/entities/IPosition';
import { IRadioControl } from '@dronesense/core/lib/common/entities/IRadioControl';
import { IRadio } from '@dronesense/core/lib/common/entities/IRadio';
import { ISensor } from '@dronesense/core/lib/common/entities/ISensor';
import { IDJIBattery } from '@dronesense/core/lib/common/entities/DJI/IDJIBattery';
import { IDJIRadio } from '@dronesense/core/lib/common/entities/DJI/IDJIRadio';

export class Telemetry extends ServerNodeClientController implements ITelemetry {
	private _eventHandlers = {
		statusMessage: (severity: Severity, value: any) => {
			this.trigger(ITelemetryConstants.events.STATUS_MESSAGE, severity, value);
		}
	};

	constructor(serverNodeClient: IServerNodeClient) {
		super(serverNodeClient);
	}

	protected _onConnected(socket: IServerNodeClient): void {
		this.subscribe();
		socket.on(ITelemetryConstants.events.STATUS_MESSAGE, this._eventHandlers.statusMessage);
    }

    protected _onDisconnected(socket: IServerNodeClient): void {
		// note: the node has disconnected... unsubscribing isn't necessary at this point
		// as it should have already happened on the server node.
		// this.unsubscribe();

		socket.off(ITelemetryConstants.events.STATUS_MESSAGE, this._eventHandlers.statusMessage);
    }

	protected _onPropertyChanged(name: string, value: any): void {
		this.trigger(ITelemetryConstants.events.PROPERTY_CHANGED, name, value);
		this.trigger(name, value);
	}

	public subscribe(): Promise<void> {
		return this.sendCommand<void>(ITelemetryConstants.commands.SUBSCRIBE);
	}

	public unsubscribe(): Promise<void> {
		return this.sendCommand<void>(ITelemetryConstants.commands.UNSUBSCRIBE);
	}

	// ITelemetry implementation

	public get Properties(): { [index: string]: any } {
		return this._properties;
	}

	public get System(): ISystem {
		return this._properties['System'];
	}

	public get Battery(): IBattery {
		return this._properties['Battery'];
	}

	public get Attitude(): IAttitude {
		return this._properties['Attitude'];
	}

	public get Position(): IPosition {
		return this._properties['Position'];
	}

	public get RadioControl(): IRadioControl {
		return this._properties['RadioControl'];
	}

	public get Radio(): IRadio {
		return this._properties['Radio'];
	}

	public get Sensor(): ISensor {
		return this._properties['Sensor'];
	}

	public get DJIBattery(): IDJIBattery {
		return this._properties['DJIBattery'];
	}

	public get DJIRadio(): IDJIRadio {
		return this._properties['DJIRadio'];
	}
}

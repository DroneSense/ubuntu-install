import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IGimbal, constants as IGimbalConstants } from '@dronesense/core/lib/common/IGimbal';
import { IGimbalState } from '@dronesense/core/lib/common/entities/IGimbalState';
import { DSError } from '@dronesense/core/lib/common/DSError';

export class Gimbal extends ServerNodeClientController implements IGimbal {
    private _state: IGimbalState = null;

    private _eventHandlers = {
        stateUpdated: (state: IGimbalState) => {
            this._state = state;
            this.trigger(IGimbalConstants.events.STATE_UPDATED, state);
        },
	};

    constructor(serverNodeClient: IServerNodeClient) {
        super(serverNodeClient);
        this._state = null;
    }

    public get State(): IGimbalState {
        return this._state;
    }

    protected _onConnected(socket: IServerNodeClient): void {
        socket.on(IGimbalConstants.events.STATE_UPDATED, this._eventHandlers.stateUpdated);
    }

    protected _onDisconnected(socket: IServerNodeClient): void {
        socket.off(IGimbalConstants.events.STATE_UPDATED, this._eventHandlers.stateUpdated);
    }
}

export default Gimbal;

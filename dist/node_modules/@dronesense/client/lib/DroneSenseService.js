"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var IDroneSenseService_1 = require('@dronesense/core/lib/common/IDroneSenseService');
var DroneManager_1 = require('./DroneManager');
var SessionManager_1 = require('./SessionManager');
var DroneSenseService = (function (_super) {
    __extends(DroneSenseService, _super);
    function DroneSenseService(serverNodeClient) {
        _super.call(this, serverNodeClient);
        this._droneManager = new DroneManager_1.DroneManager(this.Node.spawn('/droneManager'));
        this._sessionManager = new SessionManager_1.SessionManager(this.Node.spawn('/sessionManager'));
        this._isConnected = false;
    }
    DroneSenseService.prototype._onConnected = function (socket) {
        this._isConnected = true;
        this.trigger(IDroneSenseService_1.constants.events.CONNECTED);
    };
    DroneSenseService.prototype._onDisconnected = function (socket) {
        this._isConnected = false;
        this.trigger(IDroneSenseService_1.constants.events.DISCONNECTED);
    };
    DroneSenseService.prototype._onConnectError = function (socket, error) {
        this._isConnected = false;
        this.trigger(IDroneSenseService_1.constants.events.CONNECT_ERROR, error);
    };
    Object.defineProperty(DroneSenseService.prototype, "IsConnected", {
        get: function () {
            return this._isConnected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DroneSenseService.prototype, "DroneManager", {
        get: function () {
            return this._droneManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DroneSenseService.prototype, "SessionManager", {
        get: function () {
            return this._sessionManager;
        },
        enumerable: true,
        configurable: true
    });
    DroneSenseService.prototype.connect = function (username) {
        return this.Node.connect(username);
    };
    DroneSenseService.prototype.disconnect = function () {
        return this.Node.disconnect();
    };
    return DroneSenseService;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.DroneSenseService = DroneSenseService;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DroneSenseService;

//# sourceMappingURL=DroneSenseService.js.map

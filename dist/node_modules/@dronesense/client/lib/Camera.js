"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var ICamera_1 = require('@dronesense/core/lib/common/ICamera');
var Camera = (function (_super) {
    __extends(Camera, _super);
    function Camera(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            takePictureStarted: function () {
                _this._isTakingPicture = true;
                _this.trigger(ICamera_1.constants.events.TAKE_PICTURE_STARTED);
            },
            takePictureFinished: function () {
                _this._isTakingPicture = false;
                _this.trigger(ICamera_1.constants.events.TAKE_PICTURE_FINISHED);
            },
            recordingStarted: function () {
                _this._isRecording = true;
                _this.trigger(ICamera_1.constants.events.RECORDING_STARTED);
            },
            recordingStopped: function () {
                _this._isRecording = false;
                _this.trigger(ICamera_1.constants.events.RECORDING_STOPPED);
            }
        };
        this._isTakingPicture = false;
        this._isRecording = false;
    }
    Camera.prototype._onConnected = function (socket) {
        socket.on(ICamera_1.constants.events.TAKE_PICTURE_STARTED, this._eventHandlers.takePictureStarted);
        socket.on(ICamera_1.constants.events.TAKE_PICTURE_FINISHED, this._eventHandlers.takePictureFinished);
        socket.on(ICamera_1.constants.events.RECORDING_STARTED, this._eventHandlers.recordingStarted);
        socket.on(ICamera_1.constants.events.RECORDING_STOPPED, this._eventHandlers.recordingStopped);
    };
    Camera.prototype._onDisconnected = function (socket) {
        socket.off(ICamera_1.constants.events.TAKE_PICTURE_STARTED, this._eventHandlers.takePictureStarted);
        socket.off(ICamera_1.constants.events.TAKE_PICTURE_FINISHED, this._eventHandlers.takePictureFinished);
        socket.off(ICamera_1.constants.events.RECORDING_STARTED, this._eventHandlers.recordingStarted);
        socket.off(ICamera_1.constants.events.RECORDING_STOPPED, this._eventHandlers.recordingStopped);
    };
    Object.defineProperty(Camera.prototype, "IsTakingPicture", {
        get: function () {
            return this._isTakingPicture;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "IsRecording", {
        get: function () {
            return this._isRecording;
        },
        enumerable: true,
        configurable: true
    });
    Camera.prototype.takePicture = function () {
        return this.sendCommand(ICamera_1.constants.commands.TAKE_PICTURE);
    };
    Camera.prototype.startRecording = function () {
        return this.sendCommand(ICamera_1.constants.commands.START_RECORDING);
    };
    Camera.prototype.stopRecording = function () {
        return this.sendCommand(ICamera_1.constants.commands.STOP_RECORDING);
    };
    return Camera;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.Camera = Camera;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Camera;

//# sourceMappingURL=Camera.js.map

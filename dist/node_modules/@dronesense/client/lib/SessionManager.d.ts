import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IServerNodeClient } from './common/IServerNodeClient';
import { ISessionManager } from '@dronesense/core/lib/common/ISessionManager';
import { ISession } from '@dronesense/core/lib/common/ISession';
import { IDroneMetadata } from '@dronesense/core/lib/common/metadata/IDroneMetadata';
import { ISessionMetadata } from '@dronesense/core/lib/common/metadata/ISessionMetadata';
export declare class SessionManager extends ServerNodeClientController implements ISessionManager {
    private _eventHandlers;
    constructor(serverNodeClient: IServerNodeClient);
    protected _onConnected(socket: IServerNodeClient): void;
    protected _onDisconnected(socket: IServerNodeClient): void;
    createSession(sessionName: string, color: string, drones: Array<IDroneMetadata>): Promise<ISession>;
    getSessions(): Promise<Array<ISessionMetadata>>;
    joinSession(metadata: ISessionMetadata, timeoutMs: number): Promise<ISession>;
}
export default SessionManager;

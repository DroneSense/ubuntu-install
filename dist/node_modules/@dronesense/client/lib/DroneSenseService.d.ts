import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IServerNodeClient } from './common/IServerNodeClient';
import { IDroneSenseService } from '@dronesense/core/lib/common/IDroneSenseService';
import { IDroneManager } from '@dronesense/core/lib/common/IDroneManager';
import { ISessionManager } from '@dronesense/core/lib/common/ISessionManager';
export declare class DroneSenseService extends ServerNodeClientController implements IDroneSenseService {
    private _droneManager;
    private _sessionManager;
    private _isConnected;
    constructor(serverNodeClient: IServerNodeClient);
    protected _onConnected(socket: IServerNodeClient): void;
    protected _onDisconnected(socket: IServerNodeClient): void;
    protected _onConnectError(socket: IServerNodeClient, error: any): void;
    IsConnected: boolean;
    DroneManager: IDroneManager;
    SessionManager: ISessionManager;
    connect(username: string): Promise<void>;
    disconnect(): Promise<void>;
}
export default DroneSenseService;

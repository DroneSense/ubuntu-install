"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var ITelemetry_1 = require('@dronesense/core/lib/common/ITelemetry');
var Telemetry = (function (_super) {
    __extends(Telemetry, _super);
    function Telemetry(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            statusMessage: function (severity, value) {
                _this.trigger(ITelemetry_1.constants.events.STATUS_MESSAGE, severity, value);
            }
        };
    }
    Telemetry.prototype._onConnected = function (socket) {
        this.subscribe();
        socket.on(ITelemetry_1.constants.events.STATUS_MESSAGE, this._eventHandlers.statusMessage);
    };
    Telemetry.prototype._onDisconnected = function (socket) {
        socket.off(ITelemetry_1.constants.events.STATUS_MESSAGE, this._eventHandlers.statusMessage);
    };
    Telemetry.prototype._onPropertyChanged = function (name, value) {
        this.trigger(ITelemetry_1.constants.events.PROPERTY_CHANGED, name, value);
        this.trigger(name, value);
    };
    Telemetry.prototype.subscribe = function () {
        return this.sendCommand(ITelemetry_1.constants.commands.SUBSCRIBE);
    };
    Telemetry.prototype.unsubscribe = function () {
        return this.sendCommand(ITelemetry_1.constants.commands.UNSUBSCRIBE);
    };
    Object.defineProperty(Telemetry.prototype, "Properties", {
        get: function () {
            return this._properties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "System", {
        get: function () {
            return this._properties['System'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "Battery", {
        get: function () {
            return this._properties['Battery'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "Attitude", {
        get: function () {
            return this._properties['Attitude'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "Position", {
        get: function () {
            return this._properties['Position'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "RadioControl", {
        get: function () {
            return this._properties['RadioControl'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "Radio", {
        get: function () {
            return this._properties['Radio'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "Sensor", {
        get: function () {
            return this._properties['Sensor'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "DJIBattery", {
        get: function () {
            return this._properties['DJIBattery'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Telemetry.prototype, "DJIRadio", {
        get: function () {
            return this._properties['DJIRadio'];
        },
        enumerable: true,
        configurable: true
    });
    return Telemetry;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.Telemetry = Telemetry;

//# sourceMappingURL=Telemetry.js.map

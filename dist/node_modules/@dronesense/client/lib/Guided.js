"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var IGuided_1 = require('@dronesense/core/lib/common/IGuided');
var DSError_1 = require('@dronesense/core/lib/common/DSError');
var Guided = (function (_super) {
    __extends(Guided, _super);
    function Guided(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            waypointAdded: function (waypoint, index) {
                _this._waypoints.splice(index, 0, waypoint);
                _this.trigger(IGuided_1.constants.events.WAYPOINT_ADDED, waypoint, index);
                _this.trigger(IGuided_1.constants.events.WAYPOINTS_CHANGED);
            },
            waypointRemoved: function (index) {
                _this._waypoints.splice(index, 1);
                _this.trigger(IGuided_1.constants.events.WAYPOINT_REMOVED, index);
                _this.trigger(IGuided_1.constants.events.WAYPOINTS_CHANGED);
            },
            waypointError: function (index, errorJson) {
                _this.trigger(IGuided_1.constants.events.WAYPOINT_ERROR, index, DSError_1.DSError.fromJSON(errorJson));
            },
            waypointStarted: function (index) {
                _this._currWaypointIdx = index;
                _this.trigger(IGuided_1.constants.events.WAYPOINT_STARTED, index);
            },
            waypointReached: function (index) {
                _this._currWaypointIdx = index;
                _this._waypoints[_this._currWaypointIdx].isReached = true;
                _this.trigger(IGuided_1.constants.events.WAYPOINT_REACHED, index);
            }
        };
        this._waypoints = new Array();
        this._currWaypointIdx = -1;
    }
    Guided.prototype._onConnected = function (socket) {
        var _this = this;
        this.sendCommand(IGuided_1.constants.commands.GET_WAYPOINTS).then(function (result) {
            _this._waypoints = result.waypoints;
            _this._currWaypointIdx = result.currWaypointIdx;
            socket.on(IGuided_1.constants.events.WAYPOINT_ADDED, _this._eventHandlers.waypointAdded);
            socket.on(IGuided_1.constants.events.WAYPOINT_REMOVED, _this._eventHandlers.waypointRemoved);
            socket.on(IGuided_1.constants.events.WAYPOINT_ERROR, _this._eventHandlers.waypointError);
            socket.on(IGuided_1.constants.events.WAYPOINT_STARTED, _this._eventHandlers.waypointStarted);
            socket.on(IGuided_1.constants.events.WAYPOINT_REACHED, _this._eventHandlers.waypointReached);
        });
    };
    Guided.prototype._onDisconnected = function (socket) {
        socket.off(IGuided_1.constants.events.WAYPOINT_ADDED, this._eventHandlers.waypointAdded);
        socket.off(IGuided_1.constants.events.WAYPOINT_REMOVED, this._eventHandlers.waypointRemoved);
        socket.off(IGuided_1.constants.events.WAYPOINT_ERROR, this._eventHandlers.waypointError);
        socket.off(IGuided_1.constants.events.WAYPOINT_STARTED, this._eventHandlers.waypointStarted);
        socket.off(IGuided_1.constants.events.WAYPOINT_REACHED, this._eventHandlers.waypointReached);
    };
    Object.defineProperty(Guided.prototype, "Waypoints", {
        get: function () {
            return this._waypoints;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Guided.prototype, "CurrWaypointIdx", {
        get: function () {
            return this._currWaypointIdx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Guided.prototype, "IsPaused", {
        get: function () {
            return (this._properties['IsPaused']);
        },
        enumerable: true,
        configurable: true
    });
    Guided.prototype.addWaypoint = function (waypoint, flyToNow) {
        return this.sendCommand(IGuided_1.constants.commands.ADD_WAYPOINT, waypoint, flyToNow);
    };
    Guided.prototype.removeWaypoint = function (index) {
        return this.sendCommand(IGuided_1.constants.commands.REMOVE_WAYPOINT, index);
    };
    Guided.prototype.setAcceptanceRadius = function (radius) {
        return this.sendCommand(IGuided_1.constants.commands.SET_ACCEPTANCE_RADIUS, radius);
    };
    return Guided;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.Guided = Guided;

//# sourceMappingURL=Guided.js.map

import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IFlightController } from '@dronesense/core/lib/common/IFlightController';
import { FlightMode } from '@dronesense/core/lib/common/enums/FlightMode';
import { ITelemetry } from '@dronesense/core/lib/common/ITelemetry';
import { ISettingsManager } from '@dronesense/core/lib/common/ISettingsManager';
import { IGuided } from '@dronesense/core/lib/common/IGuided';
import { IFlightPlanner } from '@dronesense/core/lib/common/IFlightPlanner';
import { Autopilot } from '@dronesense/core/lib/common/enums/Autopilot';
import { Firmware } from '@dronesense/core/lib/common/enums/Firmware';
import { IHomePosition } from '@dronesense/core/lib/common/entities/IHomePosition';
export declare class FlightController extends ServerNodeClientController implements IFlightController {
    private _telemetry;
    private _settingsManager;
    private _guided;
    private _flightPlanner;
    constructor(serverNodeClient: IServerNodeClient);
    Type: Autopilot;
    Version: string;
    Firmware: Firmware;
    Telemetry: ITelemetry;
    SettingsManager: ISettingsManager;
    Guided: IGuided;
    FlightPlanner: IFlightPlanner;
    reboot(): Promise<void>;
    calibrate(): Promise<void>;
    arm(enable: boolean): Promise<void>;
    takeoff(altitudeAGL: number): Promise<void>;
    setFlightMode(flightMode: FlightMode): Promise<void>;
    getHomePosition(): Promise<IHomePosition>;
    setHomePosition(homePosition: IHomePosition): Promise<void>;
    pause(pause: boolean): Promise<void>;
    enableAltitudeMSLOffset(enabled: boolean, altitudeMSLOffset?: number): Promise<void>;
}
export default FlightController;

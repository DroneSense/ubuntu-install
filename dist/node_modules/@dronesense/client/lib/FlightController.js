"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var IFlightController_1 = require('@dronesense/core/lib/common/IFlightController');
var Telemetry_1 = require('./Telemetry');
var SettingsManager_1 = require('./SettingsManager');
var Guided_1 = require('./Guided');
var Orbit_1 = require('./Orbit');
var FlightPlanner_1 = require('./FlightPlanner');
var FlightController = (function (_super) {
    __extends(FlightController, _super);
    function FlightController(serverNodeClient) {
        _super.call(this, serverNodeClient);
        this._telemetry = new Telemetry_1.Telemetry(serverNodeClient.spawn('/telemetry'));
        this._settingsManager = new SettingsManager_1.SettingsManager(serverNodeClient.spawn('/settingsManager'));
        this._guided = new Guided_1.Guided(serverNodeClient.spawn('/guided'));
        this._orbit = new Orbit_1.Orbit(serverNodeClient.spawn('/orbit'));
        this._flightPlanner = new FlightPlanner_1.FlightPlanner(serverNodeClient.spawn('/flightPlanner'));
    }
    Object.defineProperty(FlightController.prototype, "Type", {
        get: function () {
            return (this._properties['Type']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "Version", {
        get: function () {
            return (this._properties['Version']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "Firmware", {
        get: function () {
            return (this._properties['Firmware']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "Telemetry", {
        get: function () {
            return this._telemetry;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "SettingsManager", {
        get: function () {
            return this._settingsManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "Guided", {
        get: function () {
            return this._guided;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "Orbit", {
        get: function () {
            return this._orbit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlightController.prototype, "FlightPlanner", {
        get: function () {
            return this._flightPlanner;
        },
        enumerable: true,
        configurable: true
    });
    FlightController.prototype.reboot = function () {
        return this.sendCommand(IFlightController_1.constants.commands.REBOOT_DRONE);
    };
    FlightController.prototype.calibrate = function () {
        return this.sendCommand(IFlightController_1.constants.commands.CALIBRATE_DRONE);
    };
    FlightController.prototype.arm = function (enable) {
        return this.sendCommand(IFlightController_1.constants.commands.ARM_DRONE, enable);
    };
    FlightController.prototype.takeoff = function (altitudeAGL) {
        return this.sendCommand(IFlightController_1.constants.commands.TAKEOFF, altitudeAGL);
    };
    FlightController.prototype.setFlightMode = function (flightMode) {
        return this.sendCommand(IFlightController_1.constants.commands.SET_FLIGHT_MODE, flightMode);
    };
    FlightController.prototype.getHomePosition = function () {
        return this.sendCommand(IFlightController_1.constants.commands.GET_HOME_POSITION);
    };
    FlightController.prototype.setHomePosition = function (homePosition) {
        return this.sendCommand(IFlightController_1.constants.commands.SET_HOME_POSITION, homePosition);
    };
    FlightController.prototype.pause = function (pause) {
        return this.sendCommand(IFlightController_1.constants.commands.SET_PAUSED, pause);
    };
    FlightController.prototype.enableAltitudeMSLOffset = function (enabled, altitudeMSLOffset) {
        return this.sendCommand(IFlightController_1.constants.commands.ENABLE_ALTITUDE_MSL_OFFSET, enabled, altitudeMSLOffset);
    };
    return FlightController;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.FlightController = FlightController;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FlightController;

//# sourceMappingURL=FlightController.js.map

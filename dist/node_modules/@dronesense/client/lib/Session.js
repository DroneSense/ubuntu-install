"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var ISession_1 = require('@dronesense/core/lib/common/ISession');
var Drone_1 = require('./Drone');
var Session = (function (_super) {
    __extends(Session, _super);
    function Session(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            masterConnected: function (username) {
                _this.trigger(ISession_1.constants.events.MASTER_CONNECTED, username);
            },
            masterDisconnected: function (username) {
                _this.trigger(ISession_1.constants.events.MASTER_DISCONNECTED, username);
            },
            slaveRequestingConnection: function (username, cb) {
                _this.trigger(ISession_1.constants.events.SLAVE_REQUESTING_CONNECTION, username, cb);
            },
            slaveRequestingMaster: function (username, cb) {
                _this.trigger(ISession_1.constants.events.SLAVE_REQUESTING_MASTER, username, cb);
            },
            slaveConnected: function (username) {
                _this.trigger(ISession_1.constants.events.SLAVE_CONNECTED, username);
            },
            slaveDisconnected: function (username) {
                _this.trigger(ISession_1.constants.events.SLAVE_DISCONNECTED, username);
            },
            sessionEnded: function () {
                _this.leaveSession();
                _this.trigger(ISession_1.constants.events.SESSION_ENDED);
            }
        };
        this._cachedDrones = {};
    }
    Object.defineProperty(Session.prototype, "Id", {
        get: function () {
            return this._properties['Id'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Session.prototype, "Name", {
        get: function () {
            return this._properties['Name'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Session.prototype, "Color", {
        get: function () {
            return this._properties['Color'];
        },
        enumerable: true,
        configurable: true
    });
    Session.prototype._onConnected = function (socket) {
        socket.on(ISession_1.constants.events.MASTER_CONNECTED, this._eventHandlers.masterConnected);
        socket.on(ISession_1.constants.events.MASTER_DISCONNECTED, this._eventHandlers.masterDisconnected);
        socket.on(ISession_1.constants.events.SLAVE_REQUESTING_CONNECTION, this._eventHandlers.slaveRequestingConnection);
        socket.on(ISession_1.constants.events.SLAVE_REQUESTING_MASTER, this._eventHandlers.slaveRequestingMaster);
        socket.on(ISession_1.constants.events.SLAVE_CONNECTED, this._eventHandlers.slaveConnected);
        socket.on(ISession_1.constants.events.SLAVE_DISCONNECTED, this._eventHandlers.slaveDisconnected);
        socket.on(ISession_1.constants.events.SESSION_ENDED, this._eventHandlers.sessionEnded);
    };
    Session.prototype._onDisconnected = function (socket) {
        socket.off(ISession_1.constants.events.MASTER_CONNECTED, this._eventHandlers.masterConnected);
        socket.off(ISession_1.constants.events.MASTER_DISCONNECTED, this._eventHandlers.masterDisconnected);
        socket.off(ISession_1.constants.events.SLAVE_REQUESTING_CONNECTION, this._eventHandlers.slaveRequestingConnection);
        socket.off(ISession_1.constants.events.SLAVE_REQUESTING_MASTER, this._eventHandlers.slaveRequestingMaster);
        socket.off(ISession_1.constants.events.SLAVE_CONNECTED, this._eventHandlers.slaveConnected);
        socket.off(ISession_1.constants.events.SLAVE_DISCONNECTED, this._eventHandlers.slaveDisconnected);
        socket.off(ISession_1.constants.events.SESSION_ENDED, this._eventHandlers.sessionEnded);
    };
    Session.prototype.connect = function (username, clientToken) {
        var _this = this;
        return this.Node.connect(username).then(function () {
            return _this.sendCommand(ISession_1.constants.commands.CONNECT_TO_SESSION, clientToken).then(function (address) {
                return address;
            });
        });
    };
    Session.prototype.leaveSession = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.Node.disconnect();
            resolve();
        });
    };
    Session.prototype.endSession = function () {
        var _this = this;
        return this.sendCommand(ISession_1.constants.commands.END_SESSION).then(function () {
            return _this._eventHandlers.sessionEnded();
        });
    };
    Session.prototype.requestMaster = function () {
        return this.sendCommand(ISession_1.constants.commands.REQUEST_MASTER);
    };
    Session.prototype.getMaster = function () {
        return this.sendCommand(ISession_1.constants.commands.GET_MASTER);
    };
    Session.prototype.getSlaves = function () {
        return this.sendCommand(ISession_1.constants.commands.GET_SLAVES);
    };
    Session.prototype.getDrones = function () {
        var _this = this;
        return this.sendCommand(ISession_1.constants.commands.GET_DRONES).then(function (droneNamespaces) {
            droneNamespaces.forEach(function (droneNs) {
                if (!_this._cachedDrones[droneNs]) {
                    var drone = new Drone_1.Drone(_this.Node.spawn(droneNs));
                    _this._cachedDrones[droneNs] = drone;
                }
            });
            return Object.keys(_this._cachedDrones).map(function (key) {
                return _this._cachedDrones[key];
            });
        });
    };
    return Session;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.Session = Session;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Session;

//# sourceMappingURL=Session.js.map

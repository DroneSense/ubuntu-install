"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var ISessionManager_1 = require('@dronesense/core/lib/common/ISessionManager');
var Session_1 = require('./Session');
var IServerNodeClient_1 = require('./common/IServerNodeClient');
var DSError_1 = require('@dronesense/core/lib/common/DSError');
var SessionManager = (function (_super) {
    __extends(SessionManager, _super);
    function SessionManager(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            sessionCreated: function (sessionMetadata) {
                _this.trigger(ISessionManager_1.constants.events.SESSION_CREATED, sessionMetadata);
            },
            sessionDestroyed: function (id) {
                _this.trigger(ISessionManager_1.constants.events.SESSION_DESTROYED, id);
            }
        };
    }
    SessionManager.prototype._onConnected = function (socket) {
        socket.on(ISessionManager_1.constants.events.SESSION_CREATED, this._eventHandlers.sessionCreated);
        socket.on(ISessionManager_1.constants.events.SESSION_DESTROYED, this._eventHandlers.sessionDestroyed);
    };
    SessionManager.prototype._onDisconnected = function (socket) {
        socket.off(ISessionManager_1.constants.events.SESSION_CREATED, this._eventHandlers.sessionCreated);
        socket.off(ISessionManager_1.constants.events.SESSION_DESTROYED, this._eventHandlers.sessionDestroyed);
    };
    SessionManager.prototype.createSession = function (sessionName, color, drones) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var lastDroneHostId = null;
            drones.forEach(function (drone) {
                if (lastDroneHostId !== null && drone.droneHostId !== lastDroneHostId) {
                    return reject(DSError_1.DSError.create(DSError_1.DSError.Codes.CMD_FAILED, 'all drones must be from the same drone host.'));
                }
                lastDroneHostId = drone.droneHostId;
            });
            var droneIds = drones.map(function (droneMetadata) {
                return droneMetadata.id;
            });
            return _this.sendCommand(ISessionManager_1.constants.commands.CREATE_SESSION, sessionName, color, lastDroneHostId, droneIds).then(function (address) {
                var addressComponents = address.split(':');
                if (addressComponents[0] === '0.0.0.0') {
                    var hostComponents = _this.Node.ClientInfo.Address.split(':');
                    address = hostComponents[0] + ':' + hostComponents[1] + ':' + addressComponents[1];
                }
                var session = new Session_1.Session(IServerNodeClient_1.ServerNodeClient.create(address));
                return session.connect(_this.Node.ClientInfo.Username, null).then(function (role) {
                    resolve(session);
                });
            });
        });
    };
    SessionManager.prototype.getSessions = function () {
        return this.sendCommand(ISessionManager_1.constants.commands.GET_SESSIONS);
    };
    SessionManager.prototype.joinSession = function (metadata, timeoutMs) {
        var _this = this;
        return this.sendCommand(ISessionManager_1.constants.commands.JOIN_SESSION, metadata.id, timeoutMs).then(function (result) {
            var addressComponents = result.address.split(':');
            if (addressComponents[0] === '0.0.0.0') {
                var hostComponents = _this.Node.ClientInfo.Address.split(':');
                result.address = hostComponents[0] + ':' + hostComponents[1] + ':' + addressComponents[1];
            }
            var session = new Session_1.Session(IServerNodeClient_1.ServerNodeClient.create(result.address));
            return session.connect(_this.Node.ClientInfo.Username, result.clientToken).then(function (role) {
                return session;
            });
        });
    };
    return SessionManager;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.SessionManager = SessionManager;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SessionManager;

//# sourceMappingURL=SessionManager.js.map

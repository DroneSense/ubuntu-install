"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var IDroneManager_1 = require('@dronesense/core/lib/common/IDroneManager');
var DroneManager = (function (_super) {
    __extends(DroneManager, _super);
    function DroneManager(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            droneCreated: function (droneMetadata) {
                _this.trigger(IDroneManager_1.constants.events.DRONE_CREATED, droneMetadata);
            },
            droneDestroyed: function (id) {
                _this.trigger(IDroneManager_1.constants.events.DRONE_DESTROYED, id);
            }
        };
    }
    DroneManager.prototype._onConnected = function (socket) {
        socket.on(IDroneManager_1.constants.events.DRONE_CREATED, this._eventHandlers.droneCreated);
        socket.on(IDroneManager_1.constants.events.DRONE_DESTROYED, this._eventHandlers.droneDestroyed);
    };
    DroneManager.prototype._onDisconnected = function (socket) {
        socket.off(IDroneManager_1.constants.events.DRONE_CREATED, this._eventHandlers.droneCreated);
        socket.off(IDroneManager_1.constants.events.DRONE_DESTROYED, this._eventHandlers.droneDestroyed);
    };
    DroneManager.prototype.getDrones = function () {
        return this.sendCommand(IDroneManager_1.constants.commands.GET_DRONES);
    };
    return DroneManager;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.DroneManager = DroneManager;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DroneManager;

//# sourceMappingURL=DroneManager.js.map

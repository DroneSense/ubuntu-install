import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IServerNodeClient } from './common/IServerNodeClient';
import { ISession } from '@dronesense/core/lib/common/ISession';
import { IDrone } from '@dronesense/core/lib/common/IDrone';
export declare class Session extends ServerNodeClientController implements ISession {
    private _cachedDrones;
    private _eventHandlers;
    constructor(serverNodeClient: IServerNodeClient);
    Id: string;
    Name: string;
    Color: string;
    protected _onConnected(socket: IServerNodeClient): void;
    protected _onDisconnected(socket: IServerNodeClient): void;
    connect(username: string, clientToken?: string): Promise<string>;
    leaveSession(): Promise<void>;
    endSession(): Promise<void>;
    requestMaster(): Promise<void>;
    getMaster(): Promise<string>;
    getSlaves(): Promise<string[]>;
    getDrones(): Promise<Array<IDrone>>;
}
export default Session;

import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { ITelemetry } from '@dronesense/core/lib/common/ITelemetry';
import { ISystem } from '@dronesense/core/lib/common/entities/ISystem';
import { IBattery } from '@dronesense/core/lib/common/entities/IBattery';
import { IAttitude } from '@dronesense/core/lib/common/entities/IAttitude';
import { IPosition } from '@dronesense/core/lib/common/entities/IPosition';
import { IRadioControl } from '@dronesense/core/lib/common/entities/IRadioControl';
import { IRadio } from '@dronesense/core/lib/common/entities/IRadio';
import { ISensor } from '@dronesense/core/lib/common/entities/ISensor';
import { IDJIBattery } from '@dronesense/core/lib/common/entities/DJI/IDJIBattery';
import { IDJIRadio } from '@dronesense/core/lib/common/entities/DJI/IDJIRadio';
export declare class Telemetry extends ServerNodeClientController implements ITelemetry {
    private _eventHandlers;
    constructor(serverNodeClient: IServerNodeClient);
    protected _onConnected(socket: IServerNodeClient): void;
    protected _onDisconnected(socket: IServerNodeClient): void;
    protected _onPropertyChanged(name: string, value: any): void;
    subscribe(): Promise<void>;
    unsubscribe(): Promise<void>;
    Properties: {
        [index: string]: any;
    };
    System: ISystem;
    Battery: IBattery;
    Attitude: IAttitude;
    Position: IPosition;
    RadioControl: IRadioControl;
    Radio: IRadio;
    Sensor: ISensor;
    DJIBattery: IDJIBattery;
    DJIRadio: IDJIRadio;
}

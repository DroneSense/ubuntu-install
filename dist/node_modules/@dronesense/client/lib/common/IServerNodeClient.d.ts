import { IClientInfo } from './IClientInfo';
export declare class ServerNodeClient implements IServerNodeClient {
    private _clientInfo;
    private _parent;
    private _children;
    private _socket;
    private _nsString;
    private _connectResolve;
    private _connectReject;
    private _disconnectResolve;
    onConnected: (socket: IServerNodeClient) => void;
    onDisconnected: (socket: IServerNodeClient) => void;
    onConnectError: (socket: IServerNodeClient, error: any) => void;
    on(event: string, fn: Function): IServerNodeClient;
    off(event: string, fn?: Function): IServerNodeClient;
    private _eventHandlers;
    constructor(clientInfo: IClientInfo, ns?: string);
    ClientInfo: IClientInfo;
    getConnectionString(excludeHostAddress?: boolean): string;
    Parent: ServerNodeClient;
    Children: Array<ServerNodeClient>;
    static create(address: string): IServerNodeClient;
    spawn(ns: string): IServerNodeClient;
    release(): void;
    Connected: boolean;
    connect(username?: string): Promise<void>;
    disconnect(): Promise<void>;
    emit(event: string, ...args: any[]): IServerNodeClient;
}
export interface IServerNodeClient {
    ClientInfo: IClientInfo;
    Connected: boolean;
    onConnected: (socket: IServerNodeClient) => void;
    onDisconnected: (socket: IServerNodeClient) => void;
    onConnectError: (socket: IServerNodeClient, error: any) => void;
    on(event: string, fn: Function): IServerNodeClient;
    off(event: string, fn?: Function): IServerNodeClient;
    spawn(ns: string): IServerNodeClient;
    release(): void;
    connect(username?: string): Promise<void>;
    disconnect(): Promise<void>;
    emit(event: string, ...args: any[]): IServerNodeClient;
}
export default IServerNodeClient;

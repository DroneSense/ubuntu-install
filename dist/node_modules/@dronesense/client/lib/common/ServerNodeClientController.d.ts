import * as Serialization from '@dronesense/core/lib/utility/Serialization';
import { IEventEmitterInternal } from '@dronesense/core/lib/common/IEventEmitter';
import { IServerNodeClient } from './IServerNodeClient';
export declare class ServerNodeClientController implements IEventEmitterInternal {
    private _serverNodeClient;
    private _awaitTimeoutId;
    private _awaitResolve;
    protected _properties: {
        [index: string]: any;
    };
    on: (eventName: string, callback?: Function, context?: any) => any;
    once: (events: string, callback: Function, context?: any) => any;
    off: (eventName?: string, callback?: Function, context?: any) => any;
    trigger: (eventName: string, ...args: any[]) => any;
    private __eventHandlers;
    constructor(serverNodeClient?: IServerNodeClient);
    private _setServerNodeClient(serverNodeClient);
    protected Node: IServerNodeClient;
    protected _onConnected(socket: IServerNodeClient): void;
    protected _onDisconnected(socket: IServerNodeClient): void;
    protected _onConnectError(socket: IServerNodeClient, error: any): void;
    protected _onPropertyChanged(name: string, value: any): void;
    private _sendEvent(event, args);
    protected sendCommand<T>(event: string, ...args: any[]): Promise<T>;
    protected sendCommandExpectResponse<T extends Serialization.ICoding>(TType: {
        new (): T;
    }, event: string, ...args: any[]): Promise<T>;
    protected sendCommandExpectResponseArray<T extends Serialization.ICoding>(TType: {
        new (): T;
    }, event: string, ...args: any[]): Promise<Array<T>>;
    private _awaitConnection(timeout);
}
export default ServerNodeClientController;

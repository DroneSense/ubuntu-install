import { IServerNodeClient } from './common/IServerNodeClient';
import { ServerNodeClientController } from './common/ServerNodeClientController';
import { IGuided } from '@dronesense/core/lib/common/IGuided';
import { IGuidedWaypoint } from '@dronesense/core/lib/common/entities/IGuidedWaypoint';
export declare class Guided extends ServerNodeClientController implements IGuided {
    private _waypoints;
    private _currWaypointIdx;
    private _eventHandlers;
    constructor(serverNodeClient: IServerNodeClient);
    protected _onConnected(socket: IServerNodeClient): void;
    protected _onDisconnected(socket: IServerNodeClient): void;
    Waypoints: Array<IGuidedWaypoint>;
    CurrWaypointIdx: number;
    IsPaused: boolean;
    addWaypoint(waypoint: IGuidedWaypoint, flyToNow?: boolean): Promise<void>;
    removeWaypoint(index: number): Promise<void>;
    setAcceptanceRadius(radius: number): Promise<void>;
}

"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var IDrone_1 = require('@dronesense/core/lib/common/IDrone');
var FlightController_1 = require('./FlightController');
var Camera_1 = require('./Camera');
var Gimbal_1 = require('./Gimbal');
var Drone = (function (_super) {
    __extends(Drone, _super);
    function Drone(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            connected: function () {
                _this.trigger(IDrone_1.constants.events.CONNECTED);
            },
            disconnected: function () {
                _this.trigger(IDrone_1.constants.events.DISCONNECTED);
            },
            unreachable: function () {
                _this.trigger(IDrone_1.constants.events.UNREACHABLE);
            }
        };
        this._flightController = new FlightController_1.FlightController(serverNodeClient.spawn('/flightController'));
        this._camera = new Camera_1.Camera(serverNodeClient.spawn('/camera'));
        this._gimbal = new Gimbal_1.Gimbal(serverNodeClient.spawn('/gimbal'));
    }
    Drone.prototype._onConnected = function (socket) {
        socket.on(IDrone_1.constants.events.CONNECTED, this._eventHandlers.connected);
        socket.on(IDrone_1.constants.events.DISCONNECTED, this._eventHandlers.disconnected);
        socket.on(IDrone_1.constants.events.UNREACHABLE, this._eventHandlers.unreachable);
    };
    Drone.prototype._onDisconnected = function (socket) {
        socket.off(IDrone_1.constants.events.CONNECTED, this._eventHandlers.connected);
        socket.off(IDrone_1.constants.events.DISCONNECTED, this._eventHandlers.disconnected);
        socket.off(IDrone_1.constants.events.UNREACHABLE, this._eventHandlers.unreachable);
    };
    Object.defineProperty(Drone.prototype, "Name", {
        get: function () {
            return this._properties['Name'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drone.prototype, "FlightController", {
        get: function () {
            return this._flightController;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drone.prototype, "Camera", {
        get: function () {
            return this._camera;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Drone.prototype, "Gimbal", {
        get: function () {
            return this._gimbal;
        },
        enumerable: true,
        configurable: true
    });
    Drone.prototype.connect = function () {
        return this.sendCommand(IDrone_1.constants.commands.CONNECT_DRONE);
    };
    Drone.prototype.disconnect = function () {
        return this.sendCommand(IDrone_1.constants.commands.DISCONNECT_DRONE);
    };
    return Drone;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.Drone = Drone;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Drone;

//# sourceMappingURL=Drone.js.map

"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ServerNodeClientController_1 = require('./common/ServerNodeClientController');
var ISettingsManager_1 = require('@dronesense/core/lib/common/ISettingsManager');
var Setting_1 = require('./entities/Setting');
var Serializer_1 = require('@dronesense/core/lib/utility/Serializer');
var SettingsManager = (function (_super) {
    __extends(SettingsManager, _super);
    function SettingsManager(serverNodeClient) {
        var _this = this;
        _super.call(this, serverNodeClient);
        this._eventHandlers = {
            settingValueChanged: function (id, value) {
                _this._settings.forEach(function (setting) {
                    if (setting.id === id) {
                        setting.value = value;
                    }
                });
                _this.trigger(ISettingsManager_1.constants.events.SETTING_VALUE_CHANGED, id, value);
            },
            settingsRefreshed: function (settingJsonObject) {
                _this._settings = Serializer_1.Serializer.deserializeArray(Setting_1.Setting, settingJsonObject);
                _this.trigger(ISettingsManager_1.constants.events.SETTINGS_REFRESHED, _this._settings);
            }
        };
        this._settings = new Array();
    }
    SettingsManager.prototype._onConnected = function (socket) {
        socket.on(ISettingsManager_1.constants.events.SETTING_VALUE_CHANGED, this._eventHandlers.settingValueChanged);
        socket.on(ISettingsManager_1.constants.events.SETTINGS_REFRESHED, this._eventHandlers.settingsRefreshed);
    };
    SettingsManager.prototype._onDisconnected = function (socket) {
        socket.off(ISettingsManager_1.constants.events.SETTING_VALUE_CHANGED, this._eventHandlers.settingValueChanged);
        socket.off(ISettingsManager_1.constants.events.SETTINGS_REFRESHED, this._eventHandlers.settingsRefreshed);
    };
    SettingsManager.prototype.refresh = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return _this.sendCommandExpectResponseArray(Setting_1.Setting, ISettingsManager_1.constants.commands.REFRESH_SETTINGS)
                .then(function (settings) {
                settings.forEach(function (setting) {
                    setting.delegate = _this;
                });
                _this._settings = settings;
                resolve(_this._settings);
            });
        });
    };
    SettingsManager.prototype.getSettings = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._settings.length <= 0) {
                return _this.sendCommandExpectResponseArray(Setting_1.Setting, ISettingsManager_1.constants.commands.GET_SETTINGS)
                    .then(function (settings) {
                    settings.forEach(function (setting) {
                        setting.delegate = _this;
                    });
                    _this._settings = settings;
                    resolve(_this._settings);
                });
            }
            else {
                return _this._settings;
            }
        });
    };
    SettingsManager.prototype.setValue = function (id, value) {
        return this.sendCommand(ISettingsManager_1.constants.commands.SET_VALUE, id, value);
    };
    return SettingsManager;
}(ServerNodeClientController_1.ServerNodeClientController));
exports.SettingsManager = SettingsManager;

//# sourceMappingURL=SettingsManager.js.map

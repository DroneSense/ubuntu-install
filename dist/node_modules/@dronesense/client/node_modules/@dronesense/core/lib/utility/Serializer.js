"use strict";
var Serialization = require('./Serialization');
var ObjectFactory = (function () {
    function ObjectFactory() {
        this._types = {};
    }
    ObjectFactory.prototype.addType = function (type, clazz) {
        this._types[type] = clazz;
    };
    ObjectFactory.prototype.createInstance = function (type) {
        if (this._types[type]) {
            return new this._types[type]();
        }
        else {
            throw new Error('\'' + type + '\' does not exist in ObjectFactory');
        }
    };
    return ObjectFactory;
}());
var Serializer = (function () {
    function Serializer() {
    }
    Serializer.addType = function (type, clazz) {
        Serializer._objectFactory.addType(type, clazz);
    };
    Serializer.serialize = function (obj) {
        var s = new Serialization.Serializer();
        return s.serialize(obj);
    };
    Serializer.serializeArray = function (objects) {
        var _this = this;
        var encodedObjects = new Array();
        objects.forEach(function (obj) {
            encodedObjects.push(_this.serialize(obj));
        });
        return encodedObjects;
    };
    Serializer.deserialize = function (clazz, json) {
        var d = new Serialization.Deserializer(this._objectFactory);
        return d.deserialize(clazz, json);
    };
    Serializer.deserializeArray = function (clazz, jsonObjects) {
        var _this = this;
        var decodedObjects = new Array();
        jsonObjects.forEach(function (obj) {
            decodedObjects.push(_this.deserialize(clazz, obj));
        });
        return decodedObjects;
    };
    Serializer.deserializeToFlatObject = function (c, json) {
        var instance = new c();
        for (var prop in json) {
            if (!json.hasOwnProperty(prop)) {
                continue;
            }
            instance[prop] = json[prop];
        }
        return instance;
    };
    Serializer.deserializeToFlatObjects = function (c, jsonArray) {
        var _this = this;
        var instances = new Array();
        jsonArray.forEach(function (json) {
            instances.push(_this.deserializeToFlatObject(c, json));
        });
        return instances;
    };
    Serializer._objectFactory = new ObjectFactory();
    return Serializer;
}());
exports.Serializer = Serializer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Serializer;

//# sourceMappingURL=Serializer.js.map

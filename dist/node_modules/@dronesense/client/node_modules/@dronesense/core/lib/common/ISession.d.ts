import { IEventEmitter } from './IEventEmitter';
import { IDrone } from './IDrone';
export declare module constants {
    module commands {
        const CONNECT_TO_SESSION: string;
        const END_SESSION: string;
        const REQUEST_MASTER: string;
        const GET_MASTER: string;
        const GET_SLAVES: string;
        const GET_DRONES: string;
    }
    module events {
        const MASTER_CONNECTED: string;
        const MASTER_DISCONNECTED: string;
        const SLAVE_REQUESTING_CONNECTION: string;
        const SLAVE_REQUESTING_MASTER: string;
        const SLAVE_CONNECTED: string;
        const SLAVE_DISCONNECTED: string;
        const SESSION_ENDED: string;
    }
}
export interface ISession extends IEventEmitter {
    Id: string;
    Name: string;
    Color: string;
    leaveSession(): Promise<void>;
    endSession(): Promise<void>;
    requestMaster(): Promise<void>;
    getMaster(): Promise<string>;
    getSlaves(): Promise<string[]>;
    getDrones(): Promise<IDrone[]>;
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'master-connected', callback?: (username: string) => void, context?: any): any;
    on(eventName: 'master-disconnected', callback?: (username: string) => void, context?: any): any;
    on(eventName: 'slave-requesting-connection', callback?: (username: string, cb: (accepted: boolean) => void) => void, context?: any): any;
    on(eventname: 'slave-requesting-master', callback?: (username: string, cb: (accepted: boolean) => void) => void, context?: any): any;
    on(eventName: 'slave-connected', callback?: (username: string) => void, context?: any): any;
    on(eventName: 'slave-disconnected', callback?: (username: string) => void, context?: any): any;
}
export default ISession;

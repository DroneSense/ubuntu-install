import { IEventEmitter } from './IEventEmitter';
import { FlightMode } from './enums/FlightMode';
import { ITelemetry } from './ITelemetry';
import { ISettingsManager } from '../common/ISettingsManager';
import { IGuided } from '../common/IGuided';
import { IOrbit } from '../common/IOrbit';
import { IFlightPlanner } from '../common/IFlightPlanner';
import { Autopilot } from './enums/Autopilot';
import { Firmware } from './enums/Firmware';
import { IHomePosition } from './entities/IHomePosition';
export declare module constants {
    module commands {
        const REBOOT_DRONE: string;
        const CALIBRATE_DRONE: string;
        const ARM_DRONE: string;
        const TAKEOFF: string;
        const ENABLE_ALL_STREAMS: string;
        const SET_FLIGHT_MODE: string;
        const GET_HOME_POSITION: string;
        const SET_HOME_POSITION: string;
        const SET_PAUSED: string;
        const ENABLE_ALTITUDE_MSL_OFFSET: string;
    }
    module events {
        const ARMED: string;
        const PROPERTY_CHANGED: string;
    }
}
export interface IFlightControllerConfig {
    type: string;
}
export interface IFlightController extends IEventEmitter {
    Type: Autopilot;
    Version: string;
    Firmware: Firmware;
    Telemetry: ITelemetry;
    SettingsManager: ISettingsManager;
    Guided: IGuided;
    Orbit: IOrbit;
    FlightPlanner: IFlightPlanner;
    reboot(): Promise<void>;
    calibrate(): Promise<void>;
    arm(enable: boolean): Promise<void>;
    takeoff(altitudeAGL: number): Promise<void>;
    setFlightMode(flightMode: FlightMode): Promise<void>;
    getHomePosition(): Promise<IHomePosition>;
    setHomePosition(homePosition: IHomePosition): Promise<void>;
    pause(pause: boolean): Promise<void>;
    enableAltitudeMSLOffset(enabled: boolean, altitudeMSLOffset?: number): Promise<void>;
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'propertyChanged', callback?: (name: string, value: any) => void, context?: any): any;
}
export default IFlightController;

import { IEventEmitter } from './IEventEmitter';
import { Severity } from '../common/enums/Severity';
import { ISystem } from './entities/ISystem';
import { IBattery } from './entities/IBattery';
import { IAttitude } from './entities/IAttitude';
import { IPosition } from './entities/IPosition';
import { IRadioControl } from './entities/IRadioControl';
import { IRadio } from './entities/IRadio';
import { ISensor } from './entities/ISensor';
import { IDJIBattery } from './entities/DJI/IDJIBattery';
import { IDJIRadio } from './entities/DJI/IDJIRadio';
export declare module constants {
    module commands {
        const SUBSCRIBE: string;
        const UNSUBSCRIBE: string;
    }
    module events {
        const PROPERTY_CHANGED: string;
        const STATUS_MESSAGE: string;
    }
}
export interface ITelemetry extends IEventEmitter {
    Properties: {
        [index: string]: any;
    };
    System: ISystem;
    Battery: IBattery;
    Attitude: IAttitude;
    Position: IPosition;
    RadioControl: IRadioControl;
    Radio: IRadio;
    Sensor: ISensor;
    DJIBattery: IDJIBattery;
    DJIRadio: IDJIRadio;
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'propertyChanged', callback?: (name: string, value: any) => void, context?: any): any;
    on(eventName: 'statusMessage', callback?: (severity: Severity, message: string) => void, context?: any): any;
    on(eventName: 'System', callback?: (value: ISystem) => void, context?: any): any;
    on(eventName: 'Battery', callback?: (value: IBattery) => void, context?: any): any;
    on(eventName: 'Attitude', callback?: (value: IAttitude) => void, context?: any): any;
    on(eventName: 'Position', callback?: (value: IPosition) => void, context?: any): any;
    on(eventName: 'RadioControl', callback?: (value: IRadioControl) => void, context?: any): any;
    on(eventName: 'Radio', callback?: (value: IRadio) => void, context?: any): any;
    on(eventName: 'Sensor', callback?: (value: ISensor) => void, context?: any): any;
    on(eventName: 'DJIBattery', callback?: (value: IDJIBattery) => void, context?: any): any;
    on(eventName: 'DJIRadio', callback?: (value: IDJIRadio) => void, context?: any): any;
}
export default ITelemetry;

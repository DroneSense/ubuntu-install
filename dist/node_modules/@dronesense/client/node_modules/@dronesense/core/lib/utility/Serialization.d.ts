export interface ICoding {
    __type__: string;
    initWithCoder(coder: IDecoder): void;
    encodeWithCoder(coder: IEncoder): void;
}
export interface IEncoder {
    encodeObjectForKey(obj: ICoding, key: string): void;
    encodeArrayForKey(values: Array<any>, key: string): void;
    encodeBooleanForKey(value: boolean, key: string): void;
    encodeNumberForKey(value: number, key: string): void;
    encodeStringForKey(value: string, key: string): void;
    encodeDateForKey(value: Date, key: string): void;
}
export interface IDecoder {
    decodeObjectForKey(key: string): any;
    decodeObjectOfTypeForKey<T extends ICoding>(clazz: {
        new (): T;
    }, key: string): any;
    decodeArrayForKey(key: string): Array<any>;
    decodeBooleanForKey(key: string): boolean;
    decodeNumberForKey(key: string): number;
    decodeStringForKey(key: string): string;
    decodeDateForKey(key: string): Date;
}
export interface IObjectFactory {
    createInstance(type: string): Object & ICoding;
}
export declare class Serializer implements IEncoder {
    private _json;
    constructor();
    serialize<T extends ICoding>(obj: T): any;
    private serializeObject(obj);
    private encode(value);
    private encodeArray(values);
    encodeObjectForKey(obj: ICoding, key: string): void;
    encodeArrayForKey(values: Array<any>, key: string): void;
    encodeBooleanForKey(value: boolean, key: string): void;
    encodeNumberForKey(value: number, key: string): void;
    encodeStringForKey(value: string, key: string): void;
    encodeDateForKey(value: Date, key: string): void;
}
export declare class Deserializer implements IDecoder {
    private _json;
    private _objectFactory;
    constructor(objectFactory?: IObjectFactory);
    deserialize<T extends ICoding>(clazz: {
        new (): T;
    }, json: any): T;
    private deserializeObject(json);
    private decode(value);
    private decodeArray(values);
    decodeObjectForKey(key: string): any;
    decodeObjectOfTypeForKey<T extends ICoding>(clazz: {
        new (): T;
    }, key: string): any;
    decodeArrayForKey(key: string): Array<any>;
    decodeBooleanForKey(key: string): boolean;
    decodeNumberForKey(key: string): number;
    decodeStringForKey(key: string): string;
    decodeDateForKey(key: string): any;
}

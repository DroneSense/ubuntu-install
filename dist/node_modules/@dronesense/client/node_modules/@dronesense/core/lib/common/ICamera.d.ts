import { IEventEmitter } from './IEventEmitter';
export declare module constants {
    module commands {
        const TAKE_PICTURE: string;
        const START_RECORDING: string;
        const STOP_RECORDING: string;
    }
    module events {
        const TAKE_PICTURE_STARTED: string;
        const TAKE_PICTURE_FINISHED: string;
        const RECORDING_STARTED: string;
        const RECORDING_STOPPED: string;
    }
}
export interface ICamera extends IEventEmitter {
    IsTakingPicture: boolean;
    IsRecording: boolean;
    takePicture(): Promise<void>;
    startRecording(): Promise<void>;
    stopRecording(): Promise<void>;
    on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'take-picture-started', callback?: () => void, context?: any): any;
    on(eventName: 'take-picture-finished', callback?: () => void, context?: any): any;
    on(eventName: 'recording-started', callback?: () => void, context?: any): any;
    on(eventName: 'recording-stopped', callback?: () => void, context?: any): any;
}
export default ICamera;

export enum DSErrorCode {
    NOT_SET = 0,

    // IDrone
    CONNECT_FAILED = 10,
    DISCONNECT_FAILED = 20,

    // IDroneManager
    CONFIGURATION_ERROR = 30,
    DRONE_ALREADY_EXISTS = 40,
    DRONE_DOES_NOT_EXIST = 50,

    // IDroneSenseService
    SOCKETIO_CONNECTION_FAILED = 59,
    SESSION_ID_IN_USE = 60,
    DRONE_LOCKED = 70,

    // ISession
    SLAVE_CONNECTION_REQUEST_DENIED = 80,
    SLAVE_REQUEST_MASTER_DENIED = 90,

    // IFlightPlanner
    FLIGHT_PLAN_NOT_SET = 100,
    EKF_POSITION_ESTIMATE_NOT_OK = 101,

    // FlightController State Errors
    INVALID_MODE = 200,
    MODE_NOT_SUPPORTED = 201,
    TUNNEL_NOT_OPEN = 202,
    TUNNEL_ALREADY_OPEN = 203,

    // Everything else...
    CMD_FAILED = 500,
    NOT_AUTHORIZED = 600,
    NOT_CONNECTED = 601,
    SERIALIZATION_FAILED = 601,
    DESERIALIZATION_FAILED = 602,
    FEATURE_NOT_IMPLEMENTED = 603,
    UNKNOWN = 700,
    INVALID_STATE = 800,
    TIMEOUT = 900,

    // GENERAL ERRORS
    OPERATION_FAILED = 1000,
    INDEX_OUT_OF_RANGE = 1001,
    ALREADY_SET = 1002,
    VALUE_NOT_UNIQUE = 1003,

    PAUSED = 1004
}

export class DSError extends Error {
    name: string = 'DSError';
    code: DSErrorCode;
    message: string;
    parentError: DSError;

    constructor(code?: number, message?: string, parentError?: any) {
        super(message);
        // super.name = 'DSError'; // NOTE: name is REQUIRED to be DSError
        this.code = code;
        this.message = message;

        if (parentError) {
            if (parentError.name === 'DSError') {
                this.parentError = parentError;
            } else if (typeof parentError.toString === 'function') {
                this.parentError = new DSError(DSErrorCode.UNKNOWN, parentError.toString());
            } else {
                this.parentError = new DSError(DSErrorCode.UNKNOWN, 'unknown error');
            }
        }
    }

    static get Codes() {
        return DSErrorCode;
    }

    static create(code: number, message: string, parentError?: any) {
        return new DSError(code, message, parentError);
    }

    static normalize(error: any) {
        if (error) {
            if (error.name === 'DSError') {
                return error;
            } else if (typeof error.toString === 'function') {
                return new DSError(DSErrorCode.UNKNOWN, error.toString());
            } else {
                return new DSError(DSErrorCode.UNKNOWN, 'unknown error');
            }
        } else {
            return new DSError(DSErrorCode.UNKNOWN, 'unknown null/undefined error');
        }
    }

    static fromJSON(json: any): DSError {
        var error = new DSError();
        error.code = json.code;
        error.message = json.message;
        error.parentError = json.parentError ? DSError.fromJSON(json.parentError) : null;
        return error;
    }

    toJSON() : any {
        return {
            name: this.name,
            code: this.code,
            message: this.message,
            parentError: this.parentError
        };
    }
}

export default DSError;

import { IEventEmitter } from './IEventEmitter';
import { DSError } from './DSError';
import { IGimbalState } from './entities/IGimbalState';

export module constants {
    export module commands {
        export const TAKE_PICTURE: string = 'take-picture';
        export const START_RECORDING: string = 'start-recording';
        export const STOP_RECORDING: string = 'stop-recording';
    }

    export module events {
        export const TAKE_PICTURE_STARTED: string = 'take-picture-started';
        export const TAKE_PICTURE_FINISHED: string = 'take-picture-finished';
        export const RECORDING_STARTED: string = 'recording-started';
        export const RECORDING_STOPPED: string = 'recording-stopped';
    }
}

export interface ICamera extends IEventEmitter {
    /**
     * returns true if a picture is currently being taken.
     */
    IsTakingPicture: boolean;

    /**
     * returns true if a video is currently being recorded.
     */
    IsRecording: boolean;

    /**
     * Takes a picture.
     */
    takePicture(): Promise<void>;

    /**
     * Starts recording.
     */
    startRecording(): Promise<void>;

    /**
     * Stops recording.
     */
    stopRecording(): Promise<void>;

    // Events
	on(eventName: string, callback?: Function, context?: any): any;
    on(eventName: 'take-picture-started', callback?: () => void, context?: any): any;
    on(eventName: 'take-picture-finished', callback?: () => void, context?: any): any;
    on(eventName: 'recording-started', callback?: () => void, context?: any): any;
    on(eventName: 'recording-stopped', callback?: () => void, context?: any): any;
}

export default ICamera;

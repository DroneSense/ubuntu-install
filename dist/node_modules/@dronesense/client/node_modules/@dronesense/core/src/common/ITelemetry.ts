import { IEventEmitter } from './IEventEmitter';
import { Severity } from '../common/enums/Severity';
import { ISystem } from './entities/ISystem';
import { IBattery } from './entities/IBattery';
import { IAttitude } from './entities/IAttitude';
import { IPosition } from './entities/IPosition';
import { IRadioControl } from './entities/IRadioControl';
import { IRadio } from './entities/IRadio';
import { ISensor } from './entities/ISensor';
import { IDJIBattery } from './entities/DJI/IDJIBattery';
import { IDJIRadio } from './entities/DJI/IDJIRadio';

export module constants {
	export module commands {
		export const SUBSCRIBE: string = 'subscribe-telemetry';
		export const UNSUBSCRIBE: string = 'unsubscribe-telemetry';
	}
    export module events {
        export const PROPERTY_CHANGED = 'propertyChanged';
		export const STATUS_MESSAGE = 'statusMessage';
    }
}

export interface ITelemetry extends IEventEmitter {
    Properties: { [index: string]: any };

	System: ISystem;
	Battery: IBattery;
	Attitude: IAttitude;
	Position: IPosition;
	RadioControl: IRadioControl;
	Radio: IRadio;
	Sensor: ISensor;

	// DJI specific telemetry data
	DJIBattery: IDJIBattery;
	DJIRadio: IDJIRadio;

    // Events
	on(eventName: string, callback?: Function, context?: any): any;
	on(eventName: 'propertyChanged', callback?: (name: string, value: any) => void, context?: any): any;
	on(eventName: 'statusMessage', callback?: (severity: Severity, message: string) => void, context?: any): any;

	// property update events
	on(eventName: 'System', callback?: (value: ISystem) => void, context?: any): any;
	on(eventName: 'Battery', callback?: (value: IBattery) => void, context?: any): any;
	on(eventName: 'Attitude', callback?: (value: IAttitude) => void, context?: any): any;
	on(eventName: 'Position', callback?: (value: IPosition) => void, context?: any): any;
	on(eventName: 'RadioControl', callback?: (value: IRadioControl) => void, context?: any): any;
	on(eventName: 'Radio', callback?: (value: IRadio) => void, context?: any): any;
	on(eventName: 'Sensor', callback?: (value: ISensor) => void, context?: any): any;
	on(eventName: 'DJIBattery', callback?: (value: IDJIBattery) => void, context?: any): any;
	on(eventName: 'DJIRadio', callback?: (value: IDJIRadio) => void, context?: any): any;
}

export default ITelemetry;

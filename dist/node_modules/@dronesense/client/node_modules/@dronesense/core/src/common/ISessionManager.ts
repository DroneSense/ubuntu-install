import { IEventEmitter } from './IEventEmitter';
import { ISession } from './ISession';
import { ISessionMetadata } from './metadata/ISessionMetadata';
import { IDroneMetadata } from './metadata/IDroneMetadata';

export module constants {
	export module commands {
		export const CREATE_SESSION: string = 'create-session';
		export const GET_SESSIONS: string = 'get-sessions';
		export const JOIN_SESSION: string = 'join-session';
	}
	export module events {
		export const SESSION_CREATED: string = 'session-created';
		export const SESSION_DESTROYED: string = 'session-destroyed';
	}
}

export interface ISessionManager extends IEventEmitter {

	/**
	 * Creates a new session with this client as its master.
	 * @param {string} sessionName - The name of the session.
	 * @param {string} color - The hex value color of the session.
	 * @param {Array<IDroneMetadata>} drones - An array of drones to checkout for use by the session.
	 * @returns {Promise<ISession>} - a promise that resolves with the session.
	 */
	createSession(sessionName: string, color: string, drones: Array<IDroneMetadata>): Promise<ISession>;

	/**
	 * Gets a list of existing sessions.
	 * @returns {Promise<Array<ISessionMetadata>>} - a promise that resolves with ISessionMetadatas.
	 */
	getSessions(): Promise<Array<ISessionMetadata>>;

	/**
	 * Requests to join a session.
	 * @param {ISessionMetadata} metadata - the metadata of the session to join.
	 * @param {number} timeoutMs - the amount of time to await a response from the session master before failing the join.
	 * @returns {Promise<ISession>} - a promise that resolves with the joined session, or rejects if there's a timeout.
	 */
	joinSession(metadata: ISessionMetadata, timeoutMs: number): Promise<ISession>;

	// Events
	on(eventName: string, callback?: Function, context?: any): any;
	on(eventName: 'session-created', callback?: (metadata: ISessionMetadata) => void, context?: any): any;
	on(eventName: 'session-destroyed', callback?: (id: string) => void, context?: any): any;
}

export default ISessionManager;
